Message-ID: <988276506.3022.1485851663278.JavaMail.confluence@ip-10-127-227-164>
Subject: Exported From Confluence
MIME-Version: 1.0
Content-Type: multipart/related; 
	boundary="----=_Part_3021_1746430577.1485851663278"

------=_Part_3021_1746430577.1485851663278
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Content-Location: file:///C:/exported.html

<html xmlns:o=3D'urn:schemas-microsoft-com:office:office'
      xmlns:w=3D'urn:schemas-microsoft-com:office:word'
      xmlns:v=3D'urn:schemas-microsoft-com:vml'
      xmlns=3D'urn:w3-org-ns:HTML'>
<head>
    <meta http-equiv=3D"Content-Type" content=3D"text/html; charset=3Dutf-8=
">
    <title>2. Browsing, finding, viewing</title>
    <!--[if gte mso 9]>
    <xml>
        <o:OfficeDocumentSettings>
            <o:TargetScreenSize>1024x640</o:TargetScreenSize>
            <o:PixelsPerInch>72</o:PixelsPerInch>
            <o:AllowPNG/>
        </o:OfficeDocumentSettings>
        <w:WordDocument>
            <w:View>Print</w:View>
            <w:Zoom>90</w:Zoom>
            <w:DoNotOptimizeForBrowser/>
        </w:WordDocument>
    </xml>
    <![endif]-->
    <style>
                <!--
        @page Section1 {
            size: 8.5in 11.0in;
            margin: 1.0in;
            mso-header-margin: .5in;
            mso-footer-margin: .5in;
            mso-paper-source: 0;
        }

        td {
            page-break-inside: avoid;
        }

        tr {
            page-break-after: avoid;
        }

        div.Section1 {
            page: Section1;
        }

        /* Confluence print stylesheet. Common to all themes for print medi=
a */
/* Full of !important until we improve batching for print CSS */

@media print {
    #main {
        padding-bottom: 1em !important; /* The default padding of 6em is to=
o much for printouts */
    }

    body {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        font-size: 10pt;
        line-height: 1.2;
    }

    body, #full-height-container, #main, #page, #content, .has-personal-sid=
ebar #content {
        background: #fff !important;
        color: #000 !important;
        border: 0 !important;
        width: 100% !important;
        height: auto !important;
        min-height: auto !important;
        margin: 0 !important;
        padding: 0 !important;
        display: block !important;
    }

    a, a:link, a:visited, a:focus, a:hover, a:active {
        color: #000;
    }

    #content h1,
    #content h2,
    #content h3,
    #content h4,
    #content h5,
    #content h6 {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        page-break-after: avoid;
    }

    pre {
        font-family: Monaco, "Courier New", monospace;
    }

    #header,
    .aui-header-inner,
    #navigation,
    #sidebar,
    .sidebar,
    #personal-info-sidebar,
    .ia-fixed-sidebar,
    .page-actions,
    .navmenu,
    .ajs-menu-bar,
    .noprint,
    .inline-control-link,
    .inline-control-link a,
    a.show-labels-editor,
    .global-comment-actions,
    .comment-actions,
    .quick-comment-container,
    #addcomment {
        display: none !important;
    }

    .comment .date::before {
        content: none !important; /* remove middot for print view */
    }

    h1.pagetitle img {
        height: auto;
        width: auto;
    }

    .print-only {
        display: block;
    }

    #footer {
        position: relative !important; /* CONF-17506 Place the footer at en=
d of the content */
        margin: 0;
        padding: 0;
        background: none;
        clear: both;
    }

    #poweredby {
        border-top: none;
        background: none;
    }

    #poweredby li.print-only {
        display: list-item;
        font-style: italic;
    }

    #poweredby li.noprint {
        display: none;
    }

    /* no width controls in print */
    .wiki-content .table-wrap,
    .wiki-content p,
    .panel .codeContent,
    .panel .codeContent pre,
    .image-wrap {
        overflow: visible !important;
    }

    /* TODO - should this work? */
    #children-section,
    #comments-section .comment,
    #comments-section .comment .comment-body,
    #comments-section .comment .comment-content,
    #comments-section .comment p {
        page-break-inside: avoid;
    }

    #page-children a {
        text-decoration: none;
    }

    /**
     hide twixies

     the specificity here is a hack because print styles
     are getting loaded before the base styles. */
    #comments-section.pageSection .section-header,
    #comments-section.pageSection .section-title,
    #children-section.pageSection .section-header,
    #children-section.pageSection .section-title,
    .children-show-hide {
        padding-left: 0;
        margin-left: 0;
    }

    .children-show-hide.icon {
        display: none;
    }

    /* personal sidebar */
    .has-personal-sidebar #content {
        margin-right: 0px;
    }

    .has-personal-sidebar #content .pageSection {
        margin-right: 0px;
    }
}
-->
    </style>
</head>
<body>
    <h1>2. Browsing, finding, viewing</h1>
    <div class=3D"Section1">
        <p>We will start by going through the various ways to find and retr=
ieve content from eZ Platform using the API. While this will be covered in =
further dedicated documentation, it is necessary to explain a few basic con=
cepts of the Public API. In the following recipes, you will learn about the=
 general principles of the API as they are introduced in individual recipes=
.</p>
<p><style type=3D"text/css">/*<![CDATA[*/
div.rbtoc1485851663226 {padding: 0px;}
div.rbtoc1485851663226 ul {list-style: disc;margin-left: 0px;}
div.rbtoc1485851663226 li {margin-left: 0px;padding-left: 0px;}

/*]]>*/</style></p>
<div class=3D"toc-macro rbtoc1485851663226">=20
<ul class=3D"toc-indentation">=20
<li><a href=3D"#id-2.Browsing,finding,viewing-DisplayingvaluesfromaContenti=
tem">Displaying values from a Content item</a></li>=20
<li><a href=3D"#id-2.Browsing,finding,viewing-TraversingaLocationsubtree">T=
raversing a Location subtree</a></li>=20
<li><a href=3D"#id-2.Browsing,finding,viewing-ViewingContentMetadata">Viewi=
ng Content Metadata</a>=20
<ul class=3D"toc-indentation">=20
<li><a href=3D"#id-2.Browsing,finding,viewing-SettingtheRepositoryUser">Set=
ting the Repository User</a></li>=20
<li><a href=3D"#id-2.Browsing,finding,viewing-TheContentInfoValueObject">Th=
e ContentInfo Value Object</a></li>=20
<li><a href=3D"#id-2.Browsing,finding,viewing-Locations">Locations</a></li>=
=20
<li><a href=3D"#id-2.Browsing,finding,viewing-Relations">Relations</a></li>=
=20
<li><a href=3D"#id-2.Browsing,finding,viewing-ContentInfoproperties">Conten=
tInfo properties</a></li>=20
<li><a href=3D"#id-2.Browsing,finding,viewing-Owninguser">Owning user</a></=
li>=20
<li><a href=3D"#id-2.Browsing,finding,viewing-Section">Section</a></li>=20
<li><a href=3D"#id-2.Browsing,finding,viewing-Versions">Versions</a></li>=
=20
</ul> </li>=20
<li><a href=3D"#id-2.Browsing,finding,viewing-Search">Search</a>=20
<ul class=3D"toc-indentation">=20
<li><a href=3D"#id-2.Browsing,finding,viewing-Performingasimplefulltextsear=
ch">Performing a simple full text search</a>=20
<ul class=3D"toc-indentation">=20
<li><a href=3D"#id-2.Browsing,finding,viewing-QueryandCriterionobjects">Que=
ry and Criterion objects</a></li>=20
<li><a href=3D"#id-2.Browsing,finding,viewing-Runningthesearchqueryandusing=
theresults">Running the search query and using the results</a></li>=20
</ul> </li>=20
<li><a href=3D"#id-2.Browsing,finding,viewing-Performinganadvancedsearch">P=
erforming an advanced search</a></li>=20
<li><a href=3D"#id-2.Browsing,finding,viewing-Performingafetchlikesearch">P=
erforming a fetch like search</a>=20
<ul class=3D"toc-indentation">=20
<li><a href=3D"#id-2.Browsing,finding,viewing-Usingin()insteadofOR">Using i=
n() instead of OR</a></li>=20
</ul> </li>=20
<li><a href=3D"#id-2.Browsing,finding,viewing-Performingapuresearchcount">P=
erforming a pure search count</a></li>=20
</ul> </li>=20
</ul>=20
</div>
<p></p>
<h2 id=3D"id-2.Browsing,finding,viewing-DisplayingvaluesfromaContentitem">D=
isplaying values from a Content item</h2>
<p>In this recipe, we will see how to fetch a Content item from the reposit=
ory, and obtain its Field's content.&nbsp;</p>
<p>Let's first see the full code. You can see the Command line version at&n=
bsp;<a href=3D"https://github.com/ezsystems/CookbookBundle/blob/master/Comm=
and/ViewContentCommand.php" class=3D"external-link" rel=3D"nofollow">https:=
//github.com/ezsystems/CookbookBundle/blob/master/Command/ViewContentComman=
d.php</a>.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>Viewing content</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: true; theme: Eclipse" style=3D"font-size:=
12px;">$repository =3D $this-&gt;getContainer()-&gt;get( 'exponential.api.rep=
ository' );
$contentService =3D $repository-&gt;getContentService();
$contentTypeService =3D $repository-&gt;getContentTypeService();
$fieldTypeService =3D $repository-&gt;getFieldTypeService();

try
{
    $content =3D $contentService-&gt;loadContent( 66 );
    $contentType =3D $contentTypeService-&gt;loadContentType( $content-&gt;=
contentInfo-&gt;contentTypeId );
    // iterate over the field definitions of the content type and print out=
 each field's identifier and value
    foreach( $contentType-&gt;fieldDefinitions as $fieldDefinition )
    {
        $output-&gt;write( $fieldDefinition-&gt;identifier . ": " );
        $fieldType =3D $fieldTypeService-&gt;getFieldType( $fieldDefinition=
-&gt;fieldTypeIdentifier );
        $field =3D $content-&gt;getField( $fieldDefinition-&gt;identifier )=
;

=09=09// We use the Field's toHash() method to get readable content out of =
the Field
        $valueHash =3D $fieldType-&gt;toHash( $field-&gt;value );
        $output-&gt;writeln( $valueHash );
    }
}
catch( \eZ\Publish\API\Repository\Exceptions\NotFoundException $e )
{
    // if the id is not found
    $output-&gt;writeln( "No content with id $contentId" );
}
catch( \eZ\Publish\API\Repository\Exceptions\UnauthorizedException $e )
{
    // not allowed to read this content
    $output-&gt;writeln( "Anonymous users are not allowed to read content w=
ith id $contentId" );
}</pre>=20
</div>
</div>
<p>Let's analyze this code block by block.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: true; theme: Eclipse" style=3D"font-size:=
12px;">$repository =3D $this-&gt;getContainer()-&gt;get( 'exponential.api.rep=
ository' );
$contentService =3D $repository-&gt;getContentService();
$contentTypeService =3D $repository-&gt;getContentTypeService();
$fieldTypeService =3D $repository-&gt;getFieldTypeService();</pre>=20
</div>
</div>
<p>This is the initialization part. As explained above, everything in the P=
ublic API goes through the repository via dedicated services. We get the re=
pository from the service container, using the method&nbsp;<code>get()</cod=
e>&nbsp;of our container, obtained via&nbsp;<code>$this-&gt;getContainer()<=
/code>. Using our <code>$repository</code> variable, we fetch the two servi=
ces we will need using&nbsp;<code>getContentService()</code>&nbsp;and&nbsp;=
<code>getFieldTypeService()</code>.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: true; first-line: 5; theme: Eclipse" styl=
e=3D"font-size:12px;">try
{
    // iterate over the field definitions of the content type and print out=
 each field's identifier and value
    $content =3D $contentService-&gt;loadContent( 66 );</pre>=20
</div>
</div>
<p>Everything starting from line 5 is about getting our Content and iterati=
ng over its Fields. You can see that the whole logic is part of a&nbsp;<cod=
e>try/catch</code>&nbsp;block. Since the Public API uses Exceptions for err=
or handling, this is strongly encouraged, as it will allow you to condition=
ally catch the various errors that may happen. We will cover the exceptions=
 we expect in a later paragraph.</p>
<p>The first thing we do is use the Content Service to load a Content item =
using its ID, 66:&nbsp;<code>$contentService-&gt;<a href=3D"http://apidoc.e=
z.no/sami/trunk/NS/html/eZ/Publish/API/Repository/ContentService.html#metho=
d_loadContent" class=3D"external-link" rel=3D"nofollow">loadContent</a> </c=
ode> <code>( 66 )</code>. As you can see on the API doc page, this method e=
xpects a Content ID, and returns a&nbsp;<a href=3D"http://apidoc.ez.no/sami=
/trunk/NS/html/eZ/Publish/API/Repository/Values/Content/Content.html" class=
=3D"external-link" rel=3D"nofollow">Content Value Object</a>.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: true; theme: Eclipse" style=3D"font-size:=
12px;">foreach( $contentType-&gt;fieldDefinitions as $fieldDefinition )
{
    // ignore ezpage
    if( $fieldDefinition-&gt;fieldTypeIdentifier =3D=3D 'ezpage' )
        continue;
    $output-&gt;write( $fieldDefinition-&gt;identifier . ": " );
    $fieldType =3D $fieldTypeService-&gt;getFieldType( $fieldDefinition-&gt=
;fieldTypeIdentifier );
    $fieldValue =3D $content-&gt;getFieldValue( $fieldDefinition-&gt;identi=
fier );
    $valueHash =3D $fieldType-&gt;toHash( $fieldValue );
    $output-&gt;writeln( $valueHash );
}</pre>=20
</div>
</div>
<p>This block is the one that actually displays the value.</p>
<p>It iterates over the Content item's Fields using the Content Type's Fiel=
dDefinitions (<code>$contentType-&gt;fieldDefinitions</code>).</p>
<p>For each Field Definition, we start by displaying its identifier (<code>=
$fieldDefinition-&gt;identifier</code>). We then get the Field Type instanc=
e using the Field Type Service (<code>$fieldTypeService-&gt;getFieldType( $=
fieldDefinition-&gt;fieldTypeIdentifier )</code>). This method expects the =
requested Field Type's identifier, as a string (ezstring, ezxmltext, etc.),=
 and returns an&nbsp;<code>eZ\Publish\API\Repository\FieldType</code>&nbsp;=
object.</p>
<p>The Field Value object is obtained using the&nbsp;<code>getFieldValue()<=
/code>&nbsp;method of the Content Value Object which we obtained using&nbsp=
;<code>ContentService::loadContent()</code>.</p>
<p>Using the Field Type object, we can convert the Field Value to a hash us=
ing the&nbsp;<code>toHash()</code>&nbsp;method, provided by every Field Typ=
e. This method returns a primitive type (string, hash) out of a Field insta=
nce.</p>
<p>With this example, you should get a first idea on how you interact with =
the API. Everything is done through services, each service being responsibl=
e for a specific part of the repository (Content, Field Type, etc.).</p>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<p class=3D"title">Loading Content in different languages</p>
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>Since we didn't specify any language code, our Field object is returned =
in the default language, depending on your language settings in <code>ezpla=
tform.yml</code>. If you want to use a non-default language, you can specif=
y a language code in the <code>getField()</code> call:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">$content-&gt;getFieldValue( $fieldDefinition-&gt;identifier, 'fre-F=
R' )</pre>=20
</div>
</div>
</div>
</div>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>Exceptions handling</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">catch ( \eZ\Publish\API\Repository\Exceptions\NotFoundException $e =
)
{
    $output-&gt;writeln( "&lt;error&gt;No content with id $contentId found&=
lt;/error&gt;" );
}
catch ( \eZ\Publish\API\Repository\Exceptions\UnauthorizedException $e )
{
    $output-&gt;writeln( "&lt;error&gt;Permission denied on content with id=
 $contentId&lt;/error&gt;" );
}</pre>=20
</div>
</div>
<p>As said earlier, the Public API uses&nbsp;<a href=3D"http://php.net/exce=
ptions" class=3D"external-link" rel=3D"nofollow">Exceptions</a>&nbsp;to han=
dle errors. Each method of the API may throw different exceptions, dependin=
g on what it does. Which exceptions can be thrown is usually documented for=
 each method. In our case,&nbsp;<code>loadContent()</code>&nbsp;may throw t=
wo types of exceptions:&nbsp;<code>NotFoundException</code>, if the request=
ed ID isn't found, and&nbsp;<code>UnauthorizedException</code>&nbsp;if the =
currently logged in user isn't allowed to view the requested content.</p>
<p>It is a good practice to cover each exception you expect to happen. In t=
his case, since our Command takes the Content ID as a parameter, this ID ma=
y either not exist, or the referenced Content item may not be visible to ou=
r user. Both cases are covered with explicit error messages.</p>
<h2 id=3D"id-2.Browsing,finding,viewing-TraversingaLocationsubtree">Travers=
ing a Location subtree</h2>
<p>This recipe will show how to traverse a Location's subtree. The full cod=
e implements a command that takes a Location ID as an argument and recursiv=
ely prints this location's subtree.</p>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<p class=3D"title">Full code</p>
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p><a href=3D"https://github.com/ezsystems/CookbookBundle/blob/master/Comma=
nd/BrowseLocationsCommand.php" class=3D"external-link" rel=3D"nofollow">htt=
ps://github.com/ezsystems/CookbookBundle/blob/master/Command/BrowseLocation=
sCommand.php</a></p>
</div>
</div>
<p>In this code, we introduce the <a href=3D"http://apidoc.ez.no/sami/trunk=
/NS/html/eZ/Publish/API/Repository/LocationService.html" class=3D"external-=
link" rel=3D"nofollow">LocationService</a>. This service is used to interac=
t with Locations. We use two methods from this service: <a href=3D"http://a=
pidoc.ez.no/sami/trunk/NS/html/eZ/Publish/API/Repository/LocationService.ht=
ml#method_loadLocation" class=3D"external-link" rel=3D"nofollow"> <code>loa=
dLocation()</code> </a>, and <code> <a href=3D"http://apidoc.ez.no/sami/tru=
nk/NS/html/eZ/Publish/API/Repository/LocationService.html#method_loadLocati=
onChildren" class=3D"external-link" rel=3D"nofollow">loadLocationChildren()=
</a> </code>.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>Loading a Location</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">try
{
    // load the starting location and browse
    $location =3D $this-&gt;locationService-&gt;loadLocation( $locationId )=
;
    $this-&gt;browseLocation( $location, $output );
}
catch ( \eZ\Publish\API\Repository\Exceptions\NotFoundException $e )
{
    $output-&gt;writeln( "&lt;error&gt;No location found with id $locationI=
d&lt;/error&gt;" );
}
catch( \eZ\Publish\API\Repository\Exceptions\UnauthorizedException $e )
{
    $output-&gt;writeln( "&lt;error&gt;Current users are not allowed to rea=
d location with id $locationId&lt;/error&gt;" );
}</pre>=20
</div>
</div>
<p>As for the ContentService, <code>loadLocation()</code> returns a Value O=
bject, here a <code> <a href=3D"http://apidoc.ez.no/sami/trunk/NS/html/eZ/P=
ublish/API/Repository/Values/Content/Location.html" class=3D"external-link"=
 rel=3D"nofollow">Location</a> </code>. Errors are handled with exceptions:=
 <code> <a href=3D"http://apidoc.ez.no/sami/trunk/NS/html/eZ/Publish/API/Re=
pository/Exceptions/NotFoundException.html" class=3D"external-link" rel=3D"=
nofollow">NotFoundException</a> </code> if the Location ID couldn't be foun=
d, and&nbsp;<code> <a href=3D"http://apidoc.ez.no/sami/trunk/NS/html/eZ/Pub=
lish/API/Repository/Exceptions/UnauthorizedException.html" class=3D"externa=
l-link" rel=3D"nofollow">UnauthorizedException</a> </code> if the current r=
epository user isn't allowed to view this Location.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>Iterating over a Location's children</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">private function browseLocation( Location $location, OutputInterfac=
e $output, $depth =3D 0 )
{
    $childLocationList =3D $this-&gt;locationService-&gt;loadLocationChildr=
en( $location, $offset =3D 0, $limit =3D -1 );
    // If offset and limit had been specified to something else then "all",=
 then $childLocationList-&gt;totalCount contains the total count for iterat=
ion use
    foreach ( $childLocationList-&gt;locations as $childLocation )
    {
        $this-&gt;browseLocation( $childLocation, $output, $depth + 1 );
    }
}</pre>=20
</div>
</div>
<p><code>LocationService::loadLocationChildren()</code>&nbsp;returns a&nbsp=
;<a href=3D"https://github.com/ezsystems/exponential-kernel/blob/master/eZ/Pu=
blish/API/Repository/Values/Content/LocationList.php" class=3D"external-lin=
k" rel=3D"nofollow">LocationList</a>&nbsp;Value Objects that we can iterate=
 over.</p>
<p>Note that unlike <code>loadLocation()</code>, we don't need to care for =
permissions here: the currently logged-in user's permissions will be respec=
ted when loading children, and Locations that can't be viewed won't be retu=
rned at all.</p>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<p class=3D"title">Full code</p>
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>Should you need more advanced children fetching methods, the&nbsp;<code>=
 <a href=3D"http://apidoc.ez.no/sami/trunk/NS/html/eZ/Publish/API/Repositor=
y/SearchService.html" class=3D"external-link" rel=3D"nofollow">SearchServic=
e</a> </code>&nbsp;is what you are looking for.</p>
</div>
</div>
<h2 id=3D"id-2.Browsing,finding,viewing-ViewingContentMetadata">Viewing Con=
tent Metadata</h2>
<p>Content is a central piece in the Public API. You will often need to sta=
rt from a Content item, and dig in from its metadata. Basic content metadat=
a is made available through <code> <a href=3D"http://apidoc.ez.no/sami/trun=
k/NS/html/eZ/Publish/API/Repository/Values/Content/ContentInfo.html" class=
=3D"external-link" rel=3D"nofollow">ContentInfo</a> </code> objects.&nbsp;T=
his Value Object mostly provides primitive fields: <code>contentTypeId</cod=
e>, <code>publishedDate</code> or <code>mainLocationId</code>. But it is al=
so used to request further Content-related Value Objects from various servi=
ces.</p>
<p>The full example implements an <code>exponential:cookbook:view_content_met=
adata</code> command that prints out all the available metadata, given a Co=
ntent ID.</p>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<p class=3D"title">Full code</p>
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p><a href=3D"https://github.com/ezsystems/CookbookBundle/blob/master/Comma=
nd/ViewContentMetaDataCommand.php" class=3D"external-link" rel=3D"nofollow"=
>https://github.com/ezsystems/CookbookBundle/blob/master/Command/ViewConten=
tMetaDataCommand.php</a></p>
</div>
</div>
<p>We introduce here several new services: <a href=3D"http://apidoc.ez.no/s=
ami/trunk/NS/html/eZ/Publish/API/Repository/URLAliasService.html" class=3D"=
external-link" rel=3D"nofollow"> <code>URLAliasService</code> </a>, <a href=
=3D"http://apidoc.ez.no/sami/trunk/NS/html/eZ/Publish/API/Repository/UserSe=
rvice.html" class=3D"external-link" rel=3D"nofollow"> <code>UserService</co=
de> </a> and <a href=3D"http://apidoc.ez.no/sami/trunk/NS/html/eZ/Publish/A=
PI/Repository/SectionService.html" class=3D"external-link" rel=3D"nofollow"=
> <code>SectionService</code> </a>. The concept should be familiar to you n=
ow.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>Services initialization</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">/** @var $repository \eZ\Publish\API\Repository\Repository */
$repository =3D $this-&gt;getContainer()-&gt;get( 'exponential.api.repository=
' );
$contentService =3D $repository-&gt;getContentService();
$locationService =3D $repository-&gt;getLocationService();
$urlAliasService =3D $repository-&gt;getURLAliasService();
$sectionService =3D $repository-&gt;getSectionService();
$userService =3D $repository-&gt;getUserService();</pre>=20
</div>
</div>
<h3 id=3D"id-2.Browsing,finding,viewing-SettingtheRepositoryUser">Setting t=
he Repository User</h3>
<div class=3D"confluence-information-macro confluence-information-macro-tip=
">
<span class=3D"aui-icon aui-icon-small aui-iconfont-approve confluence-info=
rmation-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>In a command line script, the repository runs as if executed by the anon=
ymous user. In order to identify it as a different user, you need to use th=
e <code> <a href=3D"http://apidoc.ez.no/sami/trunk/NS/html/eZ/Publish/API/R=
epository/UserService.html" class=3D"external-link" rel=3D"nofollow">UserSe=
rvice</a> </code> as follows:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">$administratorUser =3D $userService-&gt;loadUser( 14 );
$repository-&gt;setCurrentUser( $administratorUser );</pre>=20
</div>
</div>
<p>This may be crucial when writing maintenance or synchronization scripts.=
</p>
<p>This is of course not required in template functions or controller code,=
 as the HTTP layer will take care of identifying the user, and automaticall=
y set it in the repository.</p>
</div>
</div>
<h3 id=3D"id-2.Browsing,finding,viewing-TheContentInfoValueObject">The Cont=
entInfo Value Object</h3>
<p>We will now load a <code>ContentInfo</code> object using the provided ID=
 and use it to get our Content item's metadata</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">$contentInfo =3D $contentService-&gt;loadContentInfo( $contentId );=
</pre>=20
</div>
</div>
<h3 id=3D"id-2.Browsing,finding,viewing-Locations">Locations</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>Getting Content Locations</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">// show all locations of the content
$locations =3D $locationService-&gt;loadLocations( $contentInfo );
$output-&gt;writeln( "&lt;info&gt;LOCATIONS&lt;/info&gt;" );
foreach ( $locations as $location )
{
    $urlAlias =3D $urlAliasService-&gt;reverseLookup( $location );
    $output-&gt;writeln( "  $location-&gt;pathString  ($urlAlias-&gt;path)"=
 );
}</pre>=20
</div>
</div>
<p>We first use&nbsp;<code> <a href=3D"http://apidoc.ez.no/sami/trunk/NS/ht=
ml/eZ/Publish/API/Repository/LocationService.html" class=3D"external-link" =
rel=3D"nofollow">LocationService</a> <a href=3D"http://apidoc.ez.no/sami/tr=
unk/NS/html/eZ/Publish/API/Repository/LocationService.html#method_loadLocat=
ions" class=3D"external-link" rel=3D"nofollow">::loadLocations</a>()</code>=
 to <strong>get</strong> the <strong>Locations</strong> for our <code>Conte=
ntInfo</code>. This method returns an array of <a href=3D"http://apidoc.ez.=
no/sami/trunk/NS/html/eZ/Publish/API/Repository/Values/Content/Location.htm=
l" class=3D"external-link" rel=3D"nofollow"> <code>Location</code> </a> Val=
ue Objects. In this example, we print out the Location's path string (/path=
/to/content). We also use <a href=3D"http://apidoc.ez.no/sami/trunk/NS/html=
/eZ/Publish/API/Repository/URLAliasService.html#method_reverseLookup" class=
=3D"external-link" rel=3D"nofollow">URLAliasService::reverseLookup()</a> to=
 get the Location's main <a href=3D"http://apidoc.ez.no/sami/trunk/NS/html/=
eZ/Publish/API/Repository/Values/Content/URLAlias.html" class=3D"external-l=
ink" rel=3D"nofollow">URLAlias</a>.</p>
<p>&nbsp;</p>
<h3 id=3D"id-2.Browsing,finding,viewing-Relations">Relations</h3>
<p>We now want to list relations from and to our Content. Since relations a=
re versioned, we need to feed the <a href=3D"http://apidoc.ez.no/sami/trunk=
/NS/html/eZ/Publish/API/Repository/ContentService.html#method_loadRelations=
" class=3D"external-link" rel=3D"nofollow"> <code>ContentService::loadRelat=
ions()</code> </a> with a <code> <a href=3D"http://apidoc.ez.no/sami/trunk/=
NS/html/eZ/Publish/API/Repository/Values/Content/VersionInfo.html" class=3D=
"external-link" rel=3D"nofollow">VersionInfo</a> </code> object. We can get=
 the current version's&nbsp;<code>VersionInfo</code>&nbsp;using&nbsp;<a hre=
f=3D"http://apidoc.ez.no/sami/trunk/NS/html/eZ/Publish/API/Repository/Conte=
ntService.html#method_loadVersionInfo" class=3D"external-link" rel=3D"nofol=
low"> <code>ContentService::loadVersionInfo()</code> </a>. If we had been l=
ooking for an archived version, we could have specified the version number =
as the second argument to this method.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>Browsing a Content's relations</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">// show all relations of the current version
$versionInfo =3D $contentService-&gt;loadVersionInfo( $contentInfo );
$relations =3D $contentService-&gt;loadRelations( $versionInfo );
if ( count( $relations ) )
{
    $output-&gt;writeln( "&lt;info&gt;RELATIONS&lt;/info&gt;" );
    foreach ( $relations as $relation )
    {
        $name =3D $relation-&gt;destinationContentInfo-&gt;name;
        $output-&gt;write( "  Relation of type " . $this-&gt;outputRelation=
Type( $relation-&gt;type ) . " to content $name" );
    }
}</pre>=20
</div>
</div>
<p>We can iterate over the <a href=3D"http://apidoc.ez.no/sami/trunk/NS/htm=
l/eZ/Publish/API/Repository/Values/Content/Relation.html" class=3D"external=
-link" rel=3D"nofollow">Relation</a> objects array we got from <code>loadRe=
lations()</code>, and use these Value Objects to get data about our relatio=
ns. It has two main properties: <code>destinationContentInfo</code>, and <c=
ode>sourceContentInfo</code>. They also hold the relation type (embed, comm=
on, etc.), and the optional Field this relations is made with.</p>
<h3 id=3D"id-2.Browsing,finding,viewing-ContentInfoproperties">ContentInfo =
properties</h3>
<p>We can of course get our Content item's metadata by using the Value Obje=
ct's properties.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>Primitive object metadata</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">// show meta data
$output-&gt;writeln( "\n&lt;info&gt;METADATA&lt;/info&gt;" );
$output-&gt;writeln( "  &lt;info&gt;Name:&lt;/info&gt; " . $contentInfo-&gt=
;name );
$output-&gt;writeln( "  &lt;info&gt;Type:&lt;/info&gt; " . $contentType-&gt=
;identifier );
$output-&gt;writeln( "  &lt;info&gt;Last modified:&lt;/info&gt; " . $conten=
tInfo-&gt;modificationDate-&gt;format( 'Y-m-d' ) );
$output-&gt;writeln( "  &lt;info&gt;Published:&lt;/info&gt; ". $contentInfo=
-&gt;publishedDate-&gt;format( 'Y-m-d' ) );
$output-&gt;writeln( "  &lt;info&gt;RemoteId:&lt;/info&gt; $contentInfo-&gt=
;remoteId" );
$output-&gt;writeln( "  &lt;info&gt;Main Language:&lt;/info&gt; $contentInf=
o-&gt;mainLanguageCode" );
$output-&gt;writeln( "  &lt;info&gt;Always available:&lt;/info&gt; " . ( $c=
ontentInfo-&gt;alwaysAvailable ? 'Yes' : 'No' ) );</pre>=20
</div>
</div>
<h3 id=3D"id-2.Browsing,finding,viewing-Owninguser">Owning user</h3>
<p>We can use <a href=3D"http://apidoc.ez.no/sami/trunk/NS/html/eZ/Publish/=
API/Repository/UserService.html#method_loadUser" class=3D"external-link" re=
l=3D"nofollow"> <code>UserService::loadUser()</code> </a> with Content <cod=
e>ownerId</code> property of our <code>ContentInfo</code> to load the Conte=
nt's owner as a <code> <a href=3D"http://apidoc.ez.no/sami/trunk/NS/html/eZ=
/Publish/API/Repository/Values/User/User.html" class=3D"external-link" rel=
=3D"nofollow">User</a> </code> Value Object.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">$owner =3D $userService-&gt;loadUser( $contentInfo-&gt;ownerId );
$output-&gt;writeln( "  &lt;info&gt;Owner:&lt;/info&gt; " . $owner-&gt;cont=
entInfo-&gt;name );</pre>=20
</div>
</div>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>To get the current version's creator, and not the content's owner, you n=
eed to use the <code>creatorId</code> property from the current version's <=
code>VersionInfo</code> object.</p>
</div>
</div>
<h3 id=3D"id-2.Browsing,finding,viewing-Section">Section</h3>
<p>The Section's ID can be found in the <code>sectionId</code> property of =
the <code>ContentInfo</code> object. To get the matching Section Value Obje=
ct, you need to use the <code>SectionService::loadSection()</code> method.<=
/p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">$section =3D $sectionService-&gt;loadSection( $contentInfo-&gt;sect=
ionId );
$output-&gt;writeln( "  &lt;info&gt;Section:&lt;/info&gt; $section-&gt;name=
" );</pre>=20
</div>
</div>
<h3 id=3D"id-2.Browsing,finding,viewing-Versions">Versions</h3>
<p>To conclude we can also iterate over the Content's version, as <code> <a=
 href=3D"http://apidoc.ez.no/sami/trunk/NS/html/eZ/Publish/API/Repository/V=
alues/Content/VersionInfo.html" class=3D"external-link" rel=3D"nofollow">Ve=
rsionInfo</a> </code> Value Objects.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">$versionInfoArray =3D $contentService-&gt;loadVersions( $contentInf=
o );
if ( count( $versionInfoArray ) )
{
    $output-&gt;writeln( "\n&lt;info&gt;VERSIONS&lt;/info&gt;" );
    foreach ( $versionInfoArray as $versionInfo )
    {
        $creator =3D $userService-&gt;loadUser( $versionInfo-&gt;creatorId =
);
        $output-&gt;write( "  Version $versionInfo-&gt;versionNo " );
        $output-&gt;write( " by " . $creator-&gt;contentInfo-&gt;name );
        $output-&gt;writeln( " " . $this-&gt;outputStatus( $versionInfo-&gt=
;status ) . " " . $versionInfo-&gt;initialLanguageCode );
    }
}</pre>=20
</div>
</div>
<p>We use the <code> <a href=3D"http://apidoc.ez.no/sami/trunk/NS/html/eZ/P=
ublish/API/Repository/ContentService.html#method_loadVersions" class=3D"ext=
ernal-link" rel=3D"nofollow">ContentService::loadVersions()</a> </code> met=
hod and get an array of <code>VersionInfo</code> objects.</p>
<h2 id=3D"id-2.Browsing,finding,viewing-Search">Search</h2>
<p>In this section we will cover how the&nbsp;<a href=3D"http://apidoc.ez.n=
o/sami/trunk/NS/html/eZ/Publish/API/Repository/SearchService.html" class=3D=
"external-link" rel=3D"nofollow"> <code>SearchService</code> </a>&nbsp;can =
be used to search for Content, by using a <a href=3D"http://apidoc.ez.no/sa=
mi/trunk/NS/html/eZ/Publish/API/Repository/Values/Content/Query.html" class=
=3D"external-link" rel=3D"nofollow"> <code>Query</code> </a>&nbsp;and a com=
binations of <a href=3D"http://apidoc.ez.no/sami/trunk/NS/html/eZ/Publish/A=
PI/Repository/Values/Content/Query/Criterion.html" class=3D"external-link" =
rel=3D"nofollow"> <code>Criteria</code> </a> you will get a&nbsp;<a href=3D=
"http://apidoc.ez.no/sami/trunk/NS/html/eZ/Publish/API/Repository/Values/Co=
ntent/Search/SearchResult.html" class=3D"external-link" rel=3D"nofollow"> <=
code>SearchResult</code> </a>&nbsp;object back containing list of Content a=
nd count of total hits. In the future this object will also include facets,=
 spell checking and "more like this" when running on a backend that support=
s it (for instance Solr).</p>
<h3 id=3D"id-2.Browsing,finding,viewing-Performingasimplefulltextsearch">Pe=
rforming a simple full text search</h3>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<p class=3D"title">Full code</p>
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p><a href=3D"https://github.com/ezsystems/CookbookBundle/blob/master/Comma=
nd/FindContentCommand.php" class=3D"external-link" rel=3D"nofollow">https:/=
/github.com/ezsystems/CookbookBundle/blob/master/Command/FindContentCommand=
.php</a></p>
</div>
</div>
<p>In this recipe, we will run a simple full text search over every compati=
ble attribute.</p>
<h4 id=3D"id-2.Browsing,finding,viewing-QueryandCriterionobjects">Query and=
 Criterion objects</h4>
<p>We introduce here a new object:&nbsp;<code>Query</code>. It is used to b=
uild up a Content query based on a set of <code>Criterion</code> objects.</=
p>
<p>&nbsp;</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">$query =3D new \eZ\Publish\API\Repository\Values\Content\Query();
$query-&gt;filter =3D new Query\Criterion\FullText( $text );</pre>=20
</div>
</div>
<p>&nbsp;</p>
<p>Multiple criteria can be grouped together using "logical criteria", such=
 as <a href=3D"http://apidoc.ez.no/sami/trunk/NS/html/eZ/Publish/API/Reposi=
tory/Values/Content/Query/Criterion/LogicalAnd.html" class=3D"external-link=
" rel=3D"nofollow">LogicalAnd</a> or <a href=3D"http://apidoc.ez.no/sami/tr=
unk/NS/html/eZ/Publish/API/Repository/Values/Content/Query/Criterion/Logica=
lOr.html" class=3D"external-link" rel=3D"nofollow">LogicalOr</a>. Since in =
this case we only want to run a text search, we simply use a <a href=3D"htt=
p://apidoc.ez.no/sami/trunk/NS/html/eZ/Publish/API/Repository/Values/Conten=
t/Query/Criterion/FullText.html" class=3D"external-link" rel=3D"nofollow"> =
<code>FullText</code> </a> criterion object.</p>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>The full list of criteria can be found on your installation in the follo=
wing directory&nbsp;<a href=3D"https://github.com/ezsystems/exponential-kerne=
l/tree/master/eZ/Publish/API/Repository/Values/Content/Query/Criterion" cla=
ss=3D"external-link" rel=3D"nofollow">vendor/ezsystems/exponential-kernel/eZ/=
Publish/API/Repository/Values/Content/Query/Criterion</a>. Additionally you=
 may look at integration tests like <a href=3D"https://github.com/ezsystems=
/exponential-kernel/blob/master/eZ/Publish/API/Repository/Tests/SearchService=
Test.php" class=3D"external-link" rel=3D"nofollow">vendor/ezsystems/ezpubli=
sh-kernel/eZ/Publish/API/Repository/Tests/SearchServiceTest.php</a> for mor=
e details on how these are used.</p>
</div>
</div>
<p>&nbsp;</p>
<h4 id=3D"id-2.Browsing,finding,viewing-Runningthesearchqueryandusingtheres=
ults">Running the search query and using the results</h4>
<p>The <code>Query</code> object is given as an argument to <a href=3D"http=
://apidoc.ez.no/sami/trunk/NS/html/eZ/Publish/API/Repository/SearchService.=
html#method_findContent" class=3D"external-link" rel=3D"nofollow"> <code>Se=
archService::findContent()</code> </a>. This method returns a <code>SearchR=
esult</code> object. This object provides you with various information abou=
t the search operation (number of results, time taken, spelling suggestions=
, or facets, as well as, of course, the results themselves.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">$result =3D $searchService-&gt;findContent( $query );
$output-&gt;writeln( 'Found ' . $result-&gt;totalCount . ' items' );
foreach ( $result-&gt;searchHits as $searchHit )
{
    $output-&gt;writeln( $searchHit-&gt;valueObject-&gt;contentInfo-&gt;nam=
e );
}</pre>=20
</div>
</div>
<p>The <code>searchHits</code> properties of the <code>SearchResult</code> =
object is an array of <code>SearchHit</code> objects. In <code>valueObject<=
/code> property of <code>SearchHit</code>, you will find the&nbsp;<code>Con=
tent</code>&nbsp;object that matches the given <code>Query</code>.</p>
<div class=3D"confluence-information-macro confluence-information-macro-tip=
">
<p class=3D"title">Tip</p>
<span class=3D"aui-icon aui-icon-small aui-iconfont-approve confluence-info=
rmation-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>&nbsp;If you you are searching using a unique identifier, for instance u=
sing the Content ID or Content&nbsp;remote ID criterion, then you can use&n=
bsp;<a href=3D"http://apidoc.ez.no/sami/trunk/NS/html/eZ/Publish/API/Reposi=
tory/SearchService.html#method_findSingle" class=3D"external-link" rel=3D"n=
ofollow"> <code>SearchService::findSingle()</code> </a>, this takes a Crite=
rion and returns a single Content item, or throws a <code>NotFound</code> e=
xception if none is found.</p>
</div>
</div>
<p>&nbsp;</p>
<h3 id=3D"id-2.Browsing,finding,viewing-Performinganadvancedsearch">Perform=
ing an advanced search</h3>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<p class=3D"title">Full code</p>
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p><a href=3D"https://github.com/ezsystems/CookbookBundle/blob/master/Comma=
nd/FindContent2Command.php" class=3D"external-link" rel=3D"nofollow">https:=
//github.com/ezsystems/CookbookBundle/blob/master/Command/FindContent2Comma=
nd.php</a></p>
</div>
</div>
<p>As explained in the previous chapter, Criterion objects are grouped toge=
ther using logical criteria. We will now see how multiple criteria objects =
can be combined into a fine grained search <code>Query</code>.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">use eZ\Publish\API\Repository\Values\Content\Query\Criterion;
use eZ\Publish\API\Repository\Values\Content;
&nbsp;
// [...]
&nbsp;
$query =3D new Query();
$criterion1 =3D new Criterion\Subtree( $locationService-&gt;loadLocation( 2=
 )-&gt;pathString );
$criterion2 =3D new Criterion\ContentTypeIdentifier( 'folder' );
$query-&gt;criterion =3D new Criterion\LogicalAnd(
    array( $criterion1, $criterion2 )
);
&nbsp;
$result =3D $searchService-&gt;findContent( $query );</pre>=20
</div>
</div>
<p>A <a href=3D"http://apidoc.ez.no/sami/trunk/NS/html/eZ/Publish/API/Repos=
itory/Values/Content/Query/Criterion/Subtree.html" class=3D"external-link" =
rel=3D"nofollow"> <code>Subtree</code> </a> criterion limits the search to =
the subtree with pathString, which looks like:&nbsp;<code>/1/2/</code>. A <=
a href=3D"http://apidoc.ez.no/sami/trunk/NS/html/eZ/Publish/API/Repository/=
Values/Content/Query/Criterion/ContentTypeId.html" class=3D"external-link" =
rel=3D"nofollow"> <code>ContentTypeId</code> </a> Criterion to limit the se=
arch to Content of Content Type 1. Those two criteria are grouped with a <c=
ode>LogicalAnd</code> operator. The query is executed as before, with <code=
>SearchService::findContent()</code>.</p>
<h3 id=3D"id-2.Browsing,finding,viewing-Performingafetchlikesearch">Perform=
ing a fetch like search</h3>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<p class=3D"title">Full code</p>
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p><a href=3D"https://github.com/ezsystems/CookbookBundle/blob/master/Comma=
nd/FindContent3Command.php" class=3D"external-link" rel=3D"nofollow">https:=
//github.com/ezsystems/CookbookBundle/blob/master/Command/FindContent3Comma=
nd.php</a></p>
</div>
</div>
<p>A search isn't only meant for searching, it also provides the future int=
erface for what you in Exponential 4.x would know as a content "fetch". And =
as this is totally&nbsp;backend agnostic, in future versions this will be p=
owered by either Solr or ElasticSearch meaning it also replaces&nbsp;"ezfin=
d" fetch functions.</p>
<p>Following the examples above we now change it a bit to combine several c=
riteria with both an AND and an OR condition.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">use eZ\Publish\API\Repository\Values\Content\Query\Criterion;
use eZ\Publish\API\Repository\Values\Content;
&nbsp;
// [...]
&nbsp;
$query =3D new Query();
$query-&gt;criterion =3D new Criterion\LogicalAnd(
    array(
        new Criterion\ParentLocationId( 2 ),
        new Criterion\LogicalOr(
            array(
                new Criterion\ContentTypeIdentifier( 'folder' ),
                new Criterion\ContentTypeId( 2 )
            )
        )
    )
);
&nbsp;
$result =3D $searchService-&gt;findContent( $query );</pre>=20
</div>
</div>
<p>A&nbsp;<code> <a href=3D"http://apidoc.ez.no/sami/trunk/NS/html/eZ/Publi=
sh/API/Repository/Values/Content/Query/Criterion/ParentLocationId.html" cla=
ss=3D"external-link" rel=3D"nofollow">ParentLocationId</a> </code>&nbsp;cri=
terion limits the search to the children of location 2. An array of "<code>=
ContentTypeId"</code>&nbsp;Criteria to limit the search to Content of Conte=
ntType's with id 1 or 2 grouped in a&nbsp;<code>LogicalOr</code>&nbsp;opera=
tor. Those two criteria are grouped with a&nbsp;<code>LogicalAnd</code>&nbs=
p;operator. As always the query is executed as before, with&nbsp;<code>Sear=
chService::findContent()</code>.</p>
<div class=3D"confluence-information-macro confluence-information-macro-tip=
">
<span class=3D"aui-icon aui-icon-small aui-iconfont-approve confluence-info=
rmation-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>Want to do a subtree filter?&nbsp;Change the location filter to use the =
Subtree criterion filter as shown in the advanced search example above.</p>
</div>
</div>
<p>&nbsp;</p>
<h4 id=3D"id-2.Browsing,finding,viewing-Usingin()insteadofOR">Using in() in=
stead of OR</h4>
<p>The above example is fine, but it can be optimized a bit by taking advan=
tage of the fact that all filter criteria support being given an array of v=
alues (IN operator) instead of a single value (EQ operator).</p>
<p>You can also use the <a href=3D"http://apidoc.ez.no/sami/trunk/NS/html/e=
Z/Publish/API/Repository/Values/Content/Query/Criterion/ContentTypeIdentifi=
er.html" class=3D"external-link" rel=3D"nofollow"> <code>ContentTypeIdentif=
ier</code> </a>&nbsp;Criterion:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">use eZ\Publish\API\Repository\Values\Content\Query\Criterion;
use eZ\Publish\API\Repository\Values\Content;
&nbsp;
// [...]
&nbsp;
$query =3D new Query();
$query-&gt;criterion =3D new Criterion\LogicalAnd(
    array(
        new Criterion\ParentLocationId( 2 ),
        new Criterion\ContentTypeIdentifier( array( 'article', 'folder' ) )
    )
);
&nbsp;
$result =3D $searchService-&gt;findContent( $query );</pre>=20
</div>
</div>
<div class=3D"confluence-information-macro confluence-information-macro-tip=
">
<p class=3D"title">Tip</p>
<span class=3D"aui-icon aui-icon-small aui-iconfont-approve confluence-info=
rmation-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>All filter criteria are capable of doing an "IN" selection, the&nbsp;Par=
entLocationId<span>&nbsp;above could, for example, have been provided "arra=
y( 2, 43 )" to include second level children in both your content tree (2) =
and your media tree (43).</span></p>
</div>
</div>
<p>&nbsp;</p>
<h3 id=3D"id-2.Browsing,finding,viewing-Performingapuresearchcount">Perform=
ing a pure search count</h3>
<p>In many cases you might need the number of Content items matching a sear=
ch, but with no need to do anything else with the results.</p>
<p>Thanks to the fact that the " searchHits " property of the <a href=3D"ht=
tp://apidoc.ez.no/sami/trunk/NS/html/eZ/Publish/API/Repository/Values/Conte=
nt/Search/SearchResult.html" class=3D"external-link" rel=3D"nofollow"> <cod=
e>SearchResult</code> </a> object always refers to the total&nbsp;amount, i=
t is enough to run a standard search and set $limit to 0. This way no resul=
ts will be retrieved, and the search will not be slowed down, even when the=
 number of matching results is huge.</p>
<p>&nbsp;</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">use eZ\Publish\API\Repository\Values\Content\Query;
&nbsp;
// [...]
&nbsp;
$query =3D new Query();
$query-&gt;limit =3D 0;
&nbsp;
// [...] ( Add criteria as shown above )
&nbsp;
$resultCount =3D $searchService-&gt;findContent( $query )-&gt;totalCount;</=
pre>=20
</div>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
    </div>
</body>
</html>
------=_Part_3021_1746430577.1485851663278--
