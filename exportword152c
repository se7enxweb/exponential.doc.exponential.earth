Message-ID: <536843366.4000.1485856255581.JavaMail.confluence@ip-10-127-227-164>
Subject: Exported From Confluence
MIME-Version: 1.0
Content-Type: multipart/related; 
	boundary="----=_Part_3999_1937438387.1485856255581"

------=_Part_3999_1937438387.1485856255581
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Content-Location: file:///C:/exported.html

<html xmlns:o=3D'urn:schemas-microsoft-com:office:office'
      xmlns:w=3D'urn:schemas-microsoft-com:office:word'
      xmlns:v=3D'urn:schemas-microsoft-com:vml'
      xmlns=3D'urn:w3-org-ns:HTML'>
<head>
    <meta http-equiv=3D"Content-Type" content=3D"text/html; charset=3Dutf-8=
">
    <title>Purge</title>
    <!--[if gte mso 9]>
    <xml>
        <o:OfficeDocumentSettings>
            <o:TargetScreenSize>1024x640</o:TargetScreenSize>
            <o:PixelsPerInch>72</o:PixelsPerInch>
            <o:AllowPNG/>
        </o:OfficeDocumentSettings>
        <w:WordDocument>
            <w:View>Print</w:View>
            <w:Zoom>90</w:Zoom>
            <w:DoNotOptimizeForBrowser/>
        </w:WordDocument>
    </xml>
    <![endif]-->
    <style>
                <!--
        @page Section1 {
            size: 8.5in 11.0in;
            margin: 1.0in;
            mso-header-margin: .5in;
            mso-footer-margin: .5in;
            mso-paper-source: 0;
        }

        td {
            page-break-inside: avoid;
        }

        tr {
            page-break-after: avoid;
        }

        div.Section1 {
            page: Section1;
        }

        /* Confluence print stylesheet. Common to all themes for print medi=
a */
/* Full of !important until we improve batching for print CSS */

@media print {
    #main {
        padding-bottom: 1em !important; /* The default padding of 6em is to=
o much for printouts */
    }

    body {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        font-size: 10pt;
        line-height: 1.2;
    }

    body, #full-height-container, #main, #page, #content, .has-personal-sid=
ebar #content {
        background: #fff !important;
        color: #000 !important;
        border: 0 !important;
        width: 100% !important;
        height: auto !important;
        min-height: auto !important;
        margin: 0 !important;
        padding: 0 !important;
        display: block !important;
    }

    a, a:link, a:visited, a:focus, a:hover, a:active {
        color: #000;
    }

    #content h1,
    #content h2,
    #content h3,
    #content h4,
    #content h5,
    #content h6 {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        page-break-after: avoid;
    }

    pre {
        font-family: Monaco, "Courier New", monospace;
    }

    #header,
    .aui-header-inner,
    #navigation,
    #sidebar,
    .sidebar,
    #personal-info-sidebar,
    .ia-fixed-sidebar,
    .page-actions,
    .navmenu,
    .ajs-menu-bar,
    .noprint,
    .inline-control-link,
    .inline-control-link a,
    a.show-labels-editor,
    .global-comment-actions,
    .comment-actions,
    .quick-comment-container,
    #addcomment {
        display: none !important;
    }

    .comment .date::before {
        content: none !important; /* remove middot for print view */
    }

    h1.pagetitle img {
        height: auto;
        width: auto;
    }

    .print-only {
        display: block;
    }

    #footer {
        position: relative !important; /* CONF-17506 Place the footer at en=
d of the content */
        margin: 0;
        padding: 0;
        background: none;
        clear: both;
    }

    #poweredby {
        border-top: none;
        background: none;
    }

    #poweredby li.print-only {
        display: list-item;
        font-style: italic;
    }

    #poweredby li.noprint {
        display: none;
    }

    /* no width controls in print */
    .wiki-content .table-wrap,
    .wiki-content p,
    .panel .codeContent,
    .panel .codeContent pre,
    .image-wrap {
        overflow: visible !important;
    }

    /* TODO - should this work? */
    #children-section,
    #comments-section .comment,
    #comments-section .comment .comment-body,
    #comments-section .comment .comment-content,
    #comments-section .comment p {
        page-break-inside: avoid;
    }

    #page-children a {
        text-decoration: none;
    }

    /**
     hide twixies

     the specificity here is a hack because print styles
     are getting loaded before the base styles. */
    #comments-section.pageSection .section-header,
    #comments-section.pageSection .section-title,
    #children-section.pageSection .section-header,
    #children-section.pageSection .section-title,
    .children-show-hide {
        padding-left: 0;
        margin-left: 0;
    }

    .children-show-hide.icon {
        display: none;
    }

    /* personal sidebar */
    .has-personal-sidebar #content {
        margin-right: 0px;
    }

    .has-personal-sidebar #content .pageSection {
        margin-right: 0px;
    }
}
-->
    </style>
</head>
<body>
    <h1>Purge</h1>
    <div class=3D"Section1">
        <p style=3D"margin-left: 0.0px;">This page explains the content cac=
he purge <em>(aka invalidate)</em> mechanism used when publishing content f=
rom the UI or from a container-aware script, resulting in cache being inval=
idated either in the built-in Symfony Reverse Proxy, or on the much faster =
Varnish reverse proxy.</p>
<h2 id=3D"Purge-Overview">Overview</h2>
<p>As explained on the <a href=3D"/display/TECHDOC/HttpCache">HttpCache</a>=
&nbsp;page, eZ Platform returns content-related responses with an <code>X-L=
ocation-Id</code> header that are stored together by the configured HTTP ca=
che. This allows you to clear <em>(invalidate)</em> HTTP cache representing=
 specifically a given Content item.&nbsp;On publishing the content, a cache=
 purger is triggered with the Content ID in question, which in turn figures=
 out affected content Locations based on <a href=3D"/display/TECHDOC/Smart+=
HTTP+cache+clearing">Smart HTTP cache clearing</a> logic. The returned Loca=
tion IDs are sent for purge using the purge type explained further below.</=
p>
<h2 id=3D"Purge-Purgetypes">Purge types</h2>
<h3 id=3D"Purge-SymfonyProxy:Localpurgetype">Symfony Proxy: Local purge typ=
e</h3>
<p>By default, invalidation requests will be emulated and sent to the Symfo=
ny Proxy cache Store.&nbsp;Cache purge will thus be synchronous, meaning no=
 HTTP purge requests will be sent around when publishing.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>ezplatform.yml</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">exponential:
    http_cache:
        purge_type: local</pre>=20
</div>
</div>
<h3 id=3D"Purge-Varnish:HTTPpurgetype">Varnish: HTTP purge type</h3>
<p>With Varnish you can configure one or several servers that should be pur=
ged over HTTP. This purge type is asynchronous, and flushed by the end of S=
ymfony kernel-request/console cycle <em>(during terminate event)</em>.&nbsp=
;Settings for purge servers can be configured per site group or site access=
:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>ezplatform.yml</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">exponential:
    http_cache:
        purge_type: http

    system:
        my_siteacess:
            http_cache:
                purge_servers: ["http://varnish.server1/", "http://varnish.=
server2/", "http://varnish.server3/"]</pre>=20
</div>
</div>
<p>For further information on setting up Varnish, see&nbsp;<a href=3D"/disp=
lay/TECHDOC/Using+Varnish">Using Varnish</a>.</p>
<h2 id=3D"Purge-Purging">Purging</h2>
<p>While purging on content, updates are handled for you; on actions agains=
t the eZ Platform APIs, there are times you might have to purge manually.</=
p>
<h3 id=3D"Purge-Manualbycode">Manual by code</h3>
<p>Manual purging from code which takes&nbsp;<a href=3D"/display/TECHDOC/Sm=
art+HTTP+cache+clearing">Smart HttpCache clearing&nbsp;</a>logic into accou=
nt, this is using the service also used internally for cache clearing on co=
ntent updates:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">// Purging cache based on content id, this will trigger cache clear=
 of all locations found by Smart HttpCache clear
// typically self, parent, related, ..
$container-&gt;get('exponential.http_cache.purger')-&gt;purgeForContent(55);<=
/pre>=20
</div>
</div>
<h3 id=3D"Purge-ManuallybycommandwithSymfonyProxy"><span style=3D"color: rg=
b(0,98,147);">Manually by command with Symfony Proxy</span></h3>
<p>Symfony Proxy stores its cache in the Symfony cache directory, so a regu=
lar <code>cache:clear</code> commands will clear it:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: bash; gutter: false; theme: Eclipse" style=3D"font-siz=
e:12px;">php app/console --env=3Dprod cache:clear</pre>=20
</div>
</div>
<h3 id=3D"Purge-ManualbyHTTPBANrequestonVarnish">Manual by HTTP BAN request=
 on Varnish</h3>
<p>When using Varnish and in need to purge content directly, then the follo=
wing examples show how this is done internally by our&nbsp;<span style=3D"l=
ine-height: 1.42857;">FOSPurgeClient, and in turn </span>FOSHttpCache Varni=
sh proxy client:</p>
<p>For purging all:</p>
<pre><code>BAN / HTTP 1.1 <br>Host: localhost <br>X-Location-Id: .* </code>=
</pre>
<p>Or with given location ids <em>(here 123 and 234)</em>:<span style=3D"co=
lor: rgb(0,128,0);">&nbsp;</span></p>
<pre><code>BAN / HTTP 1.1 <br>Host: localhost <br>X-Location-Id: </code><sp=
an style=3D"color: rgb(0,128,0);">^(123|234</span><span style=3D"color: rgb=
(0,128,0);">)$</span></pre>
<p>&nbsp;</p>
<div class=3D"highlight" style=3D"margin-left: 0.0px;">
<pre>&nbsp;</pre>
</div>
    </div>
</body>
</html>
------=_Part_3999_1937438387.1485856255581--
