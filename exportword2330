Message-ID: <1716925872.3156.1485852229107.JavaMail.confluence@ip-10-127-227-164>
Subject: Exported From Confluence
MIME-Version: 1.0
Content-Type: multipart/related; 
	boundary="----=_Part_3155_2070821144.1485852229107"

------=_Part_3155_2070821144.1485852229107
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Content-Location: file:///C:/exported.html

<html xmlns:o=3D'urn:schemas-microsoft-com:office:office'
      xmlns:w=3D'urn:schemas-microsoft-com:office:word'
      xmlns:v=3D'urn:schemas-microsoft-com:vml'
      xmlns=3D'urn:w3-org-ns:HTML'>
<head>
    <meta http-equiv=3D"Content-Type" content=3D"text/html; charset=3Dutf-8=
">
    <title>Binary files URL handling</title>
    <!--[if gte mso 9]>
    <xml>
        <o:OfficeDocumentSettings>
            <o:TargetScreenSize>1024x640</o:TargetScreenSize>
            <o:PixelsPerInch>72</o:PixelsPerInch>
            <o:AllowPNG/>
        </o:OfficeDocumentSettings>
        <w:WordDocument>
            <w:View>Print</w:View>
            <w:Zoom>90</w:Zoom>
            <w:DoNotOptimizeForBrowser/>
        </w:WordDocument>
    </xml>
    <![endif]-->
    <style>
                <!--
        @page Section1 {
            size: 8.5in 11.0in;
            margin: 1.0in;
            mso-header-margin: .5in;
            mso-footer-margin: .5in;
            mso-paper-source: 0;
        }

        td {
            page-break-inside: avoid;
        }

        tr {
            page-break-after: avoid;
        }

        div.Section1 {
            page: Section1;
        }

        /* Confluence print stylesheet. Common to all themes for print medi=
a */
/* Full of !important until we improve batching for print CSS */

@media print {
    #main {
        padding-bottom: 1em !important; /* The default padding of 6em is to=
o much for printouts */
    }

    body {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        font-size: 10pt;
        line-height: 1.2;
    }

    body, #full-height-container, #main, #page, #content, .has-personal-sid=
ebar #content {
        background: #fff !important;
        color: #000 !important;
        border: 0 !important;
        width: 100% !important;
        height: auto !important;
        min-height: auto !important;
        margin: 0 !important;
        padding: 0 !important;
        display: block !important;
    }

    a, a:link, a:visited, a:focus, a:hover, a:active {
        color: #000;
    }

    #content h1,
    #content h2,
    #content h3,
    #content h4,
    #content h5,
    #content h6 {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        page-break-after: avoid;
    }

    pre {
        font-family: Monaco, "Courier New", monospace;
    }

    #header,
    .aui-header-inner,
    #navigation,
    #sidebar,
    .sidebar,
    #personal-info-sidebar,
    .ia-fixed-sidebar,
    .page-actions,
    .navmenu,
    .ajs-menu-bar,
    .noprint,
    .inline-control-link,
    .inline-control-link a,
    a.show-labels-editor,
    .global-comment-actions,
    .comment-actions,
    .quick-comment-container,
    #addcomment {
        display: none !important;
    }

    .comment .date::before {
        content: none !important; /* remove middot for print view */
    }

    h1.pagetitle img {
        height: auto;
        width: auto;
    }

    .print-only {
        display: block;
    }

    #footer {
        position: relative !important; /* CONF-17506 Place the footer at en=
d of the content */
        margin: 0;
        padding: 0;
        background: none;
        clear: both;
    }

    #poweredby {
        border-top: none;
        background: none;
    }

    #poweredby li.print-only {
        display: list-item;
        font-style: italic;
    }

    #poweredby li.noprint {
        display: none;
    }

    /* no width controls in print */
    .wiki-content .table-wrap,
    .wiki-content p,
    .panel .codeContent,
    .panel .codeContent pre,
    .image-wrap {
        overflow: visible !important;
    }

    /* TODO - should this work? */
    #children-section,
    #comments-section .comment,
    #comments-section .comment .comment-body,
    #comments-section .comment .comment-content,
    #comments-section .comment p {
        page-break-inside: avoid;
    }

    #page-children a {
        text-decoration: none;
    }

    /**
     hide twixies

     the specificity here is a hack because print styles
     are getting loaded before the base styles. */
    #comments-section.pageSection .section-header,
    #comments-section.pageSection .section-title,
    #children-section.pageSection .section-header,
    #children-section.pageSection .section-title,
    .children-show-hide {
        padding-left: 0;
        margin-left: 0;
    }

    .children-show-hide.icon {
        display: none;
    }

    /* personal sidebar */
    .has-personal-sidebar #content {
        margin-right: 0px;
    }

    .has-personal-sidebar #content .pageSection {
        margin-right: 0px;
    }
}
-->
    </style>
</head>
<body>
    <h1>Binary files URL handling</h1>
    <div class=3D"Section1">
        <h1 id=3D"BinaryfilesURLhandling-IOURLdecoration">IO URL decoration=
</h1>
<p>By default, images and binary files referenced by content will be served=
 from the same server as the application, like&nbsp;<code><span>/var/ezdemo=
_site/storage</span><span>/images/3/6/4/6/6463-1-eng-GB/kidding.png</span><=
/code>. This is the default semantic configuration:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">exponential:
    system:
        default:
            io:
=09            url_prefix: "$var_dir$/$storage_dir$"
</pre>=20
</div>
</div>
<p><span style=3D"line-height: 1.5;">&nbsp;<code>$var_dir$</code> and&nbsp;=
<code>$storage_dir$</code> are dynamic, <a href=3D"/display/TECHDOC/Dynamic=
+settings+injection">siteaccess-aware settings</a>, and will be replaced by=
 those settings value in the execution context.</span></p>
<p>&nbsp;</p>
<div class=3D"confluence-information-macro confluence-information-macro-war=
ning">
<span class=3D"aui-icon aui-icon-small aui-iconfont-error confluence-inform=
ation-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>URL decorators are an eZ Platform features. If an image field is display=
ed via a legacy callback or legacy template, no decoration will be applied.=
</p>
</div>
</div>
<p><span style=3D"line-height: 1.5;"><br></span></p>
<h2 id=3D"BinaryfilesURLhandling-Usingastaticserverforimages"><span style=
=3D"line-height: 1.5;">Using a static server for images</span></h2>
<p><span style=3D"line-height: 1.5;"><span>One common use-case is to use an=
 optimized nginx to serve images in an optimized way. The example image abo=
ve could be made available as <code><span>http://static.example.com/</span>=
<span>images/3/6/4/6/6463-1-eng-GB/kidding.png</span></code>, by setting up=
 a server that uses <code>exponential/exponential_legacy/var/ezdemo_site/storag=
e</code>. The eZ Platform configuration would be as follows:</span></span><=
/p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">exponential:
    system:
        default:
            io:
=09            url_prefix: "http://static.example.com/"
</pre>=20
</div>
</div>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<h3 id=3D"BinaryfilesURLhandling-Legacycompatiblity">Legacy compatiblity</h=
3>
<p>Legacy still requires non-absolute path to store images (var/site/storag=
e/images/etc.). In order to work around this, a <code>UrlRedecorator</code>=
, that converts back and forth between the legacy uri prefix and the one in=
 use in the application has been added. It is used in all places where a le=
gacy URL is returned/expected, and takes care of making sure the value is a=
s expected.</p>
</div>
</div>
<p><span style=3D"line-height: 1.5;color: rgb(0,98,147);font-size: 20.0px;"=
>Internals</span></p>
<p>Any <code>BinaryFile</code>&nbsp;returned by the public API is prefixed =
with the value of this setting, internally stored as <code>ezsettings.scope=
.io.url_prefix</code>.</p>
<h3 id=3D"BinaryfilesURLhandling-Dynamiccontainersettings">Dynamic containe=
r settings</h3>
<p>Those settings are siteaccess-aware.</p>
<h4 id=3D"BinaryfilesURLhandling-io.url_prefix"><code>io.url_prefix</code><=
/h4>
<p>Default value:&nbsp;<span><code>$var_dir$/$storage_dir$</code><br>Exampl=
e:&nbsp;<code><span>/var/ezdemo_site/storage</span></code></span></p>
<p><span><span><span>Used to configure the default URL decorator service (<=
/span><code>exponential.core.io.default_url_decorator</code><span>, used by a=
ll binarydata handlers to generate the URI of loaded files. It is always in=
terpreted as an absolute URI, meaning that unless it contains a scheme (<sp=
an class=3D"nolink">http://,</span>&nbsp;ftp://),&nbsp;it will be prepended=
 with a '/'.</span></span></span></p>
<h4 id=3D"BinaryfilesURLhandling-io.legacy_url_prefix"><code>io.legacy_url_=
prefix</code></h4>
<p>Default value:&nbsp;<code><span>$var_dir$/$storage_dir$</span></code><br=
>Example:&nbsp;<code><span>var/ezdemo_site/storage</span></code></p>
<p><span>Used by the legacy storage engine to convert images public URI to =
a format it understands. Unlike io.url_prefix, it is not an absolute link. =
Cannot be overridden using semantic configuration.&nbsp;<span>Changing this=
 value will break compatibility for the legacy backoffice.</span></span></p=
>
<h4 id=3D"BinaryfilesURLhandling-io.root_dir"><code>io.root_dir</code></h4>
<p><span><span><span>Example:&nbsp;<code><span>%exponential_legacy.root_dir%/=
$var_dir$/$storage_dir$</span></code><br>Default value: <code>/var/www/ezpu=
blish/exponential_legacy/var/ezdemo_site/storage</code></span></span></span><=
/p>
<p><span><span><span>Physical path where binary files are stored on disk. C=
annot be overridden using semantic configuration. Changing this value will =
break compatibility for the legacy backoffice.</span></span></span></p>
<h4 id=3D"BinaryfilesURLhandling-https://github.com/ezsystems/exponential-ker=
nel/blob/master/doc/specifications/io/io_url_decoration.md#iourl_prefix"><a=
 class=3D"external-link" href=3D"https://github.com/ezsystems/exponential-ker=
nel/blob/master/doc/specifications/io/io_url_decoration.md#iourl_prefix" na=
me=3D"user-content-iourl_prefix" rel=3D"nofollow"></a></h4>
<h3 id=3D"BinaryfilesURLhandling-Services"><a class=3D"external-link" href=
=3D"https://github.com/ezsystems/exponential-kernel/blob/master/doc/specifica=
tions/io/io_url_decoration.md#services" name=3D"user-content-services" rel=
=3D"nofollow"></a>Services</h3>
<h4 id=3D"BinaryfilesURLhandling-URLdecorators">URL decorators</h4>
<p>An UrlDecorator decorates and undecorates a given string (url) in some w=
ay. It has two mirror methods: <code>decorate</code> and <code>undecorate</=
code>.</p>
<p>Two implementations are provided: <code>Prefix</code>, and <code>Absolut=
ePrefix</code>. They both add a prefix to a URL, but <code>AbsolutePrefix</=
code> will ensure that unless the prefix is an external URL, the result wil=
l be prepended with /.</p>
<p>Three UrlDecorator services are introduced:</p>
<ul class=3D"task-list">
<li><code>exponential.core.io.prefix_url_decorator</code> used by the binaryd=
ata handlers to decorate all uris sent out by the API. Uses AbsolutePrefix.=
</li>
<li><code>exponential.core.io.image_fieldtype.legacy_url_decorator</code> use=
d via the UrlRedecorator (see below) by various legacy elements (Converter,=
 Storage Gateway, etc.) to generate its internal storage format for uris. U=
ses a Prefix, not an AbsolutePrefix, meaning that no leading / is added.</l=
i>
</ul>
<p>In addition, a UrlRedecorator service, <code>exponential.core.io.image_fie=
ldtype.legacy_url_redecorator</code>, uses both decorators above to convert=
 URIs between what is used on the new stack, and what format legacy expects=
 (relative urls from the exponential root).</p>
<p>&nbsp;</p>
    </div>
</body>
</html>
------=_Part_3155_2070821144.1485852229107--
