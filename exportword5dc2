Message-ID: <1977196622.2710.1485850473538.JavaMail.confluence@ip-10-127-227-164>
Subject: Exported From Confluence
MIME-Version: 1.0
Content-Type: multipart/related; 
	boundary="----=_Part_2709_1237558858.1485850473537"

------=_Part_2709_1237558858.1485850473537
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Content-Location: file:///C:/exported.html

<html xmlns:o=3D'urn:schemas-microsoft-com:office:office'
      xmlns:w=3D'urn:schemas-microsoft-com:office:word'
      xmlns:v=3D'urn:schemas-microsoft-com:vml'
      xmlns=3D'urn:w3-org-ns:HTML'>
<head>
    <meta http-equiv=3D"Content-Type" content=3D"text/html; charset=3Dutf-8=
">
    <title>Design</title>
    <!--[if gte mso 9]>
    <xml>
        <o:OfficeDocumentSettings>
            <o:TargetScreenSize>1024x640</o:TargetScreenSize>
            <o:PixelsPerInch>72</o:PixelsPerInch>
            <o:AllowPNG/>
        </o:OfficeDocumentSettings>
        <w:WordDocument>
            <w:View>Print</w:View>
            <w:Zoom>90</w:Zoom>
            <w:DoNotOptimizeForBrowser/>
        </w:WordDocument>
    </xml>
    <![endif]-->
    <style>
                <!--
        @page Section1 {
            size: 8.5in 11.0in;
            margin: 1.0in;
            mso-header-margin: .5in;
            mso-footer-margin: .5in;
            mso-paper-source: 0;
        }

        td {
            page-break-inside: avoid;
        }

        tr {
            page-break-after: avoid;
        }

        div.Section1 {
            page: Section1;
        }

        /* Confluence print stylesheet. Common to all themes for print medi=
a */
/* Full of !important until we improve batching for print CSS */

@media print {
    #main {
        padding-bottom: 1em !important; /* The default padding of 6em is to=
o much for printouts */
    }

    body {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        font-size: 10pt;
        line-height: 1.2;
    }

    body, #full-height-container, #main, #page, #content, .has-personal-sid=
ebar #content {
        background: #fff !important;
        color: #000 !important;
        border: 0 !important;
        width: 100% !important;
        height: auto !important;
        min-height: auto !important;
        margin: 0 !important;
        padding: 0 !important;
        display: block !important;
    }

    a, a:link, a:visited, a:focus, a:hover, a:active {
        color: #000;
    }

    #content h1,
    #content h2,
    #content h3,
    #content h4,
    #content h5,
    #content h6 {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        page-break-after: avoid;
    }

    pre {
        font-family: Monaco, "Courier New", monospace;
    }

    #header,
    .aui-header-inner,
    #navigation,
    #sidebar,
    .sidebar,
    #personal-info-sidebar,
    .ia-fixed-sidebar,
    .page-actions,
    .navmenu,
    .ajs-menu-bar,
    .noprint,
    .inline-control-link,
    .inline-control-link a,
    a.show-labels-editor,
    .global-comment-actions,
    .comment-actions,
    .quick-comment-container,
    #addcomment {
        display: none !important;
    }

    .comment .date::before {
        content: none !important; /* remove middot for print view */
    }

    h1.pagetitle img {
        height: auto;
        width: auto;
    }

    .print-only {
        display: block;
    }

    #footer {
        position: relative !important; /* CONF-17506 Place the footer at en=
d of the content */
        margin: 0;
        padding: 0;
        background: none;
        clear: both;
    }

    #poweredby {
        border-top: none;
        background: none;
    }

    #poweredby li.print-only {
        display: list-item;
        font-style: italic;
    }

    #poweredby li.noprint {
        display: none;
    }

    /* no width controls in print */
    .wiki-content .table-wrap,
    .wiki-content p,
    .panel .codeContent,
    .panel .codeContent pre,
    .image-wrap {
        overflow: visible !important;
    }

    /* TODO - should this work? */
    #children-section,
    #comments-section .comment,
    #comments-section .comment .comment-body,
    #comments-section .comment .comment-content,
    #comments-section .comment p {
        page-break-inside: avoid;
    }

    #page-children a {
        text-decoration: none;
    }

    /**
     hide twixies

     the specificity here is a hack because print styles
     are getting loaded before the base styles. */
    #comments-section.pageSection .section-header,
    #comments-section.pageSection .section-title,
    #children-section.pageSection .section-header,
    #children-section.pageSection .section-title,
    .children-show-hide {
        padding-left: 0;
        margin-left: 0;
    }

    .children-show-hide.icon {
        display: none;
    }

    /* personal sidebar */
    .has-personal-sidebar #content {
        margin-right: 0px;
    }

    .has-personal-sidebar #content .pageSection {
        margin-right: 0px;
    }
}
-->
    </style>
</head>
<body>
    <h1>Design</h1>
    <div class=3D"Section1">
        <div class=3D"contentLayout2">=20
<div class=3D"columnLayout two-right-sidebar" data-layout=3D"two-right-side=
bar">=20
<div class=3D"cell normal" data-type=3D"normal">=20
<div class=3D"innerCell">=20
<h1 id=3D"Design-Introduction">Introduction</h1>
<p>This page covers design in eZ Platform in a general aspect. If you want =
to learn about how to display content and build your content templates, you=
 might want to check <a href=3D"/display/DEVELOPER/Content+Rendering">Conte=
nt Rendering</a>.</p>
<p>To apply a template to any part of your webpage, you need three (optiona=
lly four) elements:</p>
<ol>
<li>An entry in the configuration that defines which template should be use=
d in what situation</li>
<li>The template file itself</li>
<li>Assets used by the template (for example, CSS or JS files, images, etc.=
)</li>
<li>(optional) A custom controller used when the template is read which all=
ows you more detailed control over the page.</li>
</ol>
<h1 id=3D"Design-Configuration">Configuration</h1>
<p>Each template must be mentioned in a configuration file together with a =
definition of the situation in which it is used. You can use the <code>ezpl=
atform.yml</code> file located in the <code>app/config/</code> folder, or c=
reate your own separate configuration file in that folder that will list al=
l your templates.</p>
<div class=3D"confluence-information-macro confluence-information-macro-not=
e">
<span class=3D"aui-icon aui-icon-small aui-iconfont-warning confluence-info=
rmation-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>If you decide to create a new configuration file, you will need to impor=
t it by including an import statement in <code>ezplatform.yml</code>. Add t=
he following code at the beginning of <code>ezplatform.yml</code>:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">imports:
    - { resource: &lt;your_file_name&gt;.yml }</pre>=20
</div>
</div>
</div>
</div>
<div class=3D"confluence-information-macro confluence-information-macro-tip=
">
<span class=3D"aui-icon aui-icon-small aui-iconfont-approve confluence-info=
rmation-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>If you are using the recommended .yml files for configuration, here are =
the basic rules for this format:</p>
<p>The configuration is based on pairs of a key and its value, separated by=
 a colon, presented in the following form: key: value. The value of the key=
 may contain further keys, with their values containing further keys, and s=
o on. This hierarchy is marked using indentation&nbsp;=E2=80=93 each level =
lower in the hierarchy must be indented in comparison with its parent.</p>
</div>
</div>
<p>A short configuration file can look like this:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>Sample configuration file</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: plain; gutter: false; theme: Eclipse" style=3D"font-si=
ze:12px;">exponential:
    system:
        default:
            user:
                layout: pagelayout.html.twig
            content_view:
                full:
                    article:
                        template: full\article.html.twig
                        match:
                            Identifier\ContentType: [article]
                    blog_post:
                        controller: app.controller.blog:showBlogPostAction
                        template: full\blog_post.html.twig
                        match:
                            Identifier\ContentType: [blog_post]
                line:
                    article:
                        template: line\article.html.twig
                        match:
                            Identifier\ContentType: [article]</pre>=20
</div>
</div>
<p>This is what individual keys in the configuration mean:</p>
<ul>
<li><strong> <code>exponential</code> </strong>and <strong> <code>system</cod=
e> </strong>are obligatory at the start of any configuration file which def=
ines views.</li>
<li><strong> <code>default</code> </strong>defines the siteaccess for which=
 the configuration will be used. "default", as the name suggests, determine=
s what views are used when no other configuration is chosen. You can also h=
ave separate keys defining views for other siteaccesses.</li>
<li><strong> <code>user</code> </strong>and <strong> <code>layout</code> </=
strong>point to the main template file that is used in any situation where =
no other template is defined. All other templates extend this one. See <a h=
ref=3D"#Design-pagelayout">below </a>for more information.</li>
<li><strong> <code>content_view</code> </strong> defines the view provider.=
</li>
</ul>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>In earlier versions of eZ CMS, <code>location_view</code> was used as th=
e view provider. It is now deprecated.</p>
</div>
</div>
<ul>
<li><strong> <code>full</code> </strong>and <strong> <code>line</code> </st=
rong>determine the kind of view to be used (see below).</li>
<li><strong> <code>article</code> </strong> and <strong> <code>blog_post</c=
ode> </strong> are the keys that start the configuration for one individual=
 case of using a template. You can name these keys any way you want, and yo=
u can have as many of them as you need.</li>
<li><strong> <code>template</code> </strong> names the template to be used =
in this case, including the folder it is stored in (starting from <code>app=
/Resources/views</code>).</li>
<li><strong> <code>controller</code> </strong> defines the controller to be=
 used in this case. Optional, if this key is absent, the default controller=
 is used.</li>
<li><strong> <code>match</code> </strong> defines the situation in which th=
e template will be used. There are different criteria which can be used to =
"match" a template to a situation, for example a Content Type, a specific L=
ocation ID, Section, etc. You can view the full list of matchers here: <spa=
n class=3D"confluence-link"> <a href=3D"/display/DEVELOPER/Content+Renderin=
g#ContentRendering-Viewproviderconfiguration">View provider configuration</=
a> </span>. You can specify more than one matcher for any template; the mat=
chers will be linked with an AND operator.</li>
</ul>
<p>&nbsp;</p>
<p>In the example above, three different templates are mentioned, two to be=
 used in full view, and one in line view. Notice that two separate template=
s are defined for the "article" Content Type. They use the same matcher, bu=
t will be used in different situations&nbsp;=E2=80=93 one when an Article i=
s displayed in full view, and one in line view. Their templates are located=
 in different folders. The line template will also make use of a custom con=
troller, while the remaining cases will employ the default one.</p>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<h4 id=3D"Design-Full,lineandotherviews">Full, line and other views</h4>
<p>Each Content item can be rendered differently, using different templates=
, depending on the type of view it is displayed in. The default, built-in v=
iews are <strong>full</strong> (used when the Content item is displayed by =
itself, as a full page), <strong>line</strong> (used when it is displayed a=
s an item in the list, for example a listing of contents of a folder), and =
<strong>embed</strong> (used when one Content item is embedded in another).=
 Other, custom view types can be created, but only these three have built-i=
n controllers in the system.</p>
</div>
</div>
<div class=3D"confluence-information-macro confluence-information-macro-tip=
">
<span class=3D"aui-icon aui-icon-small aui-iconfont-approve confluence-info=
rmation-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>See&nbsp;<span class=3D"confluence-link"> <a href=3D"/display/DEVELOPER/=
Content+Rendering#ContentRendering-Viewproviderconfiguration">View provider=
 configuration</a> </span> for more details.</p>
</div>
</div>
<h2 id=3D"Design-Templatefile">Template file</h2>
<p>Templates in eZ Platform are written in the Twig templating language.</p=
>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<h4 id=3D"Design-Twigtemplatesinshort">Twig templates in short</h4>
<p>At its core, a Twig template is an HTML frame of the page that will be d=
isplayed. Inside this frame you define places (and manners) in which differ=
ent parts of your Content items will be displayed (rendered).</p>
<p>Most of a Twig template file can look like an ordinary HTML file. This i=
s also where you can define places where Content items or their fields will=
 be embedded.</p>
</div>
</div>
<p>&nbsp;</p>
<p>The configuration described above lets you select one template to be use=
d in a given situation, but this does not mean you are limited to only one =
file per case. It is possible to include other templates in the main templa=
te file. For example, you can have a single template for the footer of a pa=
ge and include it in many other templates. Such templates do not need to be=
 mentioned in the configuration .yml file.</p>
<div class=3D"confluence-information-macro confluence-information-macro-tip=
">
<span class=3D"aui-icon aui-icon-small aui-iconfont-approve confluence-info=
rmation-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>See&nbsp;<a href=3D"http://symfony.com/doc/current/book/templating.html#=
including-templates" class=3D"external-link" rel=3D"nofollow">Including Tem=
plates</a> in Symfony documentation for more information on including templ=
ates.</p>
</div>
</div>
<p>&nbsp;</p>
<p><span class=3D"confluence-anchor-link" id=3D"Design-pagelayout"></span>T=
he main template for your webpage (defined per siteaccess) is placed in the=
 <code>pagelayout.html.twig</code> file. This template will be used by defa=
ult for those parts of the website where no other templates are defined.</p=
>
<p>A <code>pagelayout.html.twig</code> file exists already in Demo Bundles,=
 but if you are using a clean installation, you need to create it from scra=
tch. This file is typically located in a bundle, for example using the buil=
t-in AppBundle: <code>src/AppBundle/Resources/views</code>.<span> The name =
of the bundle must the added whenever the file is called, like in the examp=
le below.</span></p>
<p>Any further templates will extend and modify this one, so they need to s=
tart with a line like this:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">{% extends "AppBundle::pagelayout.html.twig" %}</pre>=20
</div>
</div>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>Although using AppBundle is recommended, you could also place the templa=
te files directly in <code>&lt;installation_folder&gt;/app<code> <code>/</c=
ode>Resources/views</code> </code>. Then the files could <span class=3D"con=
fluence-link">be referenced in code without any prefix. See&nbsp;<a href=3D=
"/display/DEVELOPER/Best+Practices">Best Practices</a> for more information=
.<br> </span></p>
</div>
</div>
<div class=3D"confluence-information-macro confluence-information-macro-tip=
">
<p class=3D"title">Template paths</p>
<span class=3D"aui-icon aui-icon-small aui-iconfont-approve confluence-info=
rmation-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>In short, the <code>Resources/views</code> part of the path is automatic=
ally added whenever a template file is referenced. What you need to provide=
 is the bundle name, name of any subfolder within <code>/views/</code>, and=
 file name, all three separated by colons (:)</p>
<p>To find out more about the way of referencing template files placed in b=
undles, see&nbsp;<a href=3D"http://symfony.com/doc/current/book/templating.=
html#referencing-templates-in-a-bundle" class=3D"external-link" rel=3D"nofo=
llow">Referencing Templates in a Bundle</a> in Symfony documentation.</p>
</div>
</div>
<p>Templates can be extended using a Twig <a href=3D"http://twig.sensiolabs=
.org/doc/functions/block.html" class=3D"external-link" rel=3D"nofollow"> <c=
ode>block</code> </a>tag. This tag lets you define a named section in the t=
emplate that will be filled in by the child template. For example, you can =
define a "title" block in the main template. Any child template that extend=
s it can also contain a "title" block. In this case the contents of the blo=
ck from the child template will be placed inside this block in the parent t=
emplate (and override what was inside this block):</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>pagelayout.html.twig</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">{# ... #}
    &lt;body&gt;
        {% block title %}
            &lt;h1&gt;Default title&lt;/h1&gt;
        {% endblock %}
    &lt;/body&gt;
{# ... #}</pre>=20
</div>
</div>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>child.html.twig</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">{% extends "AppBundle::pagelayout.html.twig" %}
{% block title %}
    &lt;h1&gt;Specific title&lt;/h1&gt;
{% endblock %}</pre>=20
</div>
</div>
<p>In the simplified example above, when the <code>child.html.twig</code> t=
emplate is used, the "title" block from it will be placed in and will overr=
ide the "title" block from the main template&nbsp;=E2=80=93 so "Specific ti=
tle" will be displayed instead of "Default title."</p>
<div class=3D"confluence-information-macro confluence-information-macro-tip=
">
<span class=3D"aui-icon aui-icon-small aui-iconfont-approve confluence-info=
rmation-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>Alternatively, you can place templates inside one another using the <a h=
ref=3D"http://twig.sensiolabs.org/doc/functions/include.html" class=3D"exte=
rnal-link" rel=3D"nofollow"> <code>include</code> </a>function.</p>
<p>See <a href=3D"http://twig.sensiolabs.org/doc/templates.html" class=3D"e=
xternal-link" rel=3D"nofollow">http://twig.sensiolabs.org/doc/templates.htm=
l#</a> for detailed documentation on how to use Twig.</p>
</div>
</div>
<h4 id=3D"Design-Embedcontentintemplates">Embed content in templates</h4>
<p>Now that you know how to create a general layout with Twig templates, le=
t's take a look at the ways in which you can render content inside them.</p=
>
<p>There are several ways of placing Content items or their Fields inside a=
 template. You can do it using one of the <span class=3D"confluence-link"> =
<span class=3D"confluence-link"> <a href=3D"/display/DEVELOPER/Content+Rend=
ering#ContentRendering-Reference">Twig functions described in detail here</=
a> </span> </span>.</p>
<p>As an example, let's look at one of those functions: <strong> <a href=3D=
"/display/DEVELOPER/Content+Rendering#ContentRendering-ez_render_field">ez_=
render_field</a> </strong>. It renders one selected Field of the Content it=
em. In its simplest form this function can look like this:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">{{ ez_render_field( content, 'description' ) }}</pre>=20
</div>
</div>
<p>This renders the value of the Field with identifier "description" of the=
 current Content item (signified by "content"). You can additionally choose=
 a special template to be used for this particular Field:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">{{ ez_render_field(=20
       content,=20
       'description',
       { 'template': 'AppBundle:fields:description.html.twig' }
   ) }}</pre>=20
</div>
</div>
<div class=3D"confluence-information-macro confluence-information-macro-not=
e">
<span class=3D"aui-icon aui-icon-small aui-iconfont-warning confluence-info=
rmation-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>As you can see in the case above, templates can be created not only for =
whole pages, but also for individual Fields.</p>
</div>
</div>
<p>Another way of embedding Content items is using the <strong>render_esi</=
strong> function (which is not an eZ-specific function, but a Symfony stand=
ard). This function lets you easily select a different Content item and emb=
ed it in the current page. This can be used, for instance, if you want to l=
ist the children of a Content item in its parent.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">{{ render_esi(controller('ez_content:viewAction', {locationId: 33, =
viewType: 'line'} )) }}</pre>=20
</div>
</div>
<p>This example renders the Content item with Location ID 33 using the line=
 view. To do this, the function applies the 'ez_content:viewAction' control=
ler. This is the default controller for rendering content, but can be subst=
ituted here with any custom controller of your choice.</p>
<h3 id=3D"Design-Assets">Assets</h3>
<p>Asset files such as CSS stylesheets, JS scripts or image files can be de=
fined in the templates and need to be included in the directory structure i=
n the same way as with any other web project. Assets are placed in the <cod=
e>web/</code> folder in your installation.</p>
<p>Instead of linking to stylesheets or embedding images like usually, you =
can use the <a href=3D"http://symfony.com/doc/current/book/templating.html#=
linking-to-assets" class=3D"external-link" rel=3D"nofollow"> <code>asset</c=
ode> </a>function.</p>
<h3 id=3D"Design-Controller">Controller</h3>
<p>While it is absolutely possible to template a whole website using only T=
wig, a custom PHP controller gives many more options of customizing the beh=
avior of the pages.</p>
<p>See&nbsp;<a href=3D"/display/DEVELOPER/Content+Rendering#ContentRenderin=
g-Customcontrollers">Custom controllers</a> for more information.</p>
<h1 id=3D"Design-Usage">Usage</h1>
<h2 id=3D"Design-CreatinganewdesignusingBundleInheritance">Creating a new d=
esign using Bundle Inheritance</h2>
<p>Due to the fact that eZ Platform is built using the Symfony 2 framework,=
 it is possible to benefit from most of its stock features such as Bundle I=
nheritance. To learn more about this concept in general, check out the <a h=
ref=3D"http://symfony.com/doc/current/cookbook/bundles/override.html" class=
=3D"external-link" rel=3D"nofollow">related Symfony documentation</a>.</p>
<p>Bundle Inheritance allows you to customize a template from a parent bund=
le. This is very convenient when creating a custom design for an already ex=
isting piece of code.</p>
<p>The following example shows how to create a customized version of a temp=
late from the DemoBundle.</p>
<h3 id=3D"Design-Creatingabundle">Creating a bundle</h3>
<p>Create a new bundle to host your design using the dedicated command (fro=
m your app installation):</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: bash; gutter: false; theme: Eclipse" style=3D"font-siz=
e:12px;">php app/console generate:bundle</pre>=20
</div>
</div>
<h3 id=3D"Design-Configuringbundletoinheritfromanother">Configuring bundle =
to inherit from another</h3>
<p>Following the related <a href=3D"http://symfony.com/doc/current/cookbook=
/bundles/inheritance.html" class=3D"external-link" rel=3D"nofollow">Symfony=
 documentation</a>, modify your bundle to make it inherit from the "eZDemoB=
undle". Then copy a template from the DemoBundle in the new bundle, followi=
ng the same directory structure. Customize this template, clear application=
 caches and reload the page. You custom design should be available.</p>
<h3 id=3D"Design-Knownlimitation">Known limitation</h3>
<p>If you are experiencing problems with routes not working after adding yo=
ur bundle, take a look at <a href=3D"https://jira.ez.no/browse/EZP-23575" c=
lass=3D"external-link" rel=3D"nofollow">this issue</a>.</p>
<h1 id=3D"Design-Reference">Reference</h1>
<h2 id=3D"Design-TwigHelper">Twig Helper</h2>
<p>eZ Platform comes with a Twig helper as a <a href=3D"http://symfony.com/=
doc/master/cookbook/templating/global_variables.html" class=3D"external-lin=
k" rel=3D"nofollow">global variable</a> named <strong> <code>exponential</cod=
e> </strong>.</p>
<p>This helper is accessible from all Twig templates and allows you to easi=
ly retrieve useful information.</p>
<div class=3D"table-wrap">
<table class=3D"confluenceTable">
<tbody>
<tr>
<th class=3D"confluenceTh">Property</th>
<th class=3D"confluenceTh">Description</th>
</tr>
<tr>
<td class=3D"confluenceTd"><code>exponential.siteaccess</code></td>
<td class=3D"confluenceTd"><p>Returns the current siteaccess.</p></td>
</tr>
<tr>
<td colspan=3D"1" class=3D"confluenceTd"><code> <span>exponential.rootLocatio=
n</span> </code></td>
<td colspan=3D"1" class=3D"confluenceTd">Returns the root Location object</=
td>
</tr>
<tr>
<td colspan=3D"1" class=3D"confluenceTd"><code>exponential.requestedUriString=
</code></td>
<td colspan=3D"1" class=3D"confluenceTd">Returns the requested URI string (=
also known as semanticPathInfo).</td>
</tr>
<tr>
<td colspan=3D"1" class=3D"confluenceTd"><code>exponential.systemUriString</c=
ode></td>
<td colspan=3D"1" class=3D"confluenceTd">Returns the "system" URI string. S=
ystem URI is the URI for internal content controller. If current route is n=
ot an URLAlias, then the current Pathinfo is returned.</td>
</tr>
<tr>
<td colspan=3D"1" class=3D"confluenceTd"><code>exponential.viewParameters</co=
de></td>
<td colspan=3D"1" class=3D"confluenceTd">Returns the view parameters as a h=
ash.</td>
</tr>
<tr>
<td colspan=3D"1" class=3D"confluenceTd"><code>exponential.viewParametersStri=
ng</code></td>
<td colspan=3D"1" class=3D"confluenceTd">Returns the view parameters as a s=
tring.</td>
</tr>
<tr>
<td colspan=3D"1" class=3D"confluenceTd"><code>exponential.legacy</code></td>
<td colspan=3D"1" class=3D"confluenceTd">Returns legacy information.</td>
</tr>
<tr>
<td colspan=3D"1" class=3D"confluenceTd"><code>exponential.translationSiteAcc=
ess</code></td>
<td colspan=3D"1" class=3D"confluenceTd">Returns the translation SiteAccess=
 for a given language, or null if it cannot be found.</td>
</tr>
<tr>
<td colspan=3D"1" class=3D"confluenceTd"><code>exponential.availableLanguages=
</code></td>
<td colspan=3D"1" class=3D"confluenceTd">Returns the list of available lang=
uages.</td>
</tr>
<tr>
<td colspan=3D"1" class=3D"confluenceTd"><code> exponential.configResolver</c=
ode></td>
<td colspan=3D"1" class=3D"confluenceTd">Returns the config resolver.</td>
</tr>
</tbody>
</table>
</div>
<h3 id=3D"Design-Legacy">Legacy</h3>
<div class=3D"confluence-information-macro confluence-information-macro-not=
e">
<span class=3D"aui-icon aui-icon-small aui-iconfont-warning confluence-info=
rmation-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p><code>exponential.legacy</code> is only available <strong>when viewing con=
tent in legacy fallback</strong> (e.g. no corresponding Twig templates)</p>
</div>
</div>
<p>The <code>exponential.legacy</code> property returns an object of type&nbs=
p;<a href=3D"http://api.symfony.com/2.8/Symfony/Component/HttpFoundation/Pa=
rameterBag.html" class=3D"external-link" rel=3D"nofollow">ParameterBag</a>,=
 which is a container for key/value pairs, and contains additional properti=
es to retrieve/handle legacy information.</p>
<div class=3D"table-wrap">
<table class=3D"confluenceTable">
<tbody>
<tr>
<th class=3D"confluenceTh">Property</th>
<th class=3D"confluenceTh">Description</th>
</tr>
<tr>
<td class=3D"confluenceTd"><code> <span>exponential.legacy.all</span> </code>=
</td>
<td class=3D"confluenceTd">Returns all the parameters, with all the contain=
ed information.</td>
</tr>
<tr>
<td class=3D"confluenceTd"><code> <span>exponential.legacy.keys</span> </code=
></td>
<td class=3D"confluenceTd">Returns the parameter keys only.</td>
</tr>
<tr>
<td class=3D"confluenceTd"><code> <span>exponential.legacy.get</span> </code>=
</td>
<td class=3D"confluenceTd">Returns a parameter by name.</td>
</tr>
<tr>
<td class=3D"confluenceTd"><code> <span>exponential.legacy.has</span> </code>=
</td>
<td class=3D"confluenceTd">Returns true if the parameter is defined.</td>
</tr>
</tbody>
</table>
</div>
<h2 id=3D"Design-Listingtheavailableparameters">Listing the available param=
eters</h2>
<p>You can list the available parameters in <code>exponential.legacy</code> b=
y using the <code>exponential.legacy.keys</code> property, as shown in the fo=
llowing example:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>Example on retrieving the available parameters under exponential.legacy</b=
>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">{{ dump(exponential.legacy.keys()) }}</pre>=20
</div>
</div>
<p>which will give a result similar to:</p>
<div class=3D"preformatted panel" style=3D"border-width: 1px;">
<div class=3D"preformattedContent panelContent">=20
<pre>array
  0 =3D&gt; string 'view_parameters' (length=3D15)
  1 =3D&gt; string 'path' (length=3D4)
  2 =3D&gt; string 'title_path' (length=3D10)
  3 =3D&gt; string 'section_id' (length=3D10)
  4 =3D&gt; string 'node_id' (length=3D7)
  5 =3D&gt; string 'navigation_part' (length=3D15)
  6 =3D&gt; string 'content_info' (length=3D12)
  7 =3D&gt; string 'template_list' (length=3D13)
  8 =3D&gt; string 'cache_ttl' (length=3D9)
  9 =3D&gt; string 'is_default_navigation_part' (length=3D26)
  10 =3D&gt; string 'css_files' (length=3D9)
  11 =3D&gt; string 'js_files' (length=3D8)
  12 =3D&gt; string 'css_files_configured' (length=3D20)
  13 =3D&gt; string 'js_files_configured' (length=3D19)</pre>=20
</div>
</div>
<h2 id=3D"Design-Retrievinglegacyinformation">Retrieving legacy information=
</h2>
<p>Legacy information is accessible by using the <code>exponential.legacy.get=
</code> property, which will allow you to access all data contained in <a h=
ref=3D"http://doc.ez.no/Exponential/Technical-manual/4.x/Templates/The-pagel=
ayout/Variables-in-pagelayout#module_result" class=3D"external-link" rel=3D=
"nofollow">$module_result</a>, from the legacy kernel.</p>
<p>This allows you to import information directly into twig templates. For =
more details please check the available examples on using the <code>ezpubli=
sh.legacy.get</code>&nbsp;property&nbsp;for retrieving&nbsp;<a href=3D"http=
s://confluence.ez.no/display/EZP/Legacy+template+fallback#Legacytemplatefal=
lback-Persistentvariable" class=3D"external-link" rel=3D"nofollow">persiste=
nt variables</a> and <a href=3D"https://confluence.ez.no/display/EZP/Legacy=
+template+fallback#Legacytemplatefallback-Assets" class=3D"external-link" r=
el=3D"nofollow">assets</a>.</p>
<p>As a usage example, if you want to access the legacy information related=
 to 'content_info' you can do it, as shown in the following example:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>Example on accessing 'content_info' under exponential.legacy</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">{{ exponential.legacy.get('content_info') }}</pre>=20
</div>
</div>
<p>The previous call will return the contents on the 'content_info' as an <=
code>array</code>, and if we <code>dump</code> it the result will be simila=
r to the following:</p>
<div class=3D"preformatted panel" style=3D"border-width: 1px;">
<div class=3D"preformattedContent panelContent">=20
<pre>array
  'object_id' =3D&gt; string '57' (length=3D2)
  'node_id' =3D&gt; string '2' (length=3D1)
  'parent_node_id' =3D&gt; string '1' (length=3D1)
  'class_id' =3D&gt; string '23' (length=3D2)
  'class_identifier' =3D&gt; string 'landing_page' (length=3D12)
  'remote_id' =3D&gt; string '8a9c9c761004866fb458d89910f52bee' (length=3D3=
2)
  'node_remote_id' =3D&gt; string 'f3e90596361e31d496d4026eb624c983' (lengt=
h=3D32)
  'offset' =3D&gt; boolean false
  'viewmode' =3D&gt; string 'full' (length=3D4)
  'navigation_part_identifier' =3D&gt; string 'ezcontentnavigationpart' (le=
ngth=3D23)
  'node_depth' =3D&gt; string '1' (length=3D1)
  'url_alias' =3D&gt; string '' (length=3D0)
  'current_language' =3D&gt; string 'eng-GB' (length=3D6)
  'language_mask' =3D&gt; string '3' (length=3D1)
  'main_node_id' =3D&gt; string '2' (length=3D1)
  'main_node_url_alias' =3D&gt; boolean false
  'persistent_variable' =3D&gt;=20
    array
      'css_files' =3D&gt;=20
        array
          0 =3D&gt; string 'video.css' (length=3D9)
      'js_files' =3D&gt;=20
        array
          0 =3D&gt; string 'video.js' (length=3D8)
  'class_group' =3D&gt; boolean false
  'state' =3D&gt;=20
    array
      2 =3D&gt; string '1' (length=3D1)
  'state_identifier' =3D&gt;=20
    array
      0 =3D&gt; string 'ez_lock/not_locked' (length=3D18)
  'parent_class_id' =3D&gt; string '1' (length=3D1)
  'parent_class_identifier' =3D&gt; string 'folder' (length=3D6)
  'parent_node_remote_id' =3D&gt; string '629709ba256fe317c3ddcee35453a96a'=
 (length=3D32)
  'parent_object_remote_id' =3D&gt; string 'e5c9db64baadb82ab8db54f0e2192ec=
3' (length=3D32)</pre>=20
</div>
</div>
<p>Additionally, for retrieving information contained in 'content_info' suc=
h as the current language of the content in the page you can do it like in =
the following example:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>Example on retrieving 'current_language'</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">{{ exponential.legacy.get('content_info')['current_language'] }}</pre=
>=20
</div>
</div>
</div>=20
</div>=20
<div class=3D"cell aside" data-type=3D"aside">=20
<div class=3D"innerCell">=20
<h4 id=3D"Design-Inthistopic:">In this topic:</h4>
<p><style type=3D"text/css">/*<![CDATA[*/
div.rbtoc1485850473457 {padding: 0px;}
div.rbtoc1485850473457 ul {list-style: disc;margin-left: 0px;}
div.rbtoc1485850473457 li {margin-left: 0px;padding-left: 0px;}

/*]]>*/</style></p>
<div class=3D"toc-macro rbtoc1485850473457">=20
<ul class=3D"toc-indentation">=20
<li><a href=3D"#Design-Introduction">Introduction</a></li>=20
<li><a href=3D"#Design-Configuration">Configuration</a>=20
<ul class=3D"toc-indentation">=20
<li><a href=3D"#Design-Templatefile">Template file</a>=20
<ul class=3D"toc-indentation">=20
<li><a href=3D"#Design-Assets">Assets</a></li>=20
<li><a href=3D"#Design-Controller">Controller</a></li>=20
</ul> </li>=20
</ul> </li>=20
<li><a href=3D"#Design-Usage">Usage</a>=20
<ul class=3D"toc-indentation">=20
<li><a href=3D"#Design-CreatinganewdesignusingBundleInheritance">Creating a=
 new design using Bundle Inheritance</a>=20
<ul class=3D"toc-indentation">=20
<li><a href=3D"#Design-Creatingabundle">Creating a bundle</a></li>=20
<li><a href=3D"#Design-Configuringbundletoinheritfromanother">Configuring b=
undle to inherit from another</a></li>=20
<li><a href=3D"#Design-Knownlimitation">Known limitation</a></li>=20
</ul> </li>=20
</ul> </li>=20
<li><a href=3D"#Design-Reference">Reference</a>=20
<ul class=3D"toc-indentation">=20
<li><a href=3D"#Design-TwigHelper">Twig Helper</a>=20
<ul class=3D"toc-indentation">=20
<li><a href=3D"#Design-Legacy">Legacy</a></li>=20
</ul> </li>=20
<li><a href=3D"#Design-Listingtheavailableparameters">Listing the available=
 parameters</a></li>=20
<li><a href=3D"#Design-Retrievinglegacyinformation">Retrieving legacy infor=
mation</a></li>=20
</ul> </li>=20
</ul>=20
</div>
<p></p>
</div>=20
</div>=20
</div>=20
</div>
    </div>
</body>
</html>
------=_Part_2709_1237558858.1485850473537--
