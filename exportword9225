Message-ID: <1633186221.3530.1485853509584.JavaMail.confluence@ip-10-127-227-164>
Subject: Exported From Confluence
MIME-Version: 1.0
Content-Type: multipart/related; 
	boundary="----=_Part_3529_1076180696.1485853509584"

------=_Part_3529_1076180696.1485853509584
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Content-Location: file:///C:/exported.html

<html xmlns:o=3D'urn:schemas-microsoft-com:office:office'
      xmlns:w=3D'urn:schemas-microsoft-com:office:word'
      xmlns:v=3D'urn:schemas-microsoft-com:vml'
      xmlns=3D'urn:w3-org-ns:HTML'>
<head>
    <meta http-equiv=3D"Content-Type" content=3D"text/html; charset=3Dutf-8=
">
    <title>Structuring the bundle</title>
    <!--[if gte mso 9]>
    <xml>
        <o:OfficeDocumentSettings>
            <o:TargetScreenSize>1024x640</o:TargetScreenSize>
            <o:PixelsPerInch>72</o:PixelsPerInch>
            <o:AllowPNG/>
        </o:OfficeDocumentSettings>
        <w:WordDocument>
            <w:View>Print</w:View>
            <w:Zoom>90</w:Zoom>
            <w:DoNotOptimizeForBrowser/>
        </w:WordDocument>
    </xml>
    <![endif]-->
    <style>
                <!--
        @page Section1 {
            size: 8.5in 11.0in;
            margin: 1.0in;
            mso-header-margin: .5in;
            mso-footer-margin: .5in;
            mso-paper-source: 0;
        }

        td {
            page-break-inside: avoid;
        }

        tr {
            page-break-after: avoid;
        }

        div.Section1 {
            page: Section1;
        }

        /* Confluence print stylesheet. Common to all themes for print medi=
a */
/* Full of !important until we improve batching for print CSS */

@media print {
    #main {
        padding-bottom: 1em !important; /* The default padding of 6em is to=
o much for printouts */
    }

    body {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        font-size: 10pt;
        line-height: 1.2;
    }

    body, #full-height-container, #main, #page, #content, .has-personal-sid=
ebar #content {
        background: #fff !important;
        color: #000 !important;
        border: 0 !important;
        width: 100% !important;
        height: auto !important;
        min-height: auto !important;
        margin: 0 !important;
        padding: 0 !important;
        display: block !important;
    }

    a, a:link, a:visited, a:focus, a:hover, a:active {
        color: #000;
    }

    #content h1,
    #content h2,
    #content h3,
    #content h4,
    #content h5,
    #content h6 {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        page-break-after: avoid;
    }

    pre {
        font-family: Monaco, "Courier New", monospace;
    }

    #header,
    .aui-header-inner,
    #navigation,
    #sidebar,
    .sidebar,
    #personal-info-sidebar,
    .ia-fixed-sidebar,
    .page-actions,
    .navmenu,
    .ajs-menu-bar,
    .noprint,
    .inline-control-link,
    .inline-control-link a,
    a.show-labels-editor,
    .global-comment-actions,
    .comment-actions,
    .quick-comment-container,
    #addcomment {
        display: none !important;
    }

    .comment .date::before {
        content: none !important; /* remove middot for print view */
    }

    h1.pagetitle img {
        height: auto;
        width: auto;
    }

    .print-only {
        display: block;
    }

    #footer {
        position: relative !important; /* CONF-17506 Place the footer at en=
d of the content */
        margin: 0;
        padding: 0;
        background: none;
        clear: both;
    }

    #poweredby {
        border-top: none;
        background: none;
    }

    #poweredby li.print-only {
        display: list-item;
        font-style: italic;
    }

    #poweredby li.noprint {
        display: none;
    }

    /* no width controls in print */
    .wiki-content .table-wrap,
    .wiki-content p,
    .panel .codeContent,
    .panel .codeContent pre,
    .image-wrap {
        overflow: visible !important;
    }

    /* TODO - should this work? */
    #children-section,
    #comments-section .comment,
    #comments-section .comment .comment-body,
    #comments-section .comment .comment-content,
    #comments-section .comment p {
        page-break-inside: avoid;
    }

    #page-children a {
        text-decoration: none;
    }

    /**
     hide twixies

     the specificity here is a hack because print styles
     are getting loaded before the base styles. */
    #comments-section.pageSection .section-header,
    #comments-section.pageSection .section-title,
    #children-section.pageSection .section-header,
    #children-section.pageSection .section-title,
    .children-show-hide {
        padding-left: 0;
        margin-left: 0;
    }

    .children-show-hide.icon {
        display: none;
    }

    /* personal sidebar */
    .has-personal-sidebar #content {
        margin-right: 0px;
    }

    .has-personal-sidebar #content .pageSection {
        margin-right: 0px;
    }
}
-->
    </style>
</head>
<body>
    <h1>Structuring the bundle</h1>
    <div class=3D"Section1">
        <h2 id=3D"Structuringthebundle-Atthispoint,wehavean=E2=80=9Canonymo=
us=E2=80=9DSymfony2bundle."><span style=3D"font-size: 14.0px;line-height: 1=
.4285715;">At this point, we have an =E2=80=9Canonymous=E2=80=9D Symfony 2 =
bundle.</span>&nbsp;</h2>
<p><span style=3D"color: rgb(0,0,0);">Let=E2=80=99s start by creating the s=
tructure for our FieldType. To make it easier to move around the code, we w=
ill mimic to some extent the structure that is used in the kernel.&nbsp;</s=
pan><span style=3D"color: rgb(0,0,0);">Native FieldTypes are located inside=
 <code>exponential-kernel</code> (in <code>vendor/ezsystems</code>), in the <=
/span><code><span style=3D"color: rgb(0,0,0);">eZ/Publish/Core/FieldType</s=
pan></code><span style=3D"color: rgb(0,0,0);"> folder. Each FieldType has i=
ts own subfolder: </span><code><span style=3D"color: rgb(0,0,0);">TextLine<=
/span></code><span style=3D"color: rgb(0,0,0);">, </span><code><span style=
=3D"color: rgb(0,0,0);">Email</span></code><span style=3D"color: rgb(0,0,0)=
;">, </span><code><span style=3D"color: rgb(0,0,0);">Url</span></code><span=
 style=3D"color: rgb(0,0,0);">=E2=80=A6 we will use a structure quite close=
 from this.</span></p>
<p><span style=3D"color: rgb(0,0,0);">&nbsp;</span><span style=3D"color: rg=
b(0,0,0);">From the tutorial repository, list the contents of the </span><c=
ode><span style=3D"color: rgb(0,0,0);">eZ/Publish/FieldType</span></code><s=
pan style=3D"color: rgb(0,0,0);"> folder:</span></p>
<pre> eZ<br>=E2=94=94=E2=94=80=E2=94=80 Publish<br>&nbsp; &nbsp;=E2=94=94=
=E2=94=80=E2=94=80 FieldType<br>&nbsp; &nbsp; &nbsp; &nbsp;=E2=94=94=E2=94=
=80=E2=94=80 Tweet<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;=E2=94=9C=E2=
=94=80=E2=94=80 Type.php<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;=E2=94=
=94=E2=94=80=E2=94=80 Value.php</pre>
<p><span style=3D"color: rgb(0,0,0);">We have the two base classes required=
 by a FieldType: </span><code><span style=3D"color: rgb(0,0,0);">Type</span=
></code><span style=3D"color: rgb(0,0,0);"> and </span><code><span style=3D=
"color: rgb(0,0,0);">Value</span></code><span style=3D"color: rgb(0,0,0);">=
.</span></p>
<h3 id=3D"Structuringthebundle-TheTypeclass"><span style=3D"color: rgb(102,=
102,102);">The Type class</span></h3>
<p><span style=3D"color: rgb(0,0,0);">The </span><span style=3D"color: rgb(=
0,0,0);">Type</span><span style=3D"color: rgb(0,0,0);"> contains the logic =
of the field type: validating data, transforming from various formats, desc=
ribing the validators=E2=80=A6<br></span><span style=3D"color: rgb(0,0,0);"=
>A type class must implement </span><code><span style=3D"color: rgb(0,0,0);=
">eZ\Publish\SPI\FieldType\FieldType</span></code><span style=3D"color: rgb=
(0,0,0);">. It may also extend the </span><code><span style=3D"color: rgb(0=
,0,0);">eZ\Publish\Core\FieldType\FieldType</span></code><span style=3D"col=
or: rgb(0,0,0);"> abstract class.</span></p>
<h3 id=3D"Structuringthebundle-TheValueclass"><span style=3D"color: rgb(102=
,102,102);">The Value class</span></h3>
<p><span style=3D"color: rgb(0,0,0);">The </span><span style=3D"color: rgb(=
0,0,0);">Value </span><span style=3D"color: rgb(0,0,0);">is used to represe=
nt an instance of our type within a Content item. Each Field will present i=
ts data using an instance of the Type=E2=80=99s Value class.<br></span><spa=
n style=3D"color: rgb(0,0,0);">A value class must implement the </span><cod=
e><span style=3D"color: rgb(0,0,0);">eZ\Publish\SPI\FieldType\Value</span><=
/code><span style=3D"color: rgb(0,0,0);"> interface. It may also extend the=
 </span><code><span style=3D"color: rgb(0,0,0);">eZ\Publish\Core\FieldType\=
Value</span></code><span style=3D"color: rgb(0,0,0);"> abstract class.</spa=
n></p>
<div>
<span style=3D"color: rgb(0,0,0);"><br></span>
</div>
    </div>
</body>
</html>
------=_Part_3529_1076180696.1485853509584--
