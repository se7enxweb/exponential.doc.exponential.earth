Message-ID: <310034534.3208.1485852390078.JavaMail.confluence@ip-10-127-227-164>
Subject: Exported From Confluence
MIME-Version: 1.0
Content-Type: multipart/related; 
	boundary="----=_Part_3207_276735871.1485852390078"

------=_Part_3207_276735871.1485852390078
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Content-Location: file:///C:/exported.html

<html xmlns:o=3D'urn:schemas-microsoft-com:office:office'
      xmlns:w=3D'urn:schemas-microsoft-com:office:word'
      xmlns:v=3D'urn:schemas-microsoft-com:vml'
      xmlns=3D'urn:w3-org-ns:HTML'>
<head>
    <meta http-equiv=3D"Content-Type" content=3D"text/html; charset=3Dutf-8=
">
    <title>How to authenticate a user with multiple user providers</title>
    <!--[if gte mso 9]>
    <xml>
        <o:OfficeDocumentSettings>
            <o:TargetScreenSize>1024x640</o:TargetScreenSize>
            <o:PixelsPerInch>72</o:PixelsPerInch>
            <o:AllowPNG/>
        </o:OfficeDocumentSettings>
        <w:WordDocument>
            <w:View>Print</w:View>
            <w:Zoom>90</w:Zoom>
            <w:DoNotOptimizeForBrowser/>
        </w:WordDocument>
    </xml>
    <![endif]-->
    <style>
                <!--
        @page Section1 {
            size: 8.5in 11.0in;
            margin: 1.0in;
            mso-header-margin: .5in;
            mso-footer-margin: .5in;
            mso-paper-source: 0;
        }

        td {
            page-break-inside: avoid;
        }

        tr {
            page-break-after: avoid;
        }

        div.Section1 {
            page: Section1;
        }

        /* Confluence print stylesheet. Common to all themes for print medi=
a */
/* Full of !important until we improve batching for print CSS */

@media print {
    #main {
        padding-bottom: 1em !important; /* The default padding of 6em is to=
o much for printouts */
    }

    body {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        font-size: 10pt;
        line-height: 1.2;
    }

    body, #full-height-container, #main, #page, #content, .has-personal-sid=
ebar #content {
        background: #fff !important;
        color: #000 !important;
        border: 0 !important;
        width: 100% !important;
        height: auto !important;
        min-height: auto !important;
        margin: 0 !important;
        padding: 0 !important;
        display: block !important;
    }

    a, a:link, a:visited, a:focus, a:hover, a:active {
        color: #000;
    }

    #content h1,
    #content h2,
    #content h3,
    #content h4,
    #content h5,
    #content h6 {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        page-break-after: avoid;
    }

    pre {
        font-family: Monaco, "Courier New", monospace;
    }

    #header,
    .aui-header-inner,
    #navigation,
    #sidebar,
    .sidebar,
    #personal-info-sidebar,
    .ia-fixed-sidebar,
    .page-actions,
    .navmenu,
    .ajs-menu-bar,
    .noprint,
    .inline-control-link,
    .inline-control-link a,
    a.show-labels-editor,
    .global-comment-actions,
    .comment-actions,
    .quick-comment-container,
    #addcomment {
        display: none !important;
    }

    .comment .date::before {
        content: none !important; /* remove middot for print view */
    }

    h1.pagetitle img {
        height: auto;
        width: auto;
    }

    .print-only {
        display: block;
    }

    #footer {
        position: relative !important; /* CONF-17506 Place the footer at en=
d of the content */
        margin: 0;
        padding: 0;
        background: none;
        clear: both;
    }

    #poweredby {
        border-top: none;
        background: none;
    }

    #poweredby li.print-only {
        display: list-item;
        font-style: italic;
    }

    #poweredby li.noprint {
        display: none;
    }

    /* no width controls in print */
    .wiki-content .table-wrap,
    .wiki-content p,
    .panel .codeContent,
    .panel .codeContent pre,
    .image-wrap {
        overflow: visible !important;
    }

    /* TODO - should this work? */
    #children-section,
    #comments-section .comment,
    #comments-section .comment .comment-body,
    #comments-section .comment .comment-content,
    #comments-section .comment p {
        page-break-inside: avoid;
    }

    #page-children a {
        text-decoration: none;
    }

    /**
     hide twixies

     the specificity here is a hack because print styles
     are getting loaded before the base styles. */
    #comments-section.pageSection .section-header,
    #comments-section.pageSection .section-title,
    #children-section.pageSection .section-header,
    #children-section.pageSection .section-title,
    .children-show-hide {
        padding-left: 0;
        margin-left: 0;
    }

    .children-show-hide.icon {
        display: none;
    }

    /* personal sidebar */
    .has-personal-sidebar #content {
        margin-right: 0px;
    }

    .has-personal-sidebar #content .pageSection {
        margin-right: 0px;
    }
}
-->
    </style>
</head>
<body>
    <h1>How to authenticate a user with multiple user providers</h1>
    <div class=3D"Section1">
        <p><style type=3D"text/css">/*<![CDATA[*/
div.rbtoc1485852390049 {padding: 0px;}
div.rbtoc1485852390049 ul {list-style: disc;margin-left: 0px;}
div.rbtoc1485852390049 li {margin-left: 0px;padding-left: 0px;}

/*]]>*/</style></p>
<div class=3D"toc-macro rbtoc1485852390049">=20
<ul class=3D"toc-indentation">=20
<li><a href=3D"#Howtoauthenticateauserwithmultipleuserproviders-Description=
">Description</a></li>=20
<li><a href=3D"#Howtoauthenticateauserwithmultipleuserproviders-Solution">S=
olution</a>=20
<ul class=3D"toc-indentation">=20
<li><a href=3D"#Howtoauthenticateauserwithmultipleuserproviders-Userexposed=
andsecuritytoken">User exposed and security token</a></li>=20
<li><a href=3D"#Howtoauthenticateauserwithmultipleuserproviders-Customizing=
theuserclass">Customizing the user class</a></li>=20
</ul> </li>=20
<li><a href=3D"#Howtoauthenticateauserwithmultipleuserproviders-Example">Ex=
ample</a>=20
<ul class=3D"toc-indentation">=20
<li><a href=3D"#Howtoauthenticateauserwithmultipleuserproviders-Implementin=
gthelistener">Implementing the listener</a></li>=20
</ul> </li>=20
</ul>=20
</div>
<p></p>
<h2 id=3D"Howtoauthenticateauserwithmultipleuserproviders-Description">Desc=
ription</h2>
<p>Symfony provides native support for&nbsp;<a href=3D"http://symfony.com/d=
oc/2.3/book/security.html#using-multiple-user-providers" class=3D"external-=
link" rel=3D"nofollow">multiple user providers</a>. This makes it easy to i=
ntegrate any kind of login handlers, including SSO and existing 3rd party b=
undles (e.g.&nbsp;<a href=3D"https://github.com/Maks3w/FR3DLdapBundle" clas=
s=3D"external-link" rel=3D"nofollow">FR3DLdapBundle</a>,&nbsp;<a href=3D"ht=
tps://github.com/hwi/HWIOAuthBundle" class=3D"external-link" rel=3D"nofollo=
w">HWIOauthBundle</a>,&nbsp;<a href=3D"https://github.com/FriendsOfSymfony/=
FOSUserBundle" class=3D"external-link" rel=3D"nofollow">FOSUserBundle</a>,&=
nbsp;<a href=3D"http://github.com/BeSimple/BeSimpleSsoAuthBundle" class=3D"=
external-link" rel=3D"nofollow">BeSimpleSsoAuthBundle</a>, etc.).</p>
<p>However, to be able to use&nbsp;<em>external</em>&nbsp;user providers wi=
th eZ, a valid eZ user needs to be injected into the repository. This is ma=
inly for the kernel to be able to manage content-related permissions (but n=
ot limited to this).</p>
<p>Depending on your context, you will either want to create an eZ user&nbs=
p;<code>on-the-fly</code>, return an existing user, or even always use a ge=
neric user.</p>
<p>&nbsp;</p>
<h2 id=3D"Howtoauthenticateauserwithmultipleuserproviders-Solution">Solutio=
n</h2>
<p>Whenever an <em>external</em>&nbsp;user is matched (i.e. that does not c=
ome from eZ repository, like coming from LDAP), eZ kernel fires an&nbsp;<co=
de>MVCEvents::INTERACTIVE_LOGIN</code>&nbsp;event. Every service listening =
to this event will receive an <code>eZ\Publish\Core\MVC\Symfony\Event\Inter=
activeLoginEvent</code>&nbsp;object which contains the original security to=
ken (that holds the matched user) and the request.</p>
<p>It's then up to the listener to retrieve an eZ user from the repository =
and to assign it back to the event object. This user will be injected into =
the repository and used for the rest of the request.</p>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>If no eZ user is returned, the anonymous user will be used.</p>
</div>
</div>
<h3 id=3D"Howtoauthenticateauserwithmultipleuserproviders-Userexposedandsec=
uritytoken">User exposed and security token</h3>
<p>When an <em>external</em>&nbsp;user is matched, a different token will b=
e injected into the security context, the&nbsp;<code>InteractiveLoginToken<=
/code>. This token holds a&nbsp;<code>UserWrapped</code>&nbsp;instance whic=
h contains the originally matched user and the&nbsp;<em>API user</em>&nbsp;=
(the one from the eZ repository).</p>
<p>Note that the&nbsp;<em>API user</em>&nbsp;is mainly used for permission =
checks against the repository and thus stays&nbsp;<em>under the hood</em>.<=
/p>
<h3 id=3D"Howtoauthenticateauserwithmultipleuserproviders-Customizingtheuse=
rclass">Customizing the user class</h3>
<p>It is possible to customize the user class used by extending&nbsp;<code>=
exponential.security.login_listener</code>&nbsp;service, which defaults to&nb=
sp;<code>eZ\Publish\Core\MVC\Symfony\Security\EventListener\SecurityListene=
r</code>.</p>
<p>You can override&nbsp;<code>getUser()</code>&nbsp;to return whatever use=
r class you want, as long as it implements&nbsp;<code>eZ\Publish\Core\MVC\S=
ymfony\Security\UserInterface</code>.</p>
<h2 id=3D"Howtoauthenticateauserwithmultipleuserproviders-Example">Example<=
/h2>
<p><span>Here is a very simple example using the in-memory user provider.</=
span></p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>app/config/security.yml</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">security:
    providers:
        # Chaining in_memory and exponential user providers
        chain_provider:
            chain:
                providers: [in_memory, exponential]
        exponential:
            id: exponential.security.user_provider
        in_memory:
            memory:
                users:
                    # You will then be able to login with username "user" a=
nd password "userpass"
                    user:  { password: userpass, roles: [ 'ROLE_USER' ] }
=09# The "in memory" provider requires an encoder for Symfony\Component\Sec=
urity\Core\User\User
&nbsp;encoders:
        Symfony\Component\Security\Core\User\User: plaintext</pre>=20
</div>
</div>
<h3 id=3D"Howtoauthenticateauserwithmultipleuserproviders-Implementingtheli=
stener">Implementing the listener</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>services.yml in your AcmeTestBundle</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">parameters:
    acme_test.interactive_event_listener.class: Acme\TestBundle\EventListen=
er\InteractiveLoginListener

services:
    acme_test.interactive_event_listener:
        class: %acme_test.interactive_event_listener.class%
        arguments: [@exponential.api.service.user]
        tags:
            - { name: kernel.event_subscriber }&nbsp;</pre>=20
</div>
</div>
<div class=3D"confluence-information-macro confluence-information-macro-not=
e">
<span class=3D"aui-icon aui-icon-small aui-iconfont-warning confluence-info=
rmation-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>Do not mix <code>MVCEvents::INTERACTIVE_LOGIN</code> event (specific to =
eZ Platform) and <code>SecurityEvents::INTERACTIVE_LOGIN</code> event (fire=
d by Symfony security component)</p>
</div>
</div>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>Interactive login listener</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">&lt;?php
namespace Acme\TestBundle\EventListener;

use eZ\Publish\API\Repository\UserService;
use eZ\Publish\Core\MVC\Symfony\Event\InteractiveLoginEvent;
use eZ\Publish\Core\MVC\Symfony\MVCEvents;
use Symfony\Component\EventDispatcher\EventSubscriberInterface;

class InteractiveLoginListener implements EventSubscriberInterface
{
    /**
     * @var \eZ\Publish\API\Repository\UserService
     */
    private $userService;

    public function __construct( UserService $userService )
    {
        $this-&gt;userService =3D $userService;
    }

    public static function getSubscribedEvents()
    {
        return array(
            MVCEvents::INTERACTIVE_LOGIN =3D&gt; 'onInteractiveLogin'
        );
    }

    public function onInteractiveLogin( InteractiveLoginEvent $event )
    {
        // We just load a generic user and assign it back to the event.
        // You may want to create users here, or even load predefined users=
 depending on your own rules.
        $event-&gt;setApiUser( $this-&gt;userService-&gt;loadUserByLogin( '=
lolautruche' ) );
    }
}&nbsp;</pre>=20
</div>
</div>
<p><strong><br></strong></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<div class=3D"table-wrap">
<table class=3D"diff-table tab-size-8 confluenceTable">
<tbody>
<tr>
<td class=3D"blob-code blob-code-addition confluenceTd">+<span class=3D"pl-=
s2"> <span class=3D"pl-c"># The "in memory" provider requires an encoder fo=
r Symfony\Component\Security\Core\User\User</span></span></td>
</tr>
</tbody>
</table>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<div class=3D"table-wrap">
<table class=3D"diff-table tab-size-8 confluenceTable">
<tbody>
<tr>
<td class=3D"blob-code blob-code-addition confluenceTd">&nbsp;</td>
</tr>
</tbody>
</table>
</div>
<div class=3D"table-wrap">
<table class=3D"diff-table tab-size-8 confluenceTable">
<tbody>
<tr>
<td class=3D"blob-code blob-code-addition confluenceTd">+<span class=3D"pl-=
s2"> <span class=3D"pl-s1"><span class=3D"pl-ent">encoders:</span></span></=
span></td>
</tr>
</tbody>
</table>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<div class=3D"table-wrap">
<table class=3D"diff-table tab-size-8 confluenceTable">
<tbody>
<tr>
<td class=3D"blob-code blob-code-addition confluenceTd">&nbsp;</td>
</tr>
</tbody>
</table>
</div>
<p>+ <span class=3D"pl-ent">Symfony\Component\Security\Core\User\User:</spa=
n></p>
    </div>
</body>
</html>
------=_Part_3207_276735871.1485852390078--
