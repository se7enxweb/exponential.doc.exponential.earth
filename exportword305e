Message-ID: <1683806079.4214.1485861829690.JavaMail.confluence@ip-10-127-227-164>
Subject: Exported From Confluence
MIME-Version: 1.0
Content-Type: multipart/related; 
	boundary="----=_Part_4213_417191443.1485861829689"

------=_Part_4213_417191443.1485861829689
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Content-Location: file:///C:/exported.html

<html xmlns:o=3D'urn:schemas-microsoft-com:office:office'
      xmlns:w=3D'urn:schemas-microsoft-com:office:word'
      xmlns:v=3D'urn:schemas-microsoft-com:vml'
      xmlns=3D'urn:w3-org-ns:HTML'>
<head>
    <meta http-equiv=3D"Content-Type" content=3D"text/html; charset=3Dutf-8=
">
    <title>5. Other recipes</title>
    <!--[if gte mso 9]>
    <xml>
        <o:OfficeDocumentSettings>
            <o:TargetScreenSize>1024x640</o:TargetScreenSize>
            <o:PixelsPerInch>72</o:PixelsPerInch>
            <o:AllowPNG/>
        </o:OfficeDocumentSettings>
        <w:WordDocument>
            <w:View>Print</w:View>
            <w:Zoom>90</w:Zoom>
            <w:DoNotOptimizeForBrowser/>
        </w:WordDocument>
    </xml>
    <![endif]-->
    <style>
                <!--
        @page Section1 {
            size: 8.5in 11.0in;
            margin: 1.0in;
            mso-header-margin: .5in;
            mso-footer-margin: .5in;
            mso-paper-source: 0;
        }

        td {
            page-break-inside: avoid;
        }

        tr {
            page-break-after: avoid;
        }

        div.Section1 {
            page: Section1;
        }

        /* Confluence print stylesheet. Common to all themes for print medi=
a */
/* Full of !important until we improve batching for print CSS */

@media print {
    #main {
        padding-bottom: 1em !important; /* The default padding of 6em is to=
o much for printouts */
    }

    body {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        font-size: 10pt;
        line-height: 1.2;
    }

    body, #full-height-container, #main, #page, #content, .has-personal-sid=
ebar #content {
        background: #fff !important;
        color: #000 !important;
        border: 0 !important;
        width: 100% !important;
        height: auto !important;
        min-height: auto !important;
        margin: 0 !important;
        padding: 0 !important;
        display: block !important;
    }

    a, a:link, a:visited, a:focus, a:hover, a:active {
        color: #000;
    }

    #content h1,
    #content h2,
    #content h3,
    #content h4,
    #content h5,
    #content h6 {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        page-break-after: avoid;
    }

    pre {
        font-family: Monaco, "Courier New", monospace;
    }

    #header,
    .aui-header-inner,
    #navigation,
    #sidebar,
    .sidebar,
    #personal-info-sidebar,
    .ia-fixed-sidebar,
    .page-actions,
    .navmenu,
    .ajs-menu-bar,
    .noprint,
    .inline-control-link,
    .inline-control-link a,
    a.show-labels-editor,
    .global-comment-actions,
    .comment-actions,
    .quick-comment-container,
    #addcomment {
        display: none !important;
    }

    .comment .date::before {
        content: none !important; /* remove middot for print view */
    }

    h1.pagetitle img {
        height: auto;
        width: auto;
    }

    .print-only {
        display: block;
    }

    #footer {
        position: relative !important; /* CONF-17506 Place the footer at en=
d of the content */
        margin: 0;
        padding: 0;
        background: none;
        clear: both;
    }

    #poweredby {
        border-top: none;
        background: none;
    }

    #poweredby li.print-only {
        display: list-item;
        font-style: italic;
    }

    #poweredby li.noprint {
        display: none;
    }

    /* no width controls in print */
    .wiki-content .table-wrap,
    .wiki-content p,
    .panel .codeContent,
    .panel .codeContent pre,
    .image-wrap {
        overflow: visible !important;
    }

    /* TODO - should this work? */
    #children-section,
    #comments-section .comment,
    #comments-section .comment .comment-body,
    #comments-section .comment .comment-content,
    #comments-section .comment p {
        page-break-inside: avoid;
    }

    #page-children a {
        text-decoration: none;
    }

    /**
     hide twixies

     the specificity here is a hack because print styles
     are getting loaded before the base styles. */
    #comments-section.pageSection .section-header,
    #comments-section.pageSection .section-title,
    #children-section.pageSection .section-header,
    #children-section.pageSection .section-title,
    .children-show-hide {
        padding-left: 0;
        margin-left: 0;
    }

    .children-show-hide.icon {
        display: none;
    }

    /* personal sidebar */
    .has-personal-sidebar #content {
        margin-right: 0px;
    }

    .has-personal-sidebar #content .pageSection {
        margin-right: 0px;
    }
}
-->
    </style>
</head>
<body>
    <h1>5. Other recipes</h1>
    <div class=3D"Section1">
        <p><style type=3D"text/css">/*<![CDATA[*/
div.rbtoc1485861829665 {padding: 0px;}
div.rbtoc1485861829665 ul {list-style: disc;margin-left: 0px;}
div.rbtoc1485861829665 li {margin-left: 0px;padding-left: 0px;}

/*]]>*/</style></p>
<div class=3D"toc-macro rbtoc1485861829665">=20
<ul class=3D"toc-indentation">=20
<li><a href=3D"#id-5.Otherrecipes-Assigningsectiontocontent">Assigning sect=
ion to content</a></li>=20
<li><a href=3D"#id-5.Otherrecipes-Creatingacontenttype">Creating a content =
type</a></li>=20
</ul>=20
</div>
<p></p>
<h2 id=3D"id-5.Otherrecipes-Assigningsectiontocontent">Assigning section to=
 content</h2>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<p class=3D"title">Full code</p>
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p><a href=3D"https://github.com/docb22/exponential-cookbook/tree/master/EzS=
ystems/CookBookBundle/Command/AssignContentToSectionCommand.php" class=3D"e=
xternal-link" rel=3D"nofollow">https://github.com/ezsystems/CookbookBundle/=
tree/master/Command/AssignContentToSectionCommand.php</a></p>
</div>
</div>
<p>The Section a Content belongs to can be set during creation, using the <=
code>ContentCreateStruct::$sectionId</code> property. However, as for many =
Repository objects properties, the section can't be changed using a <code>C=
ontentUpdateStruct</code>. The reason is still the same: changing a Content=
's section will affect the subtrees referenced by its Locations. For this r=
eason, it is required that you use the SectionService to change the Section=
 of a Content.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>assign section to content</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">$contentInfo =3D $contentService-&gt;loadContentInfo( $contentId );
$section =3D $sectionService-&gt;loadSection( $sectionId );
$sectionService-&gt;assignSection( $contentInfo, $section );</pre>=20
</div>
</div>
<p>This operation involves the <code>SectionService</code>, as well as the =
<code>ContentService</code>.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>assign section to content</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">$contentInfo =3D $contentService-&gt;loadContentInfo( $contentId );=
</pre>=20
</div>
</div>
<p>We use <code>ContentService::loadContentInfo()</code> to get the Content=
 we want to update the Section for.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>assign section to content</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">$section =3D $sectionService-&gt;loadSection( $sectionId );</pre>=
=20
</div>
</div>
<p>SectionService::loadSection() is then used to load the Section we want t=
o assign our Content to. Note that there is no SectionInfo object. Sections=
 are quite simple, and we don't need to separate their metadata from their =
actual data. However, <code><a href=3D"http://apidoc.ez.no/sami/trunk/NS/ht=
ml/eZ/Publish/API/Repository/Values/Content/SectionCreateStruct.html" class=
=3D"external-link" rel=3D"nofollow">SectionCreateStruct</a></code> and <a h=
ref=3D"http://apidoc.ez.no/sami/trunk/NS/html/eZ/Publish/API/Repository/Val=
ues/Content/SectionUpdateStruct.html" class=3D"external-link" rel=3D"nofoll=
ow"><code>SectionUpdateStruct</code></a> objects must still be used to crea=
te and update sections.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>assign section to content</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">$sectionService-&gt;assignSection( $contentInfo, $section );</pre>=
=20
</div>
</div>
<p>The actual update operation is done using SectionService::assignSection(=
), with the ContentInfo and the Section as arguments.</p>
<div class=3D"confluence-information-macro confluence-information-macro-not=
e">
<span class=3D"aui-icon aui-icon-small aui-iconfont-warning confluence-info=
rmation-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>SectionService::assignSection() won't return the updated Content, as it =
has no knowledge of those objects. To get the Content with the newly assign=
ed Location, you need to reload the ContentInfo using <a href=3D"http://api=
doc.ez.no/sami/trunk/NS/html/eZ/Publish/API/Repository/ContentService.html#=
method_loadContentInfo" class=3D"external-link" rel=3D"nofollow"><code>Cont=
entService::loadContentInfo()</code></a>. This is also valid for descendant=
s of Content. If you have any stored in your execution state, you need to r=
eload them. Otherwise you would be using outdated Content data.</p>
</div>
</div>
<h2 id=3D"id-5.Otherrecipes-Creatingacontenttype">Creating a content type</=
h2>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<p class=3D"title">Full code</p>
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p><a href=3D"https://github.com/ezsystems/CookbookBundle/blob/master/Comma=
nd/CreateContentTypeCommand.php" class=3D"external-link" rel=3D"nofollow">h=
ttps://github.com/ezsystems/CookbookBundle/blob/master/Command/CreateConten=
tTypeCommand.php</a></p>
</div>
</div>
<p>Creating a <code><a href=3D"http://apidoc.ez.no/sami/trunk/NS/html/eZ/Pu=
blish/API/Repository/Values/ContentType/ContentType.html" class=3D"external=
-link" rel=3D"nofollow">ContentType</a></code> is actually almost more comp=
lex than creating Content. It really isn't as common, and didn't "deserve" =
the same kind of API as Content did.</p>
<p>Let's split the code in three major parts.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">try
{
    $contentTypeGroup =3D $contentTypeService-&gt;loadContentTypeGroupByIde=
ntifier( 'content' );
}
catch ( \eZ\Publish\API\Repository\Exceptions\NotFoundException $e )
{
    $output-&gt;writeln( "content type group with identifier $groupIdentifi=
er not found" );
    return;
}


$contentTypeCreateStruct =3D $contentTypeService-&gt;newContentTypeCreateSt=
ruct( 'mycontenttype' );
$contentTypeCreateStruct-&gt;mainLanguageCode =3D 'eng-GB';
$contentTypeCreateStruct-&gt;nameSchema =3D '&lt;title&gt;';
$contentTypeCreateStruct-&gt;names =3D array(
    'eng-GB' =3D&gt; 'My content type'
);
$contentTypeCreateStruct-&gt;descriptions =3D array(
    'eng-GB' =3D&gt; 'Description for my content type',
);</pre>=20
</div>
</div>
<p>First, we need to load the <code>ContentTypeGroup</code> our <code>Conte=
ntType</code> will be created in. We do this using <a href=3D"http://apidoc=
.ez.no/sami/trunk/NS/html/eZ/Publish/API/Repository/ContentTypeService.html=
#method_loadContentTypeGroupByIdentifier" class=3D"external-link" rel=3D"no=
follow"><code>ContentTypeService::loadContentTypeGroupByIdentifier()</code>=
</a>, which gives us back a <code><a href=3D"http://apidoc.ez.no/sami/trunk=
/NS/html/eZ/Publish/API/Repository/Values/ContentType/ContentTypeGroup.html=
" class=3D"external-link" rel=3D"nofollow">ContentTypeGroup</a></code> obje=
ct. As for content, we then request a <code>ContentTypeCreateStruct</code> =
from the <code>ContentTypeService</code>, using <code><a href=3D"http://api=
doc.ez.no/sami/trunk/NS/html/eZ/Publish/API/Repository/ContentTypeService.h=
tml#method_newContentTypeCreateStruct" class=3D"external-link" rel=3D"nofol=
low">ContentTypeService::newContentTypeCreateStruct()</a></code>, with the =
desired identifier as the argument.&nbsp;</p>
<p>Using the create struct's properties, we can set the type's properties:<=
/p>
<ul>
<li>the main language (<code>mainLanguageCode</code>) for the type is set t=
o eng-GB,</li>
<li>the content name generation pattern (<code>nameSchema</code>) is set to=
 '&lt;title&gt;': content of this type will be named as their 'title' field=
.</li>
<li>the human readable name for our type is set using the <code>names</code=
> property. We give it a hash, indexed by the locale ('eng-GB') the name is=
 set in. This locale must exist in the system.</li>
<li>the same way that we have set the <code>names</code> property, we can s=
et human readable descriptions, again as hashes indexed by locale code.</li=
>
</ul>
<p>The next big part is to add FieldDefinition objects to our ContentType.<=
/p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">// add a TextLine Field with identifier 'title'
$titleFieldCreateStruct =3D $contentTypeService-&gt;newFieldDefinitionCreat=
eStruct( 'title', 'ezstring' );
$titleFieldCreateStruct-&gt;names =3D array( 'eng-GB' =3D&gt; 'Title' );
$titleFieldCreateStruct-&gt;descriptions =3D array( 'eng-GB' =3D&gt; 'The T=
itle' );
$titleFieldCreateStruct-&gt;fieldGroup =3D 'content';
$titleFieldCreateStruct-&gt;position =3D 10;
$titleFieldCreateStruct-&gt;isTranslatable =3D true;
$titleFieldCreateStruct-&gt;isRequired =3D true;
$titleFieldCreateStruct-&gt;isSearchable =3D true;
$contentTypeCreateStruct-&gt;addFieldDefinition( $titleFieldCreateStruct );


// add a TextLine Field body field
$bodyFieldCreateStruct =3D $contentTypeService-&gt;newFieldDefinitionCreate=
Struct( 'body', 'ezstring' );
$bodyFieldCreateStruct-&gt;names =3D array( 'eng-GB' =3D&gt; 'Body' );
$bodyFieldCreateStruct-&gt;descriptions =3D array( 'eng-GB' =3D&gt; 'Descri=
ption for Body' );
$bodyFieldCreateStruct-&gt;fieldGroup =3D 'content';
$bodyFieldCreateStruct-&gt;position =3D 20;
$bodyFieldCreateStruct-&gt;isTranslatable =3D true;
$bodyFieldCreateStruct-&gt;isRequired =3D true;
$bodyFieldCreateStruct-&gt;isSearchable =3D true;
$contentTypeCreateStruct-&gt;addFieldDefinition( $bodyFieldCreateStruct );<=
/pre>=20
</div>
</div>
<p>We need to create a <code>FieldDefinitionCreateStruct</code> object for =
each <code>FieldDefinition</code> our <code>ContentType</code> will be made=
 of. Those objects are obtained using <a href=3D"http://apidoc.ez.no/sami/t=
runk/NS/html/eZ/Publish/API/Repository/ContentTypeService.html#method_newFi=
eldDefinitionCreateStruct" class=3D"external-link" rel=3D"nofollow"><code>C=
ontentTypeService::newFieldDefinitionCreateStruct()</code></a>. This method=
 expects the FieldDefinition identifier and its type as arguments. The iden=
tifiers match the ones from Exponential 4 (<code>ezstring</code> for TextLin=
e, etc).</p>
<p>Each field's properties are set using the create struct's properties:</p=
>
<ul>
<li><code>names</code> and <code>descriptions</code> are set using hashes i=
ndexed by the locale code, and with the name or description as an argument.=
</li>
<li>The <code>fieldGroup</code> is set to 'content'</li>
<li>Fields are ordered using the <code>position</code> property, ordered nu=
merically in ascending order. We set it to an integer.</li>
<li>The translatable, required ans searchable boolean flags are set using t=
heir respective property: <code>isTranslatable</code>, <code>isRequired</co=
de> and <code>isSearchable</code>.</li>
</ul>
<p>Once the properties for each create struct are set, the field is added t=
o the ContentType create struct using <a href=3D"http://apidoc.ez.no/sami/t=
runk/NS/html/eZ/Publish/API/Repository/Values/ContentType/ContentTypeCreate=
Struct.html#method_addFieldDefinition" class=3D"external-link" rel=3D"nofol=
low"><code>ContentTypeCreateStruct::addFieldDefinition()</code></a>.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">try
{
    $contentTypeDraft =3D $contentTypeService-&gt;createContentType( $conte=
ntTypeCreateStruct, array( $contentTypeGroup ) );
    $contentTypeService-&gt;publishContentTypeDraft( $contentTypeDraft );
}
catch ( \eZ\Publish\API\Repository\Exceptions\UnauthorizedException $e )
{
    $output-&gt;writeln( "&lt;error&gt;" . $e-&gt;getMessage() . "&lt;/erro=
r&gt;" );
}
catch ( \eZ\Publish\API\Repository\Exceptions\ForbiddenException $e )
{
    $output-&gt;writeln( "&lt;error&gt;" . $e-&gt;getMessage() . "&lt;/erro=
r&gt;" );
}</pre>=20
</div>
</div>
<p>The last step is the same as for Content: we create a content type draft=
 using <code>ContentTypeService::createContentType()</code>, with the <code=
>ContentTypeCreateStruct</code> and an array of <code>ContentTypeGroup</cod=
e> objects are arguments. We then publish the ContentType draft using <code=
>ContentTypeService::publishContentTypeDraft()</code>.</p>
    </div>
</body>
</html>
------=_Part_4213_417191443.1485861829689--
