Message-ID: <1290706649.3220.1485852427863.JavaMail.confluence@ip-10-127-227-164>
Subject: Exported From Confluence
MIME-Version: 1.0
Content-Type: multipart/related; 
	boundary="----=_Part_3219_1313975419.1485852427863"

------=_Part_3219_1313975419.1485852427863
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Content-Location: file:///C:/exported.html

<html xmlns:o=3D'urn:schemas-microsoft-com:office:office'
      xmlns:w=3D'urn:schemas-microsoft-com:office:word'
      xmlns:v=3D'urn:schemas-microsoft-com:vml'
      xmlns=3D'urn:w3-org-ns:HTML'>
<head>
    <meta http-equiv=3D"Content-Type" content=3D"text/html; charset=3Dutf-8=
">
    <title>How to listen to Core events</title>
    <!--[if gte mso 9]>
    <xml>
        <o:OfficeDocumentSettings>
            <o:TargetScreenSize>1024x640</o:TargetScreenSize>
            <o:PixelsPerInch>72</o:PixelsPerInch>
            <o:AllowPNG/>
        </o:OfficeDocumentSettings>
        <w:WordDocument>
            <w:View>Print</w:View>
            <w:Zoom>90</w:Zoom>
            <w:DoNotOptimizeForBrowser/>
        </w:WordDocument>
    </xml>
    <![endif]-->
    <style>
                <!--
        @page Section1 {
            size: 8.5in 11.0in;
            margin: 1.0in;
            mso-header-margin: .5in;
            mso-footer-margin: .5in;
            mso-paper-source: 0;
        }

        td {
            page-break-inside: avoid;
        }

        tr {
            page-break-after: avoid;
        }

        div.Section1 {
            page: Section1;
        }

        /* Confluence print stylesheet. Common to all themes for print medi=
a */
/* Full of !important until we improve batching for print CSS */

@media print {
    #main {
        padding-bottom: 1em !important; /* The default padding of 6em is to=
o much for printouts */
    }

    body {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        font-size: 10pt;
        line-height: 1.2;
    }

    body, #full-height-container, #main, #page, #content, .has-personal-sid=
ebar #content {
        background: #fff !important;
        color: #000 !important;
        border: 0 !important;
        width: 100% !important;
        height: auto !important;
        min-height: auto !important;
        margin: 0 !important;
        padding: 0 !important;
        display: block !important;
    }

    a, a:link, a:visited, a:focus, a:hover, a:active {
        color: #000;
    }

    #content h1,
    #content h2,
    #content h3,
    #content h4,
    #content h5,
    #content h6 {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        page-break-after: avoid;
    }

    pre {
        font-family: Monaco, "Courier New", monospace;
    }

    #header,
    .aui-header-inner,
    #navigation,
    #sidebar,
    .sidebar,
    #personal-info-sidebar,
    .ia-fixed-sidebar,
    .page-actions,
    .navmenu,
    .ajs-menu-bar,
    .noprint,
    .inline-control-link,
    .inline-control-link a,
    a.show-labels-editor,
    .global-comment-actions,
    .comment-actions,
    .quick-comment-container,
    #addcomment {
        display: none !important;
    }

    .comment .date::before {
        content: none !important; /* remove middot for print view */
    }

    h1.pagetitle img {
        height: auto;
        width: auto;
    }

    .print-only {
        display: block;
    }

    #footer {
        position: relative !important; /* CONF-17506 Place the footer at en=
d of the content */
        margin: 0;
        padding: 0;
        background: none;
        clear: both;
    }

    #poweredby {
        border-top: none;
        background: none;
    }

    #poweredby li.print-only {
        display: list-item;
        font-style: italic;
    }

    #poweredby li.noprint {
        display: none;
    }

    /* no width controls in print */
    .wiki-content .table-wrap,
    .wiki-content p,
    .panel .codeContent,
    .panel .codeContent pre,
    .image-wrap {
        overflow: visible !important;
    }

    /* TODO - should this work? */
    #children-section,
    #comments-section .comment,
    #comments-section .comment .comment-body,
    #comments-section .comment .comment-content,
    #comments-section .comment p {
        page-break-inside: avoid;
    }

    #page-children a {
        text-decoration: none;
    }

    /**
     hide twixies

     the specificity here is a hack because print styles
     are getting loaded before the base styles. */
    #comments-section.pageSection .section-header,
    #comments-section.pageSection .section-title,
    #children-section.pageSection .section-header,
    #children-section.pageSection .section-title,
    .children-show-hide {
        padding-left: 0;
        margin-left: 0;
    }

    .children-show-hide.icon {
        display: none;
    }

    /* personal sidebar */
    .has-personal-sidebar #content {
        margin-right: 0px;
    }

    .has-personal-sidebar #content .pageSection {
        margin-right: 0px;
    }
}
-->
    </style>
</head>
<body>
    <h1>How to listen to Core events</h1>
    <div class=3D"Section1">
        <p><style type=3D"text/css">/*<![CDATA[*/
div.rbtoc1485852427830 {padding: 0px;}
div.rbtoc1485852427830 ul {list-style: disc;margin-left: 0px;}
div.rbtoc1485852427830 li {margin-left: 0px;padding-left: 0px;}

/*]]>*/</style></p>
<div class=3D"toc-macro rbtoc1485852427830">=20
<ul class=3D"toc-indentation">=20
<li><a href=3D"#HowtolistentoCoreevents-Description">Description</a></li>=
=20
<li><a href=3D"#HowtolistentoCoreevents-RegisteringaSlotforagivenSignal">Re=
gistering a Slot for a given Signal</a></li>=20
<li><a href=3D"#HowtolistentoCoreevents-UsingabasicSymfonyeventlistener">Us=
ing a basic Symfony event listener</a>=20
<ul class=3D"toc-indentation">=20
<li><a href=3D"#HowtolistentoCoreevents-Simpleexample">Simple example</a>=
=20
<ul class=3D"toc-indentation">=20
<li><a href=3D"#HowtolistentoCoreevents-Relatedtopics:">Related topics:</a>=
</li>=20
</ul> </li>=20
</ul> </li>=20
</ul>=20
</div>
<p></p>
<h2 id=3D"HowtolistentoCoreevents-Description">Description</h2>
<p>When you interact with the Public API, and with the content Repository i=
n particular, <strong>Signals</strong> may be sent out, allowing you to rea=
ct on actions triggered by the Repository. Those signals can be received by=
 dedicated services called <strong>Slots</strong>.</p>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>To learn more about SignalSlot in eZ Platform, please refer to the <a hr=
ef=3D"/display/TECHDOC/Signal-Slot">dedicated documentation page</a>.</p>
<p><a href=3D"/display/TECHDOC/Signals+reference">Signals reference</a></p>
</div>
</div>
<p>This recipe will describe how to register a Slot for a dedicated Signal.=
</p>
<h2 id=3D"HowtolistentoCoreevents-RegisteringaSlotforagivenSignal">Register=
ing a Slot for a given Signal</h2>
<p>As described in the <a href=3D"/display/TECHDOC/Signal-Slot">SignalSlot =
documentation</a>, a Slot is roughly like an event listener and must extend=
&nbsp;<code>eZ\Publish\Core\SignalSlot\Slot</code>.</p>
<p>A typical implementation is the following:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>OnPublishSlot</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">namespace Acme\TestBundle\Slot;
&nbsp;
use eZ\Publish\Core\SignalSlot\Slot as BaseSlot;
use eZ\Publish\Core\SignalSlot\Signal;
use eZ\Publish\API\Repository\ContentService;
=20
class OnPublishSlot extends BaseSlot
{
    /**
     * @var \eZ\Publish\API\Repository\ContentService
     */
    private $contentService;

    public function __construct( ContentService $contentService )
    {
        $this-&gt;contentService =3D $contentService;
    }
=20
    public function receive( Signal $signal )
    {
        if ( !$signal instanceof Signal\ContentService\PublishVersionSignal=
 )
        {
            return;
        }

        // Load published content
        $content =3D $this-&gt;contentService-&gt;loadContent( $signal-&gt;=
contentId, null, $signal-&gt;versionNo );
        // Do stuff with it...
    }
}</pre>=20
</div>
</div>
<p><code>OnPublishSlot</code> now needs to be registered as a service in th=
e ServiceContainer and identified as a valid Slot:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>services.yml (in your bundle)</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">parameters:
    my.onpublish_slot.class: Acme\TestBundle\Slot\OnPublishSlot
&nbsp;
services:
    my.onpublish_slot:
        class: %my.onpublish_slot.class%
        arguments: [@exponential.api.service.content]
        tags:
            - { name: exponential.api.slot, signal: ContentService\PublishVer=
sionSignal }</pre>=20
</div>
</div>
<p>Service tag <strong><code>exponential.api.slot</code></strong> identifies =
your service as a valid Slot. The signal part (mandatory) says that this sl=
ot is listening to <strong><code>ContentService\PublishVersionSignal</code>=
</strong> (shortcut for <code>\eZ\Publish\Core\SignalSlot\Signal\ContentSer=
vice\PublishVersionSignal</code>).</p>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>Internal signals emitted by Repository services are always relative to <=
code>eZ\Publish\Core\SignalSlot\Signal</code> namespace.</p>
<p>Hence <code>ContentService\PublishVersionSignal</code> means <code>eZ\Pu=
blish\Core\SignalSlot\Signal\ContentService\PublishVersionSignal</code>.</p=
>
</div>
</div>
<div class=3D"confluence-information-macro confluence-information-macro-tip=
">
<p class=3D"title">Tip</p>
<span class=3D"aui-icon aui-icon-small aui-iconfont-approve confluence-info=
rmation-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>You can register a slot for any kind of signal by setting <code>signal</=
code> to <code><strong>*</strong></code> in the service tag.</p>
</div>
</div>
<h2 id=3D"HowtolistentoCoreevents-UsingabasicSymfonyeventlistener">Using a =
basic Symfony event listener</h2>
<p>eZ Platform comes with a generic slot that converts signals (including o=
nes defined by user code) to regular event objects and exposes them via the=
 EventDispatcher. This makes it possible to implement a simple event listen=
er/subscriber if you're more comfortable with this approach.</p>
<p>All you need to do is to implement an event listener or subscriber and r=
egister it.</p>
<h3 id=3D"HowtolistentoCoreevents-Simpleexample">Simple example</h3>
<p>This very simple example will just log the received signal.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>services.yml (in your bundle)</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">parameters:
    my.signal_listener.class: Acme\TestBundle\EventListener\SignalListener
&nbsp;
services:
    my.signal_listener:
        class: %my.signal_listener.class%
        arguments: [@logger]
        tags:
            - { name: kernel.event_subscriber }</pre>=20
</div>
</div>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">&lt;?php
namespace Acme\TestBundle\EventListener;

use eZ\Publish\Core\MVC\Symfony\Event\SignalEvent;
use eZ\Publish\Core\MVC\Symfony\MVCEvents;
use Psr\Log\LoggerInterface;
use Symfony\Component\EventDispatcher\EventSubscriberInterface;

class SignalListener implements EventSubscriberInterface
{
    /**
     * @var \Psr\Log\LoggerInterface
     */
    private $logger;

    public function __construct( LoggerInterface $logger )
    {
        $this-&gt;logger =3D $logger;
    }

    public function onAPISignal( SignalEvent $event )
    {
        $signal =3D $event-&gt;getSignal();
        // You may want to check the signal type here to react accordingly
        $this-&gt;logger-&gt;debug( 'Received Signal: ' . print_r( $signal,=
 true ) );
    }

    public static function getSubscribedEvents()
    {
        return array(
            MVCEvents::API_SIGNAL =3D&gt; 'onAPISignal'
        );
    }
}</pre>=20
</div>
</div>
<p>&nbsp;</p>
<h5 id=3D"HowtolistentoCoreevents-Relatedtopics:">Related topics:</h5>
<ul>
<li><a href=3D"/display/TECHDOC/Events">Events</a></li>
<li><a href=3D"/display/TECHDOC/Signal-Slot">Signal-Slot</a></li>
<li><a href=3D"/display/TECHDOC/Signals+reference">Signals reference</a></l=
i>
</ul>
    </div>
</body>
</html>
------=_Part_3219_1313975419.1485852427863--
