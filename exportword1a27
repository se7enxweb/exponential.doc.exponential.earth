Message-ID: <670827204.2742.1485850606311.JavaMail.confluence@ip-10-127-227-164>
Subject: Exported From Confluence
MIME-Version: 1.0
Content-Type: multipart/related; 
	boundary="----=_Part_2741_1338822572.1485850606311"

------=_Part_2741_1338822572.1485850606311
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Content-Location: file:///C:/exported.html

<html xmlns:o=3D'urn:schemas-microsoft-com:office:office'
      xmlns:w=3D'urn:schemas-microsoft-com:office:word'
      xmlns:v=3D'urn:schemas-microsoft-com:vml'
      xmlns=3D'urn:w3-org-ns:HTML'>
<head>
    <meta http-equiv=3D"Content-Type" content=3D"text/html; charset=3Dutf-8=
">
    <title>Content Rendering</title>
    <!--[if gte mso 9]>
    <xml>
        <o:OfficeDocumentSettings>
            <o:TargetScreenSize>1024x640</o:TargetScreenSize>
            <o:PixelsPerInch>72</o:PixelsPerInch>
            <o:AllowPNG/>
        </o:OfficeDocumentSettings>
        <w:WordDocument>
            <w:View>Print</w:View>
            <w:Zoom>90</w:Zoom>
            <w:DoNotOptimizeForBrowser/>
        </w:WordDocument>
    </xml>
    <![endif]-->
    <style>
                <!--
        @page Section1 {
            size: 8.5in 11.0in;
            margin: 1.0in;
            mso-header-margin: .5in;
            mso-footer-margin: .5in;
            mso-paper-source: 0;
        }

        td {
            page-break-inside: avoid;
        }

        tr {
            page-break-after: avoid;
        }

        div.Section1 {
            page: Section1;
        }

        /* Confluence print stylesheet. Common to all themes for print medi=
a */
/* Full of !important until we improve batching for print CSS */

@media print {
    #main {
        padding-bottom: 1em !important; /* The default padding of 6em is to=
o much for printouts */
    }

    body {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        font-size: 10pt;
        line-height: 1.2;
    }

    body, #full-height-container, #main, #page, #content, .has-personal-sid=
ebar #content {
        background: #fff !important;
        color: #000 !important;
        border: 0 !important;
        width: 100% !important;
        height: auto !important;
        min-height: auto !important;
        margin: 0 !important;
        padding: 0 !important;
        display: block !important;
    }

    a, a:link, a:visited, a:focus, a:hover, a:active {
        color: #000;
    }

    #content h1,
    #content h2,
    #content h3,
    #content h4,
    #content h5,
    #content h6 {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        page-break-after: avoid;
    }

    pre {
        font-family: Monaco, "Courier New", monospace;
    }

    #header,
    .aui-header-inner,
    #navigation,
    #sidebar,
    .sidebar,
    #personal-info-sidebar,
    .ia-fixed-sidebar,
    .page-actions,
    .navmenu,
    .ajs-menu-bar,
    .noprint,
    .inline-control-link,
    .inline-control-link a,
    a.show-labels-editor,
    .global-comment-actions,
    .comment-actions,
    .quick-comment-container,
    #addcomment {
        display: none !important;
    }

    .comment .date::before {
        content: none !important; /* remove middot for print view */
    }

    h1.pagetitle img {
        height: auto;
        width: auto;
    }

    .print-only {
        display: block;
    }

    #footer {
        position: relative !important; /* CONF-17506 Place the footer at en=
d of the content */
        margin: 0;
        padding: 0;
        background: none;
        clear: both;
    }

    #poweredby {
        border-top: none;
        background: none;
    }

    #poweredby li.print-only {
        display: list-item;
        font-style: italic;
    }

    #poweredby li.noprint {
        display: none;
    }

    /* no width controls in print */
    .wiki-content .table-wrap,
    .wiki-content p,
    .panel .codeContent,
    .panel .codeContent pre,
    .image-wrap {
        overflow: visible !important;
    }

    /* TODO - should this work? */
    #children-section,
    #comments-section .comment,
    #comments-section .comment .comment-body,
    #comments-section .comment .comment-content,
    #comments-section .comment p {
        page-break-inside: avoid;
    }

    #page-children a {
        text-decoration: none;
    }

    /**
     hide twixies

     the specificity here is a hack because print styles
     are getting loaded before the base styles. */
    #comments-section.pageSection .section-header,
    #comments-section.pageSection .section-title,
    #children-section.pageSection .section-header,
    #children-section.pageSection .section-title,
    .children-show-hide {
        padding-left: 0;
        margin-left: 0;
    }

    .children-show-hide.icon {
        display: none;
    }

    /* personal sidebar */
    .has-personal-sidebar #content {
        margin-right: 0px;
    }

    .has-personal-sidebar #content .pageSection {
        margin-right: 0px;
    }
}
-->
    </style>
</head>
<body>
    <h1>Content Rendering</h1>
    <div class=3D"Section1">
        <div class=3D"contentLayout2">=20
<div class=3D"columnLayout two-right-sidebar" data-layout=3D"two-right-side=
bar">=20
<div class=3D"cell normal" data-type=3D"normal">=20
<div class=3D"innerCell">=20
<h1 id=3D"ContentRendering-Introduction">Introduction</h1>
<h2 id=3D"ContentRendering-TheViewController">The ViewController</h2>
<p class=3D"confluence-link">eZ Platform comes with a native controller to =
display your content, known as the <strong> <code>ViewController</code> </s=
trong>. It is called each time you try to reach a Content item from its <st=
rong>Url Alias</strong> (human readable,&nbsp;translatable&nbsp;URI generat=
ed for any content based on URL patterns defined per Content Type) and is a=
ble to render any content previously edited in the admin interface or via t=
he <a href=3D"/display/DEVELOPER/Public+API+Guide">Public API Guide</a>.</p=
>
<p>It can also be called straight by its direct URI:&nbsp;</p>
<p><code>/view/content/&lt;contentId&gt;/full/true/&lt;locationId&gt;</code=
></p>
<p><code> /view/content/&lt;contentId&gt;</code></p>
<p>A Content item can also have different <strong>view types</strong> (full=
 page, abstract in a list, block in a landing page, etc.). By default the v=
iew type is <strong>full</strong> (for full page), but it can be anything (=
<em>line</em>, <em>block, etc</em>.).</p>
<div class=3D"confluence-information-macro confluence-information-macro-war=
ning">
<p class=3D"title">Important note regarding visibility</p>
<span class=3D"aui-icon aui-icon-small aui-iconfont-error confluence-inform=
ation-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>The Location visibility flag, which you can change by hiding/revealing i=
n the Platform UI, is not permission-based and thus acts as a simple potent=
ial filter. <strong>It is not meant to restrict access to content</strong>.=
</p>
<p>If you need to restrict access to a given Content item, use <strong>Sect=
ions </strong>or<strong> Object states</strong>, which are permission-based=
.</p>
</div>
</div>
<h1 id=3D"ContentRendering-Configuration">Configuration</h1>
<h2 id=3D"ContentRendering-Viewproviderconfiguration">View provider configu=
ration</h2>
<p>The <strong>configured ViewProvider</strong> allows you to configure tem=
plate selection when using the <code>ViewController</code>, either directly=
 from a URL or via a sub-request.</p>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<p class=3D"title">Exponential 4.x terminology</p>
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>In Exponential 4.x, it was known as <strong>template override system <em>=
by configuration</em> </strong> (<code>override.ini</code>).<br>However thi=
s only reflects old overrides for <code>node/view/*.tpl</code> and <code>co=
ntent/view/*.tpl</code>.</p>
</div>
</div>
<h3 id=3D"ContentRendering-Principle">Principle</h3>
<p>The <strong>configured ViewProvider</strong> takes its configuration fro=
m your siteaccess in the&nbsp;<code> <strong>content_view</strong> </code> =
<span> section</span>. This configuration is a hash built in the following =
way:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>app/config/ezplatform.yml</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: bash; gutter: false; theme: Eclipse" style=3D"font-siz=
e:12px;">exponential:
    system:
        # Can be a valid siteaccess, siteaccess group or even "global"
        front_siteaccess:
            # Configuring the LocationViewProvider
            content_view:
                # The view type (full/line are standard, but you can use cu=
stom ones)
                full:
                   &nbsp;# A simple unique key for your matching ruleset
                    folderRuleset:
                        # The template identifier to load, following the Sy=
mfony bundle notation for templates
                        # See http://symfony.com/doc/current/book/controlle=
r.html#rendering-templates
                        template: eZDemoBundle:full:small_folder.html.twig
                        # Hash of matchers to use, with their corresponding=
 values to match against
                        match:
                            # Key is the matcher "identifier" (class name o=
r service identifier)
                            # Value will be passed to the matcher's setMatc=
hingConfig() method.
                            Identifier\ContentType: [small_folder, folder]<=
/pre>=20
</div>
</div>
<div class=3D"confluence-information-macro confluence-information-macro-not=
e">
<p class=3D"title">Important note about template matching</p>
<span class=3D"aui-icon aui-icon-small aui-iconfont-warning confluence-info=
rmation-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p><strong>Template matching will NOT work if your content contains a Field=
 Type that is not supported by the repository</strong>. It can be the case =
when you are in the process of a migration from Exponential 4.x, where custo=
m datatypes have been developed.</p>
<p>In this case the repository will throw an exception, which is caught in =
the <code>ViewController</code>, <span>and <em>if</em> you are using Legacy=
Bridge it will end up doing a </span><a href=3D"/display/EZP/Legacy+templat=
e+fallback"><strong><span class=3D"confluence-link">fallback to legacy kern=
el</span></strong></a>.</p>
<p>The list of Field Types supported out of the box <a href=3D"/display/DEV=
ELOPER/Field+Types+reference">is available here</a>.</p>
</div>
</div>
<div class=3D"confluence-information-macro confluence-information-macro-tip=
">
<p class=3D"title">Tip</p>
<span class=3D"aui-icon aui-icon-small aui-iconfont-approve confluence-info=
rmation-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>You can define your template selection rules in a different configuratio=
n file. <span class=3D"confluence-link"> <a href=3D"/display/DEVELOPER/Impo=
rting+settings+from+a+bundle">Read the cookbook recipe to learn more about =
it</a> </span>.</p>
<p><span>You can also </span> <span class=3D"confluence-link"> <span> <span=
 class=3D"confluence-link"><a href=3D"#ContentRendering-Customcontrollers">=
use your own custom controller to render a content/location</a></span></spa=
n></span><span>.</span></p>
</div>
</div>
<h3 id=3D"ContentRendering-Aboutlocation_view&amp;content_view">About&nbsp;=
<code>location_view &amp; content_view</code></h3>
<p>Until Exponential Platform 5.4, the main view action was <code>location_v=
iew</code>. This is deprecated since eZ Platform 15.12 (1.0). Only&nbsp;<co=
de>content_view</code> should be used to view content, with a location as a=
n option.</p>
<p>Existing <code>location_view</code> rules will be, <em>when possible</em=
>, converted transparently to <code>content_view</code>, with a deprecation=
 notice. However, it is not possible to do so when the rule uses a custom c=
ontroller.<br>In any case, <code>location_view</code> rules should be conve=
rted to <code>content_view</code> ones, as <code>location_view</code> will =
be removed in the next kernel major version.</p>
<h3 id=3D"ContentRendering-Matchers">Matchers</h3>
<p>To be able to select the right templates against conditions, the view pr=
ovider uses matcher objects, all implementing&nbsp;<code>eZ\Publish\Core\MV=
C\Symfony\View\ContentViewProvider\Configured\Matcher</code> interface.</p>
<h4 id=3D"ContentRendering-Matcheridentifier">Matcher identifier</h4>
<p>The matcher identifier can comply to 3 different formats:</p>
<ol>
<li><strong>Relative qualified class name</strong> (e.g. <code>Identifier\C=
ontentType</code>). This is the most common case and used for native matche=
rs. It will then be relative to&nbsp;<code><span class=3D"inline-comment-ma=
rker" data-ref=3D"10def47d-9659-4d5d-a6fe-992a6f1a1398">eZ\Publish\Core\MVC=
\Symfony\Matcher\ContentBased</span></code><span class=3D"inline-comment-ma=
rker" data-ref=3D"10def47d-9659-4d5d-a6fe-992a6f1a1398">.</span></li>
<li><strong>Full qualified class name</strong> (e.g. <code>\Foo\Bar\MyMatch=
er</code>). This is a way to specify a <strong>custom matcher</strong> that=
 doesn't need specific dependency injection. Please note that it <strong>mu=
st</strong> start with a <code>\</code>.</li>
<li><strong>Service identifier</strong>, as defined in Symfony service cont=
ainer. This is the way to specify a more <strong>complex custom matcher</st=
rong> that has dependencies.</li>
</ol>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<p class=3D"title">Injecting the Repository</p>
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>If your matcher needs the repository, simply make it implement <code>eZ\=
Publish\Core\MVC\RepositoryAwareInterface</code> or extend the <code>eZ\Pub=
lish\Core\MVC\RepositoryAware</code> abstract class. The repository will th=
en be correctly injected before matching.</p>
</div>
</div>
<h4 id=3D"ContentRendering-Matchervalue">Matcher value</h4>
<p>The value associated to the matcher is being passed to its&nbsp;<code>se=
tMatchingConfig()</code>&nbsp;method and can be anything supported by the m=
atcher.</p>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
In the case of native matchers, they support both=20
<strong>scalar values</strong> or=20
<strong>arrays of scalar values</strong>.=20
<br>Passing an array amounts to applying a logical OR.
</div>
</div>
<h4 id=3D"ContentRendering-Combiningmatchers">Combining matchers</h4>
<p>It is possible to combine matchers to add additional constraints for mat=
ching a template:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;"># ...
match:
    Identifier\ContentType: [small_folder, folder]
    Identifier\ParentContentType: frontpage</pre>=20
</div>
</div>
<p>The example above can be translated as "Match any content which <strong>=
ContentType</strong> identifier is <strong> <em>small_folder</em> OR <em>fo=
lder</em> </strong>, <strong>AND</strong> having <em>frontpage</em> as <str=
ong>ParentContentType</strong> identifier".</p>
<h3 id=3D"ContentRendering-Available_matchersAvailablematchers"><span class=
=3D"confluence-anchor-link" id=3D"ContentRendering-Available_matchers"></sp=
an>Available matchers</h3>
<p>The following table presents all native matchers.</p>
<div class=3D"table-wrap">
<table class=3D"confluenceTable">
<tbody>
<tr>
<th class=3D"confluenceTh">Identifier</th>
<th class=3D"confluenceTh">Description</th>
</tr>
<tr>
<td colspan=3D"1" class=3D"confluenceTd"><code>Id\Content</code></td>
<td colspan=3D"1" class=3D"confluenceTd">Matches the ID number of the Conte=
nt item</td>
</tr>
<tr>
<td colspan=3D"1" class=3D"confluenceTd"><code>Id\ContentType</code></td>
<td colspan=3D"1" class=3D"confluenceTd">Matches the ID number of the Conte=
nt Type that the Content item is an instance of</td>
</tr>
<tr>
<td colspan=3D"1" class=3D"confluenceTd"><code>Id\ContentTypeGroup</code></=
td>
<td colspan=3D"1" class=3D"confluenceTd"><span>Matches the ID number of the=
 group containing the Content Type that the Content item is an instance of<=
br> </span></td>
</tr>
<tr>
<td class=3D"confluenceTd"><code>Id\Location</code></td>
<td class=3D"confluenceTd">Matches the ID number of a Location.<br> <em>In =
the case of a Content item, matched against the main location.</em></td>
</tr>
<tr>
<td colspan=3D"1" class=3D"confluenceTd"><code>Id\ParentContentType</code><=
/td>
<td colspan=3D"1" class=3D"confluenceTd">Matches the ID number of the paren=
t Content Type.<br> <em>In the case of a Content item, matched against the =
main location.</em></td>
</tr>
<tr>
<td colspan=3D"1" class=3D"confluenceTd"><code>Id\ParentLocation</code></td=
>
<td colspan=3D"1" class=3D"confluenceTd"><p>Matches the ID number of the pa=
rent Location.<br> <em>In the case of a Content item, matched against the m=
ain location.</em></p></td>
</tr>
<tr>
<td class=3D"confluenceTd"><code>Id\Remote</code></td>
<td class=3D"confluenceTd">Matches the remoteId of either content or Locati=
on, depending on the object matched.</td>
</tr>
<tr>
<td colspan=3D"1" class=3D"confluenceTd"><code>Id\Section</code></td>
<td colspan=3D"1" class=3D"confluenceTd">Matches the ID number of the Secti=
on that the Content item belongs to.</td>
</tr>
<tr>
<td colspan=3D"1" class=3D"confluenceTd"><code>Id\State</code></td>
<td colspan=3D"1" class=3D"confluenceTd"><em>Not supported yet.</em></td>
</tr>
<tr>
<td colspan=3D"1" class=3D"confluenceTd"><code>Identifier\ContentType</code=
></td>
<td colspan=3D"1" class=3D"confluenceTd"><span>Matches the identifier of th=
e Content Type that the Content item is an instance of.</span></td>
</tr>
<tr>
<td colspan=3D"1" class=3D"confluenceTd"><code>Identifier\ParentContentType=
</code></td>
<td colspan=3D"1" class=3D"confluenceTd"><p><span>Matches the identifier of=
 the parent Content Type.<br> <em>In the case of a Content item, matched ag=
ainst the main Location.</em>&nbsp;</span></p></td>
</tr>
<tr>
<td colspan=3D"1" class=3D"confluenceTd"><code>Identifier\Section</code></t=
d>
<td colspan=3D"1" class=3D"confluenceTd">Matches the identifier of the Sect=
ion that the Content item belongs to.</td>
</tr>
<tr>
<td colspan=3D"1" class=3D"confluenceTd"><code>Identifier\State</code></td>
<td colspan=3D"1" class=3D"confluenceTd"><em>Not supported yet.</em></td>
</tr>
<tr>
<td colspan=3D"1" class=3D"confluenceTd"><code>Depth</code></td>
<td colspan=3D"1" class=3D"confluenceTd"><span>Matches the depth of the Loc=
ation. The depth of a top level Location is 1.</span></td>
</tr>
<tr>
<td colspan=3D"1" class=3D"confluenceTd"><code>UrlAlias</code></td>
<td colspan=3D"1" class=3D"confluenceTd"><p><span>Matches the virtual URL o=
f the Location (i.e. <code>/My/Content-Uri</code>).</span></p><p><span> <st=
rong>Important:&nbsp;Matches when the UrlAlias of the location <u>starts</u=
> with the value passed.</strong> <br> <em>Not supported for Content (aka c=
ontent_view).</em>&nbsp;</span></p></td>
</tr>
</tbody>
</table>
</div>
<h2 id=3D"ContentRendering-Defaultviewtemplates"><span class=3D"confluence-=
link">Default view templates</span></h2>
<p><span class=3D"confluence-link">Content view</span> uses default templat=
es to render content unless custom view rules are used.</p>
<p>Those templates can be customized by means of container- and siteaccess-=
aware parameters.</p>
<h3 id=3D"ContentRendering-Overridingthedefaulttemplateforcommonviewtypes">=
Overriding the default template for common view types</h3>
<p>Templates for the most common view types (content/full, line, embed, or =
block) can be customized by setting one the&nbsp;<code>ezplatform.default.c=
ontent_view_templates</code> variables:</p>
<div class=3D"table-wrap">
<table class=3D"confluenceTable">
<tbody>
<tr>
<th colspan=3D"1" class=3D"confluenceTh">Controller</th>
<th colspan=3D"1" class=3D"confluenceTh">ViewType</th>
<th class=3D"confluenceTh">Parameter</th>
<th class=3D"confluenceTh">Default value</th>
</tr>
<tr>
<td colspan=3D"1" class=3D"confluenceTd"><code>ez_content:viewAction</code>=
</td>
<td colspan=3D"1" class=3D"confluenceTd"><code>full</code></td>
<td class=3D"confluenceTd"><code>ezplatform.default_view_templates.content.=
full</code></td>
<td class=3D"confluenceTd"><code>"EzPublishCoreBundle:default:content/full.=
html.twig"</code></td>
</tr>
<tr>
<td colspan=3D"1" class=3D"confluenceTd"><code> <span>ez_content:viewAction=
</span> </code></td>
<td colspan=3D"1" class=3D"confluenceTd"><code>line</code></td>
<td class=3D"confluenceTd"><code>ezplatform.default_view_templates.content.=
line</code></td>
<td class=3D"confluenceTd"><code>"EzPublishCoreBundle:default:content/line.=
html.twig"</code></td>
</tr>
<tr>
<td colspan=3D"1" class=3D"confluenceTd"><code> <span>ez_content:viewAction=
</span> </code></td>
<td colspan=3D"1" class=3D"confluenceTd"><code>embed</code></td>
<td colspan=3D"1" class=3D"confluenceTd"><code>ezplatform.default_view_temp=
lates.content.embed</code></td>
<td colspan=3D"1" class=3D"confluenceTd"><code>"EzPublishCoreBundle:default=
:content/embed.html.twig"</code></td>
</tr>
<tr>
<td colspan=3D"1" class=3D"confluenceTd"><code>ez_page:viewAction</code></t=
d>
<td colspan=3D"1" class=3D"confluenceTd"><code>n/a</code></td>
<td colspan=3D"1" class=3D"confluenceTd"><code>ezplatform.default_view_temp=
lates.block</code></td>
<td colspan=3D"1" class=3D"confluenceTd"><code>"EzPublishCoreBundle:default=
:block/block.html.twig"</code></td>
</tr>
</tbody>
</table>
</div>
<h4 id=3D"ContentRendering-Example">Example</h4>
<p>Add this configuration to <code>app/config/config.yml</code> to use <cod=
e>app/Resources/content/view/full.html.twig</code> as the default template =
when viewing Content with the&nbsp;<code>full</code> view type:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">parameters:
    ezplatform.default_view_templates.content.full: "content/view/full.html=
.twig"</pre>=20
</div>
</div>
<h3 id=3D"ContentRendering-Customizingthedefaultcontroller">Customizing the=
 default controller</h3>
<p>The controller used to render content by default can also be changed. Th=
e&nbsp;<code>ezsettings.default.content_view_defaults</code> container para=
meter contains a hash that defines how content is rendered by default. It c=
ontains a set of classic <a href=3D"https://github.com/ezsystems/exponential-=
kernel/blob/v6.0.0/eZ/Bundle/EzPublishCoreBundle/Resources/config/default_s=
ettings.yml#L21-L33" class=3D"external-link" rel=3D"nofollow">content view =
rules for the common view types</a>. This hash can be redefined to whatever=
 suits your requirements, including custom controllers, or even matchers.</=
p>
<h1 id=3D"ContentRendering-Usage">Usage</h1>
<h2 id=3D"ContentRendering-Viewselection">View selection</h2>
<p>To display a Content item, the ViewController uses a view manager which =
selects the appropriate template depending on matching rules.</p>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
For more information about the=20
<strong>view provider configuration</strong>,=20
<a href=3D"#ContentRendering-Viewproviderconfiguration">please <span class=
=3D"confluence-link">refer to the dedicated section</span> </a>=20
<span class=3D"confluence-link">&nbsp;</span>.
</div>
</div>
<div class=3D"confluence-information-macro confluence-information-macro-tip=
">
<span class=3D"aui-icon aui-icon-small aui-iconfont-approve confluence-info=
rmation-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>You can also <span class=3D"confluence-link"> <span class=3D"confluence-=
link"><a href=3D"#ContentRendering-Customcontrollers">use your own custom c=
ontroller to render a content item/location</a></span></span>.</p>
</div>
</div>
<h2 id=3D"ContentRendering-Contentviewtemplates">Content view templates</h2=
>
<p>A content view template is like any other template, with several specifi=
c aspects.</p>
<h3 id=3D"ContentRendering-AvailablevariablesAvailablevariables"><span clas=
s=3D"confluence-anchor-link" id=3D"ContentRendering-Availablevariables"></s=
pan>Available variables</h3>
<div class=3D"table-wrap">
<table class=3D"confluenceTable">
<tbody>
<tr>
<th class=3D"confluenceTh">Variable name</th>
<th class=3D"confluenceTh">Type</th>
<th class=3D"confluenceTh">Description</th>
</tr>
<tr>
<td class=3D"confluenceTd"><strong> <code>location</code> </strong></td>
<td class=3D"confluenceTd"><a href=3D"https://github.com/ezsystems/ezp-next=
/blob/master/eZ/Publish/Core/Repository/Values/Content/Location.php" class=
=3D"external-link" rel=3D"nofollow">eZ\Publish\Core\Repository\Values\Conte=
nt\Location</a></td>
<td class=3D"confluenceTd">The Location object. Contains meta information o=
n the content (<a href=3D"https://github.com/ezsystems/ezp-next/blob/master=
/eZ/Publish/Core/Repository/Values/Content/ContentInfo.php" class=3D"extern=
al-link" rel=3D"nofollow">ContentInfo</a>)<br>(only when accessing a Locati=
on)&nbsp;</td>
</tr>
<tr>
<td colspan=3D"1" class=3D"confluenceTd"><code> <strong>content</strong> </=
code></td>
<td colspan=3D"1" class=3D"confluenceTd"><a href=3D"https://github.com/ezsy=
stems/ezp-next/blob/master/eZ/Publish/Core/Repository/Values/Content/Conten=
t.php" class=3D"external-link" rel=3D"nofollow">eZ\Publish\Core\Repository\=
Values\Content\Content</a></td>
<td colspan=3D"1" class=3D"confluenceTd">The Content item, containing all F=
ields and version information (<a href=3D"https://github.com/ezsystems/ezp-=
next/blob/master/eZ/Publish/Core/Repository/Values/Content/VersionInfo.php"=
 class=3D"external-link" rel=3D"nofollow">VersionInfo</a>)</td>
</tr>
<tr>
<td colspan=3D"1" class=3D"confluenceTd"><code> <strong>noLayout</strong> <=
/code></td>
<td colspan=3D"1" class=3D"confluenceTd">Boolean</td>
<td colspan=3D"1" class=3D"confluenceTd">If true, indicates if the Content =
item/Location is to be displayed without any pagelayout (i.e. AJAX, sub-req=
uests, etc.).<br>It's generally <code>false</code> when displaying a Conten=
t item in view type <strong>full</strong>.</td>
</tr>
<tr>
<td colspan=3D"1" class=3D"confluenceTd"><code> <strong>viewBaseLayout</str=
ong> </code></td>
<td colspan=3D"1" class=3D"confluenceTd">String</td>
<td colspan=3D"1" class=3D"confluenceTd">The base layout template to use wh=
en the view is requested to be generated outside of the pagelayout (when <c=
ode>noLayout</code> is true).</td>
</tr>
</tbody>
</table>
</div>
<h3 id=3D"ContentRendering-Templateinheritanceandsub-requests">Template inh=
eritance and sub-requests</h3>
<p>Like any template, a content view template can use <a href=3D"http://sym=
fony.com/doc/current/book/templating.html#template-inheritance-and-layouts"=
 class=3D"external-link" rel=3D"nofollow">template inheritance</a>.&nbsp;Ho=
wever keep in mind that your content may be also requested via <a href=3D"h=
ttp://symfony.com/doc/current/book/templating.html#embedding-controllers" c=
lass=3D"external-link" rel=3D"nofollow">sub-requests</a> (see below how to =
render embedded content objects), in which case you probably don't want the=
 global layout to be used.</p>
<p>If you use different templates for embedded content views, this should n=
ot be a problem. If you'd rather use the same template, you can use an extr=
a <code>noLayout</code>&nbsp;view parameter for the sub-request, and condit=
ionally extend an empty pagelayout:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">{% extends noLayout ? viewbaseLayout : "AcmeDemoBundle::pagelayout.=
html.twig" %}

{% block content %}
...
{% endblock %}</pre>=20
</div>
</div>
<h3 id=3D"ContentRendering-RenderingContentitem'sFields"><span style=3D"col=
or: rgb(0,98,147);">Rendering Content item's Fields</span></h3>
<p>As stated above, a view template receives the requested Content item, ho=
lding all Fields.</p>
<p>In order to display the Fields' value the way you want, you can either m=
anipulate the Field Value object itself, or use a custom template.</p>
<h4 id=3D"ContentRendering-GettingrawFieldvalue">Getting raw Field value</h=
4>
<p>Having access to the Content item in the template, you can use <a href=
=3D"https://github.com/ezsystems/exponential-kernel/blob/master/eZ/Publish/Co=
re/Repository/Values/Content/Content.php" class=3D"external-link" rel=3D"no=
follow">its public methods</a> to access all the information you need. You =
can also use the&nbsp;<strong>ez_field_value</strong>&nbsp;helper to get th=
e <span class=3D"confluence-link"> <a href=3D"/display/DEVELOPER/Field+Type=
s+reference">field types reference</a> </span>. It will return the correct =
language if there are several, based on language priorities.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">{# With the following, myFieldValue will be in the content's main l=
anguage, regardless of the current language #}
{% set myFieldValue =3D content.getFieldValue( 'some_field_identifier' ) %}
&nbsp;
{# Here myTranslatedFieldValue will be in the current language if a transla=
tion is available. If not, the content's main language will be used #}
{% set myTranslatedFieldValue =3D ez_field_value( content, 'some_field_iden=
tifier' ) %}</pre>=20
</div>
</div>
<h4 id=3D"ContentRendering-UsingtheFieldType'stemplateblock">Using the Fiel=
d Type's template block</h4>
<p>All built-in Field Types come with <a href=3D"https://github.com/ezsyste=
ms/exponential-kernel/blob/master/eZ/Bundle/EzPublishCoreBundle/Resources/vie=
ws/content_fields.html.twig" class=3D"external-link" rel=3D"nofollow">their=
 own Twig template</a>.&nbsp;You can render any Field using this default te=
mplate using the&nbsp;<code>ez_render_field()</code> helper.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">{{ ez_render_field( content, 'some_field_identifier' ) }}</pre>=20
</div>
</div>
<p>Refer to&nbsp;<a href=3D"#ContentRendering-ez_render_field"> <span class=
=3D"confluence-link">ez_render_field</span> </a> <span class=3D"confluence-=
link">&nbsp;</span> for further information.</p>
<div class=3D"confluence-information-macro confluence-information-macro-tip=
">
<span class=3D"aui-icon aui-icon-small aui-iconfont-approve confluence-info=
rmation-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>As this makes use of reusable templates, <strong>using <code>ez_render_f=
ield()</code> is the recommended way and is to be considered the best pract=
ice</strong>.</p>
</div>
</div>
<h3 id=3D"ContentRendering-RenderingContentname">Rendering Content name</h3=
>
<p>The <strong>name</strong> of a Content item is its generic "title", gene=
rated by the repository based on the Content Type's naming pattern. It ofte=
n takes the form of a normalized value of the first field, but might be a c=
oncatenation of several fields.&nbsp;There are 2 different ways to access t=
his special property:</p>
<ul>
<li>Through the name property of ContentInfo (not translated).</li>
<li>Through VersionInfo with the TranslationHelper (translated).</li>
</ul>
<h4 id=3D"ContentRendering-Translatedname">Translated name</h4>
<p><span>The&nbsp;<em>translated name</em>&nbsp;is held in a <code>VersionI=
nfo</code>&nbsp;object, in the names property which consists of hash indexe=
d by locale. You can easily retrieve it in the right language via the&nbsp;=
<code>TranslationHelper</code>&nbsp;service.</span></p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: html/xml; gutter: false; theme: Eclipse" style=3D"font=
-size:12px;">&lt;h2&gt;Translated content name: {{ ez_content_name( content=
 ) }}&lt;/h2&gt;
&lt;h3&gt;Also works from ContentInfo : {{ ez_content_name( content.content=
Info ) }}&lt;/h3&gt;</pre>=20
</div>
</div>
<p>The helper will by default follow the prioritized languages order.&nbsp;=
If there is no translation for your prioritized languages, the helper will =
always return the name in the main language.</p>
<p>You can also&nbsp;<strong>force a locale</strong>&nbsp;in a second argum=
ent:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: html/xml; gutter: false; theme: Eclipse" style=3D"font=
-size:12px;">{# Force fre-FR locale. #}
&lt;h2&gt;{{ ez_content_name( content, 'fre-FR' ) }}&lt;/h2&gt;</pre>=20
</div>
</div>
<p>You can find more information further in this document.</p>
<h4 id=3D"ContentRendering-NamepropertyinContentInfo">Name property in Cont=
entInfo</h4>
<p>This property is the actual content name, but <strong>in main language o=
nly</strong> (so it is not translated).</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: html/xml; gutter: false; theme: Eclipse" style=3D"font=
-size:12px;">&lt;h2&gt;Content name: {{ content.contentInfo.name }}&lt;/h2&=
gt;</pre>=20
</div>
</div>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">$contentName =3D $content-&gt;contentInfo-&gt;name;</pre>=20
</div>
</div>
<h4 id=3D"ContentRendering-Exposingadditionalvariables"><span>Exposing addi=
tional variables</span></h4>
<p>It is possible to expose additional variables in a content view template=
. See&nbsp;<span class=3D"confluence-link"> <a href=3D"/display/DEVELOPER/I=
njecting+parameters+in+content+views">parameters injection in content views=
</a></span>.</p>
<h2 id=3D"ContentRendering-Customcontrollers">Custom controllers</h2>
<p>In some cases, displaying a Content item/Location via the built-in <code=
>ViewController</code> is not sufficient to show everything you want. In su=
ch cases you may want to <strong>use your own custom controller</strong> to=
 display the current Content item/Location instead.</p>
<p>Typical use cases include access to:</p>
<ul>
<li>Settings (coming from <code>ConfigResolver</code> or <code>ServiceConta=
iner</code>)</li>
<li>Current Content item's <code>ContentType</code> object</li>
<li>Current Location's parent</li>
<li>Current Location's children count</li>
<li>Main Location and alternative Locations for the current Content item</l=
i>
<li>etc.</li>
</ul>
<p>There are three ways in which you can apply a custom controller:</p>
<ul>
<li>Configure a custom controller alongside regular matcher rules to use <s=
trong>both</strong> your custom controller and the <code>ViewController</co=
de> (recommended).</li>
<li><strong>Override</strong> the built-in <code>ViewController</code> with=
 the custom controller in a specific situation.</li>
<li><strong>Replace</strong> the <code>ViewController</code> with the custo=
m controller for the whole bundle.</li>
</ul>
<h3 id=3D"ContentRendering-EnrichingViewControllerwithacustomcontroller">En=
riching ViewController with a custom controller</h3>
<p><strong>This is the recommended way of using a custom controller</strong=
></p>
<p>To use your custom controller on top of the built-in <code>ViewControlle=
r</code> you need to point to both the controller and the template in the c=
onfiguration, for example:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>ezplatform.yml</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">exponential:
    system:
        default:
            content_view:
                full:
                    article:
                        controller: AcmeTestBundle:Default:articleViewEnhan=
ced
                        template: AcmeTestBundle:full:article.html.twig
                        match:
                            Identifier\ContentType: [article]</pre>=20
</div>
</div>
<p>With this configuration, the following controller will forward the reque=
st to the built-in <code>ViewController</code> with some additional paramet=
ers:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>Controller</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">&lt;?php

namespace Acme\TestBundle\Controller;

use Symfony\Component\HttpFoundation\Response;
use eZ\Bundle\EzPublishCoreBundle\Controller;

class DefaultController extends Controller
{
    public function articleViewEnhancedAction( $locationId, $viewType, $lay=
out =3D false, array $params =3D array() )
    {
        // Add custom parameters to existing ones.
        $params +=3D array( 'myCustomVariable' =3D&gt; "Hey, I'm a custom m=
essage!" );
        // Forward the request to the original ViewController
        // And get the response. Possibly alter it (here we change the smax=
-age for cache).
        $response =3D $this-&gt;get( 'ez_content' )-&gt;viewLocation( $loca=
tionId, $viewType, $layout, $params );
        $response-&gt;setSharedMaxAge( 600 );

        return $response;
    }
}</pre>=20
</div>
</div>
<p>Always ensure that you add new parameters to existing <code>$params</cod=
e> associative array using <a href=3D"http://php.net/manual/en/language.ope=
rators.array.php" class=3D"external-link" rel=3D"nofollow"><strong><code>+<=
/code></strong> union operator</a> or <code>array_merge()</code>. <strong>N=
ot doing so (e.g. only passing your custom parameters array) can result in =
unexpected issues with content preview</strong>. Previewed content and othe=
r parameters are indeed passed in <code>$params</code>.</p>
<p>These parameters can then be used in templates, for example:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>article.html.twig</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: xml; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">{% extends noLayout ? viewbaseLayout : "eZDemoBundle::pagelayout.ht=
ml.twig" %}

{% block content %}
    &lt;h1&gt;{{ ez_render_field( content, 'title' ) }}&lt;/h1&gt;
    &lt;h2&gt;{{ myCustomVariable }}&lt;/h2&gt;
    {{ ez_render_field( content, 'body' ) }}
{% endblock %}</pre>=20
</div>
</div>
<h3 id=3D"ContentRendering-Usingonlyyourcustomcontroller">Using only your c=
ustom controller</h3>
<p>If you want to apply only your custom controller in a given match situat=
ion and not make use of the <code>ViewController</code> at all, in the conf=
iguration you need to indicate the controller, but no template, for example=
:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>ezplatform.yml</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">exponential:
    system:
        default:
            content_view:
                full:
                    folder:
                        controller: AcmeTestBundle:Default:viewFolder
                        match:
                            Identifier\ContentType: [folder]
                            Identifier\Section: [standard]</pre>=20
</div>
</div>
<p>In this example, as the <code>ViewController</code> is not applied, the =
custom controller takes care of the whole process of displaying content, in=
cluding pointing to the template to be used (in this case, <code>AcmeTestBu=
ndle::custom_controller_folder.html.twig</code>:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>Controller</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">&lt;?php

namespace Acme\TestBundle\Controller;

use Symfony\Component\HttpFoundation\Response;
use eZ\Bundle\EzPublishCoreBundle\Controller;

class DefaultController extends Controller
{
    public function viewFolderAction( $locationId, $layout =3D false, $para=
ms =3D array() )
    {
        $repository =3D $this-&gt;getRepository();
        $location =3D $repository-&gt;getLocationService()-&gt;loadLocation=
( $locationId );
        // Check if content is not already passed. Can be the case when usi=
ng content preview.
        $content =3D isset( $params['content'] ) ? $params['content'] : $re=
pository-&gt;getContentService()-&gt;loadContentByContentInfo( $location-&g=
t;getContentInfo() )
        $response =3D new Response();
        $response-&gt;headers-&gt;set( 'X-Location-Id', $locationId );
        // Caching for 1h and make the cache vary on user hash
        $response-&gt;setSharedMaxAge( 3600 );
        $response-&gt;setVary( 'X-User-Hash' );
        return $this-&gt;render(
            'AcmeTestBundle::custom_controller_folder.html.twig',
            array(
                'location' =3D&gt; $location,
                'content' =3D&gt; $content,
                'foo' =3D&gt; 'Hey world!!!',
                'osTypes' =3D&gt; array( 'osx', 'linux', 'windows' )
            ) + $params
        );
    }
}</pre>=20
</div>
</div>
<p>Here again custom parameters can be used in the template, e.g.:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>custom_controller_folder.html.twig</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: xml; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">{% extends "eZDemoBundle::pagelayout.html.twig" %}

{% block content %}
&lt;h1&gt;{{ ez_render_field( content, 'title' ) }}&lt;/h1&gt;
    &lt;h1&gt;{{ foo }}&lt;/h1&gt;
    &lt;ul&gt;
    {% for os in osTypes %}
        &lt;li&gt;{{ os }}&lt;/li&gt;
    {% endfor %}
    &lt;/ul&gt;
{% endblock %}</pre>=20
</div>
</div>
<h3 id=3D"ContentRendering-Overridingthebuilt-inViewController">Overriding =
the built-in ViewController</h3>
<p>One other way to keep control of what is passed to the view is to use yo=
ur own controller instead of the built-in <code>ViewController</code>. As b=
ase <code>ViewController</code> is defined as a service, with a service ali=
as, this can be easily achieved from your bundle's configuration:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">parameters:
    my.custom.view_controller.class: Acme\TestBundle\MyViewController

services:
    my.custom.view_controller:
        class: %my.custom.view_controller.class%
        arguments: [@some_dependency, @other_dependency]

    # Change the alias here and make it point to your own controller
    ez_content:
        alias: my.custom.view_controller</pre>=20
</div>
</div>
<div class=3D"confluence-information-macro confluence-information-macro-war=
ning">
<span class=3D"aui-icon aui-icon-small aui-iconfont-error confluence-inform=
ation-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>Doing so will completely override the built-in <code>ViewController</cod=
e>! Use this at your own risk!</p>
</div>
</div>
<h3 id=3D"ContentRendering-Customcontrollerstructure">Custom controller str=
ucture</h3>
<p>Your custom controller can be any kind of <a href=3D"http://symfony.com/=
doc/current/book/page_creation.html#step-2-create-the-controller" class=3D"=
external-link" rel=3D"nofollow">controller supported by Symfony</a> (includ=
ing <a href=3D"http://symfony.com/doc/current/cookbook/controller/service.h=
tml" class=3D"external-link" rel=3D"nofollow">controllers as a service</a>)=
.</p>
<p>The only requirement here is that your action method must have a similar=
 signature to <code>ViewController::viewLocation()</code> or <code>ViewCont=
roller::viewContent()</code> (depending on what you're matching of course).=
 However, note that not all arguments are mandatory, since <a href=3D"http:=
//symfony.com/doc/current/book/routing.html#route-parameters-and-controller=
-arguments" class=3D"external-link" rel=3D"nofollow">Symfony is clever enou=
gh to know what to inject into your action method</a>. That is why <strong>=
you aren't forced to mimic the <code>ViewController</code>'s signature stri=
ctly</strong>. For example, if you omit <code>$layout</code> and <code>$par=
ams</code> arguments, it will still be valid. Symfony will just avoid injec=
ting them into your action method.</p>
<h4 id=3D"ContentRendering-Built-inViewControllersignatures">Built-in ViewC=
ontroller signatures</h4>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>viewLocation() signature</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">/**
 * Main action for viewing content through a location in the repository.
 *
 * @param int $locationId
 * @param string $viewType
 * @param boolean $layout
 * @param array $params
 *
 * @throws \Symfony\Component\Security\Core\Exception\AccessDeniedException
 * @throws \Exception
 *
 * @return \Symfony\Component\HttpFoundation\Response
 */
public function viewLocation( $locationId, $viewType, $layout =3D false, ar=
ray $params =3D array() )</pre>=20
</div>
</div>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>viewContent() signature</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">/**
 * Main action for viewing content.
 *
 * @param int $contentId
 * @param string $viewType
 * @param boolean $layout
 * @param array $params
 *
 * @throws \Symfony\Component\Security\Core\Exception\AccessDeniedException
 * @throws \Exception
 *
 * @return \Symfony\Component\HttpFoundation\Response
 */
public function viewContent( $contentId, $viewType, $layout =3D false, arra=
y $params =3D array() )</pre>=20
</div>
</div>
<div class=3D"confluence-information-macro confluence-information-macro-not=
e">
<span class=3D"aui-icon aui-icon-small aui-iconfont-warning confluence-info=
rmation-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>Controller selection doesn't apply to <code>block_view</code> since you =
can already <a href=3D"https://doc.ez.no/display/DEVELOPER/Content+Renderin=
g#ContentRendering-Renderblock" rel=3D"nofollow">use your own controller to=
 display blocks</a>.</p>
</div>
</div>
<div class=3D"confluence-information-macro confluence-information-macro-war=
ning">
<p class=3D"title">Caching</p>
<span class=3D"aui-icon aui-icon-small aui-iconfont-error confluence-inform=
ation-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>When you use your own controller, <strong>it is your responsibility to d=
efine cache rules</strong>, like with every custom controller!</p>
<p>So don't forget to <strong>set cache rules</strong> and the appropriate =
<strong><code>X-Location-Id</code> header</strong> in the returned <code>Re=
sponse</code> object.</p>
<p><a href=3D"https://github.com/ezsystems/exponential-kernel/blob/master/eZ/=
Publish/Core/MVC/Symfony/Controller/Content/ViewController.php#L76" class=
=3D"external-link" rel=3D"nofollow">See built-in ViewController</a> for mor=
e details on this.</p>
</div>
</div>
<h2 id=3D"ContentRendering-Embeddedimages">Embedded images</h2>
<p><span class=3D"status-macro aui-lozenge aui-lozenge-current">V1.4</span>=
</p>
<p>The Rich Text Field allows you to embed other Content items within the F=
ield.</p>
<p>Content items that are identified as images will be rendered in the Rich=
 Text Field using a dedicated template.</p>
<p>You can determine which Content Types will be treated as images and rend=
ered using this template in the <code>ezplatform.content_view.image_embed_c=
ontent_types_identifiers</code> parameter. By default it is set to cover th=
e Image Content Type, but you can add other types that you want to be treat=
ed as images, for example:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">parameters:
    ezplatform.content_view.image_embed_content_types_identifiers: ['image'=
, 'photo', 'banner']</pre>=20
</div>
</div>
<p>The template used when rendering embedded images can be set in the <code=
>ezplatform.default_view_templates.content.embed_image</code> container par=
ameter:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">parameters:
    ezplatform.default_view_templates.content.embed_image: 'content/view/em=
bed/image.html.twig</pre>=20
</div>
</div>
<h2 id=3D"ContentRendering-Querycontroller">Query controller</h2>
<p><span class=3D"status-macro aui-lozenge aui-lozenge-current">V1.4</span>=
</p>
<p>The Query controller is a predefined custom content view controller that=
 runs a Repository Query.</p>
<p>It is meant to be used as a custom controller in a view configuration, a=
long with match rules. It can use properties of the viewed content or locat=
ion as parameters to the Query. It makes it easy to retrieve content withou=
t writing custom PHP code and display the results in a template.</p>
<h3 id=3D"ContentRendering-Use-caseexamples">Use-case examples&nbsp;</h3>
<ul style=3D"list-style-type: square;">
<li>List of Blog posts in a Blog&nbsp;</li>
<li>List of Images in a Gallery</li>
</ul>
<h3 id=3D"ContentRendering-Usageexample">Usage example</h3>
<p>We will use the blog posts use case mentioned above as an example. It as=
sumes a "Blog" container that contains a set of "Blog post" items. The goal=
 is, when viewing a Blog, to list the Blog posts it contains.</p>
<p>Three items are required:</p>
<ul style=3D"list-style-type: square;">
<li>a <code>LocationChildren</code>&nbsp;QueryType<br>Will generate a Query=
 retrieving the children of a given location id</li>
<li>a View template<br>Will render the Blog, and list the Blog posts it con=
tains</li>
<li>a&nbsp;<code>content_view</code> configuration<br>Will instruct Platfor=
m, when viewing a Content item of type Blog, to use the Query Controller, t=
he view template, and the LocationChildren QueryType. It will also map the =
id of the viewed Blog to the QueryType parameters, and set which twig varia=
ble the results will be assigned to.</li>
</ul>
<h4 id=3D"ContentRendering-TheLocationChildrenQueryType">The LocationChildr=
en QueryType</h4>
<p>QueryTypes are described in more detail in the next section. In short, a=
 QueryType can build a Query object, optionally based on a set of parameter=
s. The following example will build a Query that retrieves the sub-items of=
 a Location:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>src/AppBundle/QueryType/LocationChildrenQueryType.php</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">&lt;?php
namespace AppBundle\QueryType;

use eZ\Publish\API\Repository\Values\Content\LocationQuery;
use eZ\Publish\API\Repository\Values\Content\Query\Criterion\ParentLocation=
Id;
use eZ\Publish\Core\QueryType\QueryType;

class LocationChildrenQueryType implements QueryType
{
    public function getQuery(array $parameters =3D [])
    {
        return new LocationQuery([
            'filter' =3D&gt; new ParentLocationId($parameters['parentLocati=
onId']),
        ]);
    }

    public function getSupportedParameters()
    {
        return ['parentLocationId'];
    }

    public static function getName()
    {
        return 'LocationChildren';
    }
}

</pre>=20
</div>
</div>
<p>Any class will be registered as a QueryType when it:</p>
<ul style=3D"list-style-type: square;">
<li>implements the QueryType interface,</li>
<li>is located in the QueryType subfolder of a bundle, and in a file named =
"SomethingQueryType.php"</li>
</ul>
<p>If the QueryType has dependencies, it can be manually tagged as a servic=
e using the&nbsp;<code>exponential.query_type</code> service tag, but it is n=
ot required in that case.</p>
<h4 id=3D"ContentRendering-Thecontent_viewconfiguration">The content_view c=
onfiguration</h4>
<p>We now need a view configuration that matches content items of type "Blo=
g", and uses the QueryController to fetch the blog posts:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>app/config/ezplatform.yml</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">exponential:
      system:
            site_group:
               &nbsp;content_view:
=09=09=09        full:
=09=09=09=09=09=09blog:
               =09=09    =09controller: "ez_query:locationQueryAction"
=09=09=09=09=09=09=09template: "content/view/full/blog.html.twig"
=09=09=09=09=09=09=09match:
=09=09=09=09=09=09=09=09Identifier\ContentType: "blog"
                =09=09=09params:
                            =09query:
                                =09query_type: 'LocationChildren'
                        =09=09=09parameters:
                            =09=09=09parentLocationId: "@=3Dlocation.id"
                        =09        assign_results_to: 'blog_posts'</pre>=20
</div>
</div>
<p>The view's controller action is set to the QueryController's locationQue=
ry action (<code>ez_query:locationQueryAction</code>). Other actions are av=
ailable that run a different type of search (contentInfo or content).</p>
<p>The QueryController is configured in the&nbsp;<code>query</code>&nbsp;ar=
ray, inside the&nbsp;<code>params</code> of the content_view block:</p>
<ul style=3D"list-style-type: square;">
<li><code>query_type</code> specifies the QueryType to use, based on its na=
me.</li>
<li><code>parameters</code> is a hash where parameters from the QueryType a=
re set. Arbitrary values can be used, as well as properties from the curren=
tly viewed location and content. In that case,&nbsp;the id of the currently=
 viewed location is mapped to the QueryType's&nbsp;<code style=3D"line-heig=
ht: 1.42857;">parentLocationId</code> parameter:&nbsp;<code> <span style=3D=
"line-height: 1.42857;">parentLocationId: "@=3Dlocation.id"</span> </code><=
/li>
<li><span> <code>assign_results_to</code>&nbsp;sets which twig variable the=
 search results will be assigned to.</span></li>
</ul>
<h4 id=3D"ContentRendering-Theviewtemplate"><span>The view template</span><=
/h4>
<p><span>Results from the search are assigned to the&nbsp;<code>blog_posts<=
/code> variable as a <code>SearchResult</code> object. In addition, since t=
he usual view controller is used, the currently viewed <code>location</code=
> and <code>content</code> are also available.</span></p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>app/Resources/views/content/full/blog.html.twig</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">&lt;h1&gt;{{ ez_content_name(content) }}&lt;/h1&gt;
&nbsp;
{% for blog_post in blog_posts.searchHits %}
  &lt;h2&gt;{{ ez_content_name(blog_post.valueObject.contentInfo) }}&lt;/h2=
&gt;
{% endfor %}&nbsp;</pre>=20
</div>
</div>
<p><span> <br> </span></p>
<h3 id=3D"ContentRendering-Configurationdetails">Configuration details</h3>
<h4 id=3D"ContentRendering-controller"><code>controller</code></h4>
<p>Three Controller Actions are available, each for a different type of sea=
rch:</p>
<ul>
<li><code>locationQueryAction</code> runs a Location Search</li>
<li><code>contentQueryAction</code> runs a Content Search</li>
<li><code>contentInfoQueryAction</code> runs a Content Info search</li>
</ul>
<p>&nbsp;</p>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
See=20
<a href=3D"/display/DEVELOPER/Search">Search</a> documentation page for mor=
e details about different types of search
</div>
</div>
<h4 id=3D"ContentRendering-params"><code>params</code></h4>
<p>The Query is configured in a <code>query</code> hash in <code>params</co=
de>, you could specify the QueryType name, additional parameters and the Tw=
ig variable that you will assign the results to for use in the template.</p=
>
<ul>
<li><h4 id=3D"ContentRendering-query_type"><code>query_type</code></h4></li=
>
<li style=3D"list-style-type: none;background-image: none;">
<ul>
<li>Name of the Query Type that will be used to run the query, defined by t=
he class name.</li>
</ul></li>
<li><h4 id=3D"ContentRendering-parameters"><code>parameters</code></h4>
<ul>
<li>Query Type parameters that can be provided in two ways:</li>
</ul>
<ol>
<li>As scalar values, for example an identifier, an id, etc.</li>
<li>Using the Expression language. This simple script language, similar to =
Twig syntax, lets you write expressions that get value from the current con=
tent and/or location:</li>
</ol>
<ul>
<li style=3D"list-style-type: none;background-image: none;">
<ul>
<li>For example, <code>@=3D<a href=3D"http://location.id" class=3D"external=
-link" rel=3D"nofollow">location.id</a> </code> will be evaluated to the cu=
rrently viewed location's ID.<code> <br>content</code>, <code>location</cod=
e> and <code>view</code> are available as variables in expressions.</li>
</ul></li>
</ul></li>
<li><h4 id=3D"ContentRendering-assign_results_to"><code>assign_results_to</=
code></h4>
<ul>
<li>This is the name of the Twig variable that will be assigned the results=
.</li>
<li>Note that the results are the SearchResult object returned by the Searc=
hService.</li>
</ul></li>
</ul>
<h3 id=3D"ContentRendering-QueryTypesobjects"><span style=3D"font-size: 20.=
0px;font-weight: normal;line-height: 1.5;">Query Types objects</span></h3>
<p>QueryTypes are objects that build a Query. They are different from <a hr=
ef=3D"https://doc.ez.no/display/DEVELOPER/Public+API+Guide" rel=3D"nofollow=
">Public API queries</a>.</p>
<p>To make a new QueryType available to the Query Controller, you need to c=
reate a PHP class that implements the QueryType interface, then register it=
 as such in the Service Container.</p>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
For more information about the=20
<a href=3D"/display/DEVELOPER/Service+Container">Service Container</a>, rea=
d the page
</div>
</div>
<p>&nbsp;</p>
<h3 id=3D"ContentRendering-TheQueryTypeinterface"><span class=3D"anchor">Th=
e QueryType interface</span></h3>
<p>There you can view the PHP QueryType interface. Three methods are descri=
bed:</p>
<ol>
<li>getQuery()</li>
<li>getSupportedParameters()</li>
<li>getName()</li>
</ol>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">=20
<div class=3D"codeHeader panelHeader pdl hide-border-bottom">=20
<b class=3D"code-title"></b>=20
<span class=3D"collapse-source expand-control"><span class=3D"expand-contro=
l-icon icon">&nbsp;</span><span class=3D"expand-control-text">Expand source=
</span></span>=20
</div>=20
<div class=3D"codeContent panelContent pdl hide-toolbar">=20
<pre class=3D"brush: php; gutter: true; theme: Eclipse; collapse: true" sty=
le=3D"font-size:12px;">interface QueryType
{
 /**
 * Builds and returns the Query object
 *
 * The Query can be either a Content or a Location one.
 *
 * @param array $parameters A hash of parameters that will be used to build=
 the Query
 * @return \eZ\Publish\API\Repository\Values\Content\Query
 */
 public function getQuery(array $parameters =3D []);
=20
 /**
 * Returns an array listing the parameters supported by the QueryType
 * @return array
 */
 public function getSupportedParameters();
=20
 /**
 * Returns the QueryType name
 * @return string
 */
 public static function getName();
}</pre>=20
</div>=20
</div>
<h4 id=3D"ContentRendering-Parameters">Parameters</h4>
<p>A QueryType may accept parameters, including string, arrays and other ty=
pes, depending on the implementation. They can be used in any way, such as:=
</p>
<ul>
<li>customizing an element's value (limit, ContentType identifier, etc)</li=
>
<li>conditionally adding/removing criteria from the query</li>
<li>setting the limit/offset</li>
</ul>
<p>The implementations should use Symfony's <code>OptionsResolver</code> fo=
r parameters handling and resolution.</p>
<p>&nbsp;</p>
<h3 id=3D"ContentRendering-QueryTypeexample:latestcontent"><span class=3D"a=
nchor">QueryType example: latest content</span></h3>
<p>Let's see an example for a QueryType creation.</p>
<p>This QueryType returns a <span class=3D"inline-comment-marker" data-ref=
=3D"ca57d36c-77cd-47e2-9fb6-c2b1d6842fb9">Query</span> that searches for<st=
rong> the 10 last published Content items, order by reverse publishing date=
</strong>. <br>It accepts an optional <code>type</code> parameter, that can=
 be set to a ContentType identifier:</p>
<div class=3D"highlight highlight-text-html-php">
<p>&nbsp;</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: true; theme: Eclipse" style=3D"font-size:=
12px;">&lt;?php
namespace AppBundle\QueryType;
use eZ\Publish\Core\QueryType\QueryType;
use eZ\Publish\API\Repository\Values\Content\Query;
class LatestContentQueryType implements QueryType
{
    public function getQuery(array $parameters =3D [])
    {
        $criteria[] =3D new Query\Criterion\Visibility(Query\Criterion\Visi=
bility::VISIBLE);
        if (isset($parameters['type'])) {
            $criteria[] =3D new Query\Criterion\ContentTypeIdentifier($para=
meters['type']);
        }
        // 10 is the default limit we set, but you can have one defined in =
the parameters
        return new Query([
            'filter' =3D&gt; new Query\Criterion\LogicalAnd($criteria),
            'sortClauses' =3D&gt; [new Query\SortClause\DatePublished()],
            'limit' =3D&gt; isset($parameters['limit']) ? $parameters['limi=
t'] : 10,
        ]);
    }
    public static function getName()
    {
        return 'AppBundle:LatestContent';
    }
    /**
     * Returns an array listing the parameters supported by the QueryType.
     * @return array
     */
    public function getSupportedParameters()
    {
        return ['type', 'limit'];
    }
}
</pre>=20
</div>
</div>
<p>&nbsp;</p>
</div>
<h3 id=3D"ContentRendering-NamingofQueryTypes"><span class=3D"anchor">Namin=
g of QueryTypes</span></h3>
<p>Each QueryType is named after what is returned by <code>getName()</code>=
. <strong>Names must be unique.</strong> A warning will be thrown during co=
mpilation if there is a conflict, and the resulting behavior will be unpred=
ictable.</p>
<p>QueryType names should use a unique namespace, in order to avoid conflic=
ts with other bundles. We recommend that the name is prefixed with the bund=
le's name: <code>AcmeBundle:LatestContent</code>. A vendor/company's name c=
ould also work for QueryTypes that are reusable throughout projects: <code>=
Acme:LatestContent</code>.</p>
<h3 id=3D"ContentRendering-RegisteringtheQueryTypeintotheservicecontainer">=
<span class=3D"anchor">Registering the QueryType into the service container=
</span></h3>
<p>In addition to creating a class for a <code>QueryType</code>, you must a=
lso register the QueryType with the Service Container. This can be done in =
two ways: by convention, and with a service tag.</p>
<h4 id=3D"ContentRendering-Byconvention"><span class=3D"anchor">By conventi=
on</span></h4>
<p>Any class named <code>&lt;Bundle&gt;\QueryType\*QueryType</code>, that i=
mplements the QueryType interface, will be registered as a custom QueryType=
.<br>Example: <code>AppBundle\QueryType\LatestContentQueryType</code>.</p>
<h4 id=3D"ContentRendering-Usingaservicetag"><span class=3D"anchor">Using a=
 service tag</span></h4>
<p>If the proposed convention doesn't work for you, QueryTypes can be manua=
lly tagged in the service declaration:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: powershell; gutter: true; theme: Eclipse" style=3D"fon=
t-size:12px;">acme.query.latest_content:
    class: AppBundle\Query\LatestContent
    tags:
        - {name: exponential.query_type}</pre>=20
</div>
</div>
<p>The effect is exactly the same than registering by convention.</p>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<p class=3D"title">More content...</p>
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>Follow the FieldType creation Tutorial and learn how to <a href=3D"/disp=
lay/DEVELOPER/Register+the+Field+Type+as+a+service">Register the Field Type=
 as a service</a></p>
</div>
</div>
<h3 id=3D"ContentRendering-TheOptionsResolverBasedQueryTypeabstractclass"><=
span class=3D"anchor">The OptionsResolverBasedQueryType abstract class</spa=
n></h3>
<p>An abstract class based on Symfony's <code>OptionsResolver</code> eases =
implementation of QueryTypes with parameters.</p>
<p>It provides final implementations of <code>getQuery()</code> and <code>g=
etDefinedParameters()</code>.</p>
<p>A <code>doGetQuery()</code> method must be implemented instead of <code>=
getQuery()</code>. It is called with the parameters processed by the Option=
sResolver, meaning that the values have been validated, and default values =
have been set.</p>
<p>In addition, the <code>configureOptions(OptionsResolver $resolver)</code=
> method must configure the OptionsResolver.</p>
<p>The LatestContentQueryType can benefit from the abstract implementation:=
</p>
<ul>
<li>validate that <code>type</code> is a string, but make it optional</li>
<li>validate that <code>limit</code> is an int, with a default value of 10<=
/li>
</ul>
<div class=3D"highlight highlight-text-html-php">
<p>&nbsp;</p>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
For further information see the=20
<a href=3D"http://symfony.com/doc/current/components/options_resolver.html"=
 class=3D"external-link" rel=3D"nofollow">Symfony's Options Resolver docume=
ntation page</a>
</div>
</div>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: true; theme: Eclipse" style=3D"font-size:=
12px;">&lt;?php
namespace AppBundle\QueryType;
use eZ\Publish\API\Repository\Values\Content\Query;
use Symfony\Component\OptionsResolver\OptionsResolver;
class OptionsBasedLatestContentQueryType extends OptionsResolverBasedQueryT=
ype implements QueryType
{
    protected function doGetQuery(array $parameters)
    {
        $criteria[] =3D new Query\Criterion\Visibility(Query\Criterion\Visi=
bility::VISIBLE);
        if (isset($parameters['type'])) {
            $criteria[] =3D new Query\Criterion\ContentTypeIdentifier($para=
meters['type']);
        }
        return new Query([
            'criterion' =3D&gt; new Query\Criterion\LogicalAnd($criteria),
            'sortClauses' =3D&gt; [new Query\SortClause\DatePublished()],
            'limit' =3D&gt; $parameters,
        ]);
    }
    public static function getName()
    {
        return 'AppBundle:LatestContent';
    }
    protected function configureOptions(OptionsResolver $resolver)
    {
        $resolver-&gt;setAllowedTypes('type', 'string');
        $resolver-&gt;setAllowedValues('limit', 'int');
        $resolver-&gt;setDefault('limit', 10);
    }
}
</pre>=20
</div>
</div>
<h3 id=3D"ContentRendering-UsingQueryTypesfromPHPcode"><span class=3D"ancho=
r">Using QueryTypes from PHP code</span></h3>
</div>
<p>All QueryTypes are registered in a registry, the QueryType registry.</p>
<p>It is available from the container as <code>exponential.query_type.registr=
y</code></p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: true; theme: Eclipse" style=3D"font-size:=
12px;">&lt;?php
class MyCommand extends ContainerAwareCommand
{
    protected function execute(InputInterface $input, OutputInterface $outp=
ut)
    {
        $queryType     =3D $this-&gt;getContainer()-&gt;get('exponential.quer=
y_type.registry')-&gt;getQueryType('AcmeBundle:LatestContent');
        $query         =3D $queryType-&gt;getQuery(['type' =3D&gt; 'article=
']);
        $searchResults =3D $this-&gt;getContainer()-&gt;get('exponential.api.=
service.search')-&gt;findContent($query);
        foreach ($searchResults-&gt;searchHits as $searchHit) {
            $output-&gt;writeln($searchHit-&gt;valueObject-&gt;contentInfo-=
&gt;name);
        }
    }
}

</pre>=20
</div>
</div>
<h2 id=3D"ContentRendering-Makinglinkstootherlocations">Making links to oth=
er locations</h2>
<p>Linking to other locations is fairly easy and is done with a <a href=3D"=
http://symfony.com/doc/2.3/book/templating.html#linking-to-pages" class=3D"=
external-link" rel=3D"nofollow">native&nbsp;<code>path()</code> Twig helper=
</a> (or <code>url()</code> if you want to generate absolute URLs). You jus=
t have to pass it the Location object and <code>path()</code> will generate=
 the URLAlias for you.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: xml; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">{# Assuming "location" variable is a valid eZ\Publish\API\Repositor=
y\Values\Content\Location object #}
&lt;a href=3D"{{ path( location ) }}"&gt;Some link to a location&lt;/a&gt;<=
/pre>=20
</div>
</div>
<p>If you don't have the Location object, but only its ID, you can generate=
 the URLAlias the following way:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: xml; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">&lt;a href=3D"{{ path( "ez_urlalias", {"locationId": 123} ) }}"&gt;=
Some link to a location, with its Id only&lt;/a&gt;</pre>=20
</div>
</div>
<p>You can also use the Content ID. In that case the generated link will po=
int to the Content item's main Location.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: xml; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">&lt;a href=3D"{{ path( "ez_urlalias", {"contentId": 456} ) }}"&gt;S=
ome link from a contentId&lt;/a&gt;</pre>=20
</div>
</div>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<p class=3D"title">Under the hood</p>
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>In the backend, <code>path()</code> uses the Router to generate links.</=
p>
<p>This makes it also easy to generate links from PHP, via the <code>router=
</code> service.</p>
</div>
</div>
<p>See also: <a href=3D"https://doc.ez.no/display/DEVELOPER/SiteAccess#Site=
Access-Cross-siteacesslinks" rel=3D"nofollow">Cross-siteaccess links</a></p=
>
<h2 id=3D"ContentRendering-Renderembeddedcontentobjects">Render embedded co=
ntent objects</h2>
<p>Rendering an embedded content from a Twig template is pretty straight fo=
rward as you just need to <strong>do a subrequest with <code>ez_content</co=
de> controller</strong>.</p>
<h3 id=3D"ContentRendering-Usingez_contentcontroller">Using&nbsp;<code>ez_c=
ontent</code> controller</h3>
<p>This controller is exactly the same as&nbsp;<a href=3D"#ContentRendering=
-TheViewController">the ViewController presented above</a>. It has one main=
&nbsp;<code>viewAction</code>, that renders a Content item.</p>
<p>You can use this controller from templates with the following syntax:</p=
>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">{{ render(controller("ez_content:viewAction", {"contentId": 123, "v=
iewType": "line"})) }}</pre>=20
</div>
</div>
<p>The example above renders the Content whose ID is <strong>123</strong>, =
with the view type&nbsp;<strong>line</strong>.</p>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>Reference of <code>ez_content</code> controller follows the syntax of <e=
m>controllers as a service</em>, <a href=3D"http://symfony.com/doc/current/=
cookbook/controller/service.html" class=3D"external-link" rel=3D"nofollow">=
as explained in Symfony documentation</a>.</p>
</div>
</div>
<h4 id=3D"ContentRendering-Availablearguments">Available arguments</h4>
<p>As with any controller, you can pass arguments to <code>ez_content:viewL=
ocation</code> or <code>ez_content:viewContent</code> to fit your needs.</p=
>
<div class=3D"table-wrap">
<table class=3D"confluenceTable">
<tbody>
<tr>
<th class=3D"confluenceTh">Name</th>
<th class=3D"confluenceTh">Description</th>
<th class=3D"confluenceTh">Type</th>
<th colspan=3D"1" class=3D"confluenceTh">Default value</th>
</tr>
<tr>
<td class=3D"confluenceTd"><code>contentId</code></td>
<td class=3D"confluenceTd"><p>ID of the Content item you want to render.<br=
> <strong>Only for <code>ez_content:viewContent</code> </strong>&nbsp;</p><=
/td>
<td class=3D"confluenceTd">integer</td>
<td class=3D"confluenceTd">N/A</td>
</tr>
<tr>
<td class=3D"confluenceTd"><code>locationId</code></td>
<td class=3D"confluenceTd">ID of the Location you want to render.<br> <stro=
ng>Only for <code>ez_content:viewLocation</code> </strong>&nbsp;</td>
<td class=3D"confluenceTd">integer</td>
<td colspan=3D"1" class=3D"confluenceTd">Content item's main location, if d=
efined</td>
</tr>
<tr>
<td colspan=3D"1" class=3D"confluenceTd"><code>viewType</code></td>
<td colspan=3D"1" class=3D"confluenceTd"><p>The view type you want to rende=
r your Content item/Location in.<br>Will be used by the ViewManager to sele=
ct a corresponding template, according to defined rules.&nbsp;</p><p>Exampl=
e: full, line, my_custom_view, etc.</p></td>
<td colspan=3D"1" class=3D"confluenceTd">string</td>
<td colspan=3D"1" class=3D"confluenceTd">full</td>
</tr>
<tr>
<td colspan=3D"1" class=3D"confluenceTd"><code>layout</code></td>
<td colspan=3D"1" class=3D"confluenceTd"><p>Indicates if the sub-view needs=
 to use the main layout (see <span class=3D"confluence-link">&nbsp;</span> =
<a href=3D"#ContentRendering-Availablevariables"> <span class=3D"confluence=
-link">available variables in a view template</span> </a>)</p><p>&nbsp;</p>=
</td>
<td colspan=3D"1" class=3D"confluenceTd">boolean</td>
<td colspan=3D"1" class=3D"confluenceTd">false</td>
</tr>
<tr>
<td colspan=3D"1" class=3D"confluenceTd"><code>params</code></td>
<td colspan=3D"1" class=3D"confluenceTd"><p>Hash of variables you want to i=
nject to sub-template, key being the exposed variable name.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">{{ render(
      controller(&nbsp;
          "ez_content:viewAction",&nbsp;
          {
              "contentId": 123,
              "viewType": "line",
              "params": { "some_variable": "some_value" }
          }
      )
) }}</pre>=20
</div>
</div></td>
<td colspan=3D"1" class=3D"confluenceTd">hash</td>
<td colspan=3D"1" class=3D"confluenceTd">empty hash</td>
</tr>
</tbody>
</table>
</div>
<h2 class=3D"gh-header-title" id=3D"ContentRendering-Renderblock"><span cla=
ss=3D"js-issue-title">Render block</span></h2>
<p>You can specify which controller will be called for a specific block vie=
w match, much like defining custom controllers for location view or content=
 view match.</p>
<p>Also, since there are two possible actions with which one can view a blo=
ck: <code>ez_page:viewBlock</code> and <code>ez_page:viewBlockById</code>, =
it is possible to specify a controller action with a signature matching eit=
her one of the original actions.</p>
<p>Example of configuration in <code>app/config/ezplatform.yml</code>:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">exponential:
    system:
        eng_frontend_group:
            block_view:
                ContentGrid:
                    template: NetgenSiteBundle:block:content_grid.html.twig
                    controller: NetgenSiteBundle:Block:viewContentGridBlock
                    match:
                        Type: ContentGrid
</pre>=20
</div>
</div>
<h2 id=3D"ContentRendering-ESI">ESI</h2>
<p>Just as for regular Symfony controllers, you can take advantage of ESI a=
nd use different cache levels:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>Using ESI</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">{{ render_esi(controller("ez_content:viewAction", {"contentId": 123=
, "viewType": "line"})) }}</pre>=20
</div>
</div>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>Only scalable variables can be sent via render_esi (not object)</p>
</div>
</div>
<p>&nbsp;</p>
<h2 id=3D"ContentRendering-Asynchronousrendering">Asynchronous rendering</h=
2>
<p>Symfony also supports asynchronous content rendering with the help of&nb=
sp;<a href=3D"http://mnot.github.com/hinclude/" class=3D"external-link" rel=
=3D"nofollow">hinclude.js</a>&nbsp;library.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>Asynchronous rendering</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">{{ render_hinclude(controller("ez_content:viewAction", {"contentId"=
: 123, "viewType": "line"})) }}</pre>=20
</div>
</div>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>Only scalable variables can be sent via render_hinclude (not object)</p>
</div>
</div>
<h3 id=3D"ContentRendering-Displayadefaulttext">Display a default text</h3>
<p>If you want to display a default text while a controller is loaded async=
hronously, you have to pass a second parameter to your render_hinclude twig=
 function.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>Display a default text during asynchronous loading of a controller</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">{{ render_hinclude(controller('EzCorporateDesignBundle:Header:userL=
inks'), {'default': "&lt;div style=3D'color:red'&gt;loading&lt;/div&gt;"}) =
}}</pre>=20
</div>
</div>
<p>See also: <a href=3D"#ContentRendering-Customcontrollers">Custom control=
lers</a></p>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p><a href=3D"http://mnot.github.com/hinclude/" class=3D"external-link" rel=
=3D"nofollow">hinclude.js</a> needs to be properly included in your layout =
to work.</p>
<p>Please <a href=3D"http://symfony.com/doc/current/book/templating.html#as=
ynchronous-content-with-hinclude-js" class=3D"external-link" rel=3D"nofollo=
w">refer to Symfony documentation</a> for all available options.</p>
</div>
</div>
<h2 id=3D"ContentRendering-ContentandLocationviewproviders">Content and Loc=
ation view providers</h2>
<h3 id=3D"ContentRendering-View\Manager&amp;View\Provider">View\Manager &am=
p; View\Provider</h3>
<p>The role of the <code> <span>(eZ\Publish\Core\MVC\Symfony\)View\Manager<=
/span> </code>&nbsp;is to select the right template for displaying a given =
content item or location. It aggregates objects called <em>content and loca=
tion view providers</em>&nbsp;which respectively implement&nbsp;<code>eZ\Pu=
blish\Core\MVC\Symfony\View\Provider\Content</code>&nbsp;and&nbsp;<code>eZ\=
Publish\Core\MVC\Symfony\View\Provider\Location</code>&nbsp;interfaces.</p>
<p>Each time a content item is to be displayed through the <code>Content\Vi=
ewController</code>, the <code>View\Manager</code> iterates over the regist=
ered content or location&nbsp;<code>View\Provider</code> objects and calls&=
nbsp;<code>getView</code> <code>()</code>.</p>
<h4 id=3D"ContentRendering-ProvidedView\Providerimplementations">Provided V=
iew\Provider implementations</h4>
<div class=3D"table-wrap">
<table class=3D"confluenceTable">
<tbody>
<tr>
<th class=3D"confluenceTh">Name</th>
<th class=3D"confluenceTh">Usage</th>
</tr>
<tr>
<td class=3D"confluenceTd"><code> <span class=3D"confluence-link"> <a href=
=3D"#ContentRendering-Viewproviderconfiguration">View provider configuratio=
n</a> </span> </code></td>
<td class=3D"confluenceTd"><p>Based on application configuration.<br>Former=
ly known as <em>Template override system</em>.</p></td>
</tr>
<tr>
<td class=3D"confluenceTd"><p><code>eZ\Publish\Core\MVC\Legacy\View\Provide=
r\Content</code></p><p><code>eZ\Publish\Core\MVC\Legacy\View\Provider\Locat=
ion</code></p></td>
<td class=3D"confluenceTd"><p>Forwards view selection to the legacy kernel =
by running the old content/view module.<br>Pagelayout used is the one confi=
gured in <code>exponential_legacy.&lt;scope&gt;.view_default_layout</code>.<b=
r>For more details about the <code>&lt;scope&gt;</code> please refer to the=
 <a href=3D"https://doc.ez.no/display/DEVELOPER/SiteAccess#SiteAccess-Confi=
guration" rel=3D"nofollow">scope configuration</a> documentation.</p></td>
</tr>
</tbody>
</table>
</div>
<h3 id=3D"ContentRendering-CustomView\Provider">Custom View\Provider</h3>
<h4 id=3D"ContentRendering-DifferencebetweenView\Provider\LocationandView\P=
rovider\Content">Difference between&nbsp;<code>View\Provider\Location</code=
>&nbsp;and&nbsp;<code>View\Provider\Content</code></h4>
<ul>
<li>A&nbsp;<code>View\Provider\Location</code>&nbsp;only deals with&nbsp;<c=
ode>Location</code>&nbsp;objects and implements&nbsp;<code>eZ\Publish\Core\=
MVC\Symfony\View\Provider\Location</code>&nbsp;interface.</li>
<li>A&nbsp;<code>View\Provider\Content</code>&nbsp;only deals with&nbsp;<co=
de>ContentInfo</code>&nbsp;objects and implements&nbsp;<code>eZ\Publish\Cor=
e\MVC\Symfony\View\Provider\Content</code>&nbsp;interface.</li>
</ul>
<h4 id=3D"ContentRendering-WhentodevelopacustomView\Provider\(Location|Cont=
ent)">When to develop a custom <code>View\Provider\(Location|Content)</code=
></h4>
<ul>
<li>You want a custom template selection based on a very specific state of =
your application</li>
<li>You depend on external resources for view selection</li>
<li>You want to override the default one (based on configuration) for some =
reason</li>
</ul>
<p><code>View\Provider</code> objects need to be properly registered in the=
 service container with the <code> <strong>exponential.location_view_provider=
</strong> </code> or&nbsp;<code> <strong>exponential.content_view_provider</s=
trong> </code>&nbsp;service tag.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">parameters:
    acme.location_view_provider.class: Acme\DemoBundle\Content\MyLocationVi=
ewProvider

services:
    acme.location_view_provider:
        class: %ezdemo.location_view_provider.class%
        tags:
            - {name: exponential.location_view_provider, priority: 30}

</pre>=20
</div>
</div>
<div class=3D"table-wrap">
<table class=3D"confluenceTable">
<tbody>
<tr>
<th class=3D"confluenceTh">Tag attribute name</th>
<th class=3D"confluenceTh">Usage</th>
</tr>
<tr>
<td class=3D"confluenceTd">priority</td>
<td class=3D"confluenceTd"><p>An integer giving the priority to the <code> =
<span>View\Provider\(Content|Location)</span> </code> in the <code>View\Man=
ager</code>.</p><p>The priority range is <strong>from -255 to 255</strong><=
/p></td>
</tr>
</tbody>
</table>
</div>
<h4 id=3D"ContentRendering-Example.1">Example</h4>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>Custom View\Provider\Location</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">&lt;?php

namespace Acme\DemoBundle\Content;

use eZ\Publish\Core\MVC\Symfony\View\ContentView;
use eZ\Publish\Core\MVC\Symfony\View\Provider\Location as LocationViewProvi=
der;
use eZ\Publish\API\Repository\Values\Content\Location;

class MyLocationViewProvider implements LocationViewProvider
{
    /**
     * Returns a ContentView object corresponding to $location, or void if =
not applicable
     *
     * @param \eZ\Publish\API\Repository\Values\Content\Location $location
     * @param string $viewType
     * @return \eZ\Publish\Core\MVC\Symfony\View\ContentView|null
     */
    public function getView( Location $location, $viewType )
    {
        // Let's check location Id
        switch ( $location-&gt;id )
        {
            // Special template for home page, passing "foo" variable to th=
e template
            case 2:
                return new ContentView( "AcmeDemoBundle:$viewType:home.html=
.twig", array( 'foo' =3D&gt; 'bar' ) );
        }
&nbsp;
       &nbsp;// ContentType identifier (formerly "class identifier")
        switch ( $location-&gt;contentInfo-&gt;contentType-&gt;identifier )
        {
            // For view full, it will load AcmeDemoBundle:full:small_folder=
.html.twig
            case 'folder':
                return new ContentView( "AcmeDemoBundle:$viewType:small_fol=
der.html.twig" );
        }
    }
}</pre>=20
</div>
</div>
<h2 id=3D"ContentRendering-BinaryandMediadownload">Binary and Media downloa=
d</h2>
<p>Unlike image files, files stored in BinaryFile or Media Fields may be li=
mited to certain User Roles. As such, they are not publicly downloadable fr=
om disk, and are instead&nbsp;served by Symfony, using a custom route that =
runs the necessary checks. This route is automatically generated as the&nbs=
p;<code>url</code> property for those Fields values.</p>
<h3 id=3D"ContentRendering-Thecontent/downloadroute">The content/download r=
oute</h3>
<p>The route follows this pattern:&nbsp;<code>/content/download/{contentId}=
/{fieldIdentifier}/{filename}</code>.&nbsp;Example:&nbsp;<code>/content/dow=
nload/68/file/My-file.pdf.</code></p>
<p>It also accepts optional query parameters:</p>
<ul>
<li><code>version</code>:&nbsp;<span>the version number that the file must =
be downloaded for. Requires the versionview permission. If not specified, t=
he published version is used.</span></li>
<li><code>inLanguage</code>:&nbsp;<span>The language the file should be dow=
nloaded in. If not specified, the most prioritized language for the siteacc=
ess will be used.</span></li>
</ul>
<p>The&nbsp;<a href=3D"#ContentRendering-ez_render_field"> <span class=3D"c=
onfluence-link">ez_render_field</span> </a> <span class=3D"confluence-link"=
>&nbsp;</span>twig helper will by default generate a working link.</p>
<h4 id=3D"ContentRendering-RESTAPI:The`uri`propertycontainsavaliddownloadUR=
L">REST API: The `uri` property contains a valid download URL</h4>
<p>The <code>uri</code> property of Binary Fields in REST contain a valid U=
RL, of the same format than the Public API, prefixed with the same host tha=
n the REST Request.</p>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>For <a href=3D"/display/DEVELOPER/REST+API+Guide"> <span class=3D"conflu=
ence-link">more information about REST API</span> see the documentation</a>=
.</p>
</div>
</div>
<h1 id=3D"ContentRendering-Reference"><a name=3D"Newdownloadroute" rel=3D"n=
ofollow"></a>Reference</h1>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<p class=3D"title">Symfony &amp; Twig template functions/filters/tags</p>
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>For template functionality provided by Symfony Framework, see <a href=3D=
"http://symfony.com/doc/current/reference/twig_reference.html" class=3D"ext=
ernal-link" rel=3D"nofollow">Symfony Twig Extensions Reference page</a>. Fo=
r those provided by the underlying Twig template engine, see <a href=3D"htt=
p://twig.sensiolabs.org/documentation#reference" class=3D"external-link" re=
l=3D"nofollow">Twig Reference page</a></p>
</div>
</div>
<h2 id=3D"ContentRendering-Twigfunctionsreference">Twig functions reference=
</h2>
<p>See <a href=3D"/display/DEVELOPER/Twig+Functions+Reference">Twig Functio=
ns Reference</a> for detailed information on all available Twig functions.<=
/p>
<h1 id=3D"ContentRendering-Extensibility">Extensibility</h1>
<h2 id=3D"ContentRendering-Events">Events</h2>
<h3 id=3D"ContentRendering-Introduction.1">Introduction</h3>
<p>This page presents the events that are triggered by eZ Platform.</p>
<h3 id=3D"ContentRendering-ExponentialCore">Exponential Core</h3>
<div class=3D"table-wrap">
<table class=3D"confluenceTable">
<tbody>
<tr>
<th class=3D"confluenceTh">Event name</th>
<th class=3D"confluenceTh">Triggered when...</th>
<th class=3D"confluenceTh">Usage</th>
</tr>
<tr>
<td colspan=3D"1" class=3D"confluenceTd"><strong> <code>exponential.siteacces=
s</code> </strong></td>
<td colspan=3D"1" class=3D"confluenceTd">After the SiteAccess matching has =
occurred.</td>
<td colspan=3D"1" class=3D"confluenceTd"><p>Gives further control on the ma=
tched SiteAccess.</p><p>The event listener method receives an <code>eZ\Publ=
ish\Core\MVC\Symfony\Event\PostSiteAccessMatchEvent</code>&nbsp;object.</p>=
</td>
</tr>
<tr>
<td colspan=3D"1" class=3D"confluenceTd"><strong> <code>exponential.pre_conte=
nt_view</code> </strong></td>
<td colspan=3D"1" class=3D"confluenceTd">Right before a view is rendered fo=
r a content item, via the content view controller.</td>
<td colspan=3D"1" class=3D"confluenceTd"><p>This event is triggered by the =
view manager and allows you to inject additional parameters to the content =
view template.</p>The event listener method receives an <code>eZ\Publish\<s=
pan>Core\</span>MVC\Symfony\Event\PreContentViewEvent </code>object.<p>&nbs=
p;</p></td>
</tr>
<tr>
<td colspan=3D"1" class=3D"confluenceTd"><code> <strong>exponential.api.conte=
ntException</strong> </code></td>
<td colspan=3D"1" class=3D"confluenceTd">The API throws an exception that c=
ould not be caught internally (missing field type, internal error...).</td>
<td colspan=3D"1" class=3D"confluenceTd"><p>This event allows further progr=
ammatic handling (like rendering a custom view) for the exception thrown.</=
p><p>The event listener method receives an <code>eZ\Publish\<span>Core\</sp=
an>MVC\Symfony\Event\APIContentExceptionEvent</code> object.</p></td>
</tr>
</tbody>
</table>
</div>
</div>=20
</div>=20
<div class=3D"cell aside" data-type=3D"aside">=20
<div class=3D"innerCell">=20
<h4 id=3D"ContentRendering-Inthistopic:">In this topic:</h4>
<p><style type=3D"text/css">/*<![CDATA[*/
div.rbtoc1485850606111 {padding: 0px;}
div.rbtoc1485850606111 ul {list-style: disc;margin-left: 0px;}
div.rbtoc1485850606111 li {margin-left: 0px;padding-left: 0px;}

/*]]>*/</style></p>
<div class=3D"toc-macro rbtoc1485850606111">=20
<ul class=3D"toc-indentation">=20
<li><a href=3D"#ContentRendering-Introduction">Introduction</a>=20
<ul class=3D"toc-indentation">=20
<li><a href=3D"#ContentRendering-TheViewController">The ViewController</a><=
/li>=20
</ul> </li>=20
<li><a href=3D"#ContentRendering-Configuration">Configuration</a>=20
<ul class=3D"toc-indentation">=20
<li><a href=3D"#ContentRendering-Viewproviderconfiguration">View provider c=
onfiguration</a></li>=20
<li><a href=3D"#ContentRendering-Defaultviewtemplates">Default view templat=
es</a></li>=20
</ul> </li>=20
<li><a href=3D"#ContentRendering-Usage">Usage</a>=20
<ul class=3D"toc-indentation">=20
<li><a href=3D"#ContentRendering-Viewselection">View selection</a></li>=20
<li><a href=3D"#ContentRendering-Contentviewtemplates">Content view templat=
es</a></li>=20
<li><a href=3D"#ContentRendering-Customcontrollers">Custom controllers</a><=
/li>=20
<li><a href=3D"#ContentRendering-Embeddedimages">Embedded images</a></li>=
=20
<li><a href=3D"#ContentRendering-Querycontroller">Query controller</a></li>=
=20
<li><a href=3D"#ContentRendering-Makinglinkstootherlocations">Making links =
to other locations</a></li>=20
<li><a href=3D"#ContentRendering-Renderembeddedcontentobjects">Render embed=
ded content objects</a></li>=20
<li><a href=3D"#ContentRendering-Renderblock">Render block</a></li>=20
<li><a href=3D"#ContentRendering-ESI">ESI</a></li>=20
<li><a href=3D"#ContentRendering-Asynchronousrendering">Asynchronous render=
ing</a></li>=20
<li><a href=3D"#ContentRendering-ContentandLocationviewproviders">Content a=
nd Location view providers</a></li>=20
<li><a href=3D"#ContentRendering-BinaryandMediadownload">Binary and Media d=
ownload</a></li>=20
</ul> </li>=20
<li><a href=3D"#ContentRendering-Reference">Reference</a>=20
<ul class=3D"toc-indentation">=20
<li><a href=3D"#ContentRendering-Twigfunctionsreference">Twig functions ref=
erence</a></li>=20
</ul> </li>=20
<li><a href=3D"#ContentRendering-Extensibility">Extensibility</a>=20
<ul class=3D"toc-indentation">=20
<li><a href=3D"#ContentRendering-Events">Events</a></li>=20
</ul> </li>=20
</ul>=20
</div>
<p></p>
<h4 id=3D"ContentRendering-Relatedtopics:">Related topics:</h4>
<p><a href=3D"/display/DEVELOPER/Injecting+parameters+in+content+views">Inj=
ecting parameters in content views</a></p>
</div>=20
</div>=20
</div>=20
</div>
    </div>
</body>
</html>
------=_Part_2741_1338822572.1485850606311--
