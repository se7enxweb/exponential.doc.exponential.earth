Message-ID: <624808228.4282.1485862245592.JavaMail.confluence@ip-10-127-227-164>
Subject: Exported From Confluence
MIME-Version: 1.0
Content-Type: multipart/related; 
	boundary="----=_Part_4281_1804979655.1485862245592"

------=_Part_4281_1804979655.1485862245592
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Content-Location: file:///C:/exported.html

<html xmlns:o=3D'urn:schemas-microsoft-com:office:office'
      xmlns:w=3D'urn:schemas-microsoft-com:office:word'
      xmlns:v=3D'urn:schemas-microsoft-com:vml'
      xmlns=3D'urn:w3-org-ns:HTML'>
<head>
    <meta http-equiv=3D"Content-Type" content=3D"text/html; charset=3Dutf-8=
">
    <title>Using Varnish</title>
    <!--[if gte mso 9]>
    <xml>
        <o:OfficeDocumentSettings>
            <o:TargetScreenSize>1024x640</o:TargetScreenSize>
            <o:PixelsPerInch>72</o:PixelsPerInch>
            <o:AllowPNG/>
        </o:OfficeDocumentSettings>
        <w:WordDocument>
            <w:View>Print</w:View>
            <w:Zoom>90</w:Zoom>
            <w:DoNotOptimizeForBrowser/>
        </w:WordDocument>
    </xml>
    <![endif]-->
    <style>
                <!--
        @page Section1 {
            size: 8.5in 11.0in;
            margin: 1.0in;
            mso-header-margin: .5in;
            mso-footer-margin: .5in;
            mso-paper-source: 0;
        }

        td {
            page-break-inside: avoid;
        }

        tr {
            page-break-after: avoid;
        }

        div.Section1 {
            page: Section1;
        }

        /* Confluence print stylesheet. Common to all themes for print medi=
a */
/* Full of !important until we improve batching for print CSS */

@media print {
    #main {
        padding-bottom: 1em !important; /* The default padding of 6em is to=
o much for printouts */
    }

    body {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        font-size: 10pt;
        line-height: 1.2;
    }

    body, #full-height-container, #main, #page, #content, .has-personal-sid=
ebar #content {
        background: #fff !important;
        color: #000 !important;
        border: 0 !important;
        width: 100% !important;
        height: auto !important;
        min-height: auto !important;
        margin: 0 !important;
        padding: 0 !important;
        display: block !important;
    }

    a, a:link, a:visited, a:focus, a:hover, a:active {
        color: #000;
    }

    #content h1,
    #content h2,
    #content h3,
    #content h4,
    #content h5,
    #content h6 {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        page-break-after: avoid;
    }

    pre {
        font-family: Monaco, "Courier New", monospace;
    }

    #header,
    .aui-header-inner,
    #navigation,
    #sidebar,
    .sidebar,
    #personal-info-sidebar,
    .ia-fixed-sidebar,
    .page-actions,
    .navmenu,
    .ajs-menu-bar,
    .noprint,
    .inline-control-link,
    .inline-control-link a,
    a.show-labels-editor,
    .global-comment-actions,
    .comment-actions,
    .quick-comment-container,
    #addcomment {
        display: none !important;
    }

    .comment .date::before {
        content: none !important; /* remove middot for print view */
    }

    h1.pagetitle img {
        height: auto;
        width: auto;
    }

    .print-only {
        display: block;
    }

    #footer {
        position: relative !important; /* CONF-17506 Place the footer at en=
d of the content */
        margin: 0;
        padding: 0;
        background: none;
        clear: both;
    }

    #poweredby {
        border-top: none;
        background: none;
    }

    #poweredby li.print-only {
        display: list-item;
        font-style: italic;
    }

    #poweredby li.noprint {
        display: none;
    }

    /* no width controls in print */
    .wiki-content .table-wrap,
    .wiki-content p,
    .panel .codeContent,
    .panel .codeContent pre,
    .image-wrap {
        overflow: visible !important;
    }

    /* TODO - should this work? */
    #children-section,
    #comments-section .comment,
    #comments-section .comment .comment-body,
    #comments-section .comment .comment-content,
    #comments-section .comment p {
        page-break-inside: avoid;
    }

    #page-children a {
        text-decoration: none;
    }

    /**
     hide twixies

     the specificity here is a hack because print styles
     are getting loaded before the base styles. */
    #comments-section.pageSection .section-header,
    #comments-section.pageSection .section-title,
    #children-section.pageSection .section-header,
    #children-section.pageSection .section-title,
    .children-show-hide {
        padding-left: 0;
        margin-left: 0;
    }

    .children-show-hide.icon {
        display: none;
    }

    /* personal sidebar */
    .has-personal-sidebar #content {
        margin-right: 0px;
    }

    .has-personal-sidebar #content .pageSection {
        margin-right: 0px;
    }
}
-->
    </style>
</head>
<body>
    <h1>Using Varnish</h1>
    <div class=3D"Section1">
        <p>Exponential 5 being built on top of Symfony 2, it uses standard H=
TTP cache headers. By default the Symfony 2 reverse proxy, written in PHP, =
is used to handle cache, but it can be easily replaced with any other rever=
se proxy like Varnish.</p>
<h2 id=3D"UsingVarnish-ConfigureVarnish">Configure Varnish</h2>
<div class=3D"confluence-information-macro confluence-information-macro-not=
e">
<span class=3D"aui-icon aui-icon-small aui-iconfont-warning confluence-info=
rmation-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>Provided VCL example is given for Varnish 3.x only</p>
</div>
</div>
<p>The first thing is to configure Varnish to advertise ESI usage and to ac=
tivate cache invalidation:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>exponential5.vcl</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;"># Varnish 3.x - Exponential 5 - Complete VCL
&nbsp;
# Our Backend - We assume that Exponential Web server listen on port 80
backend exponential {
    .host =3D "127.0.0.1";
    .port =3D "80";
}
=20
# ACL for purgers IP.
# Provide here IP addresses that are allowed to send PURGE requests.
# PURGE requests will be sent by the backend.
acl purgers {
    "127.0.0.1";
    "192.168.0.0"/16;
}
=20
# Called at the beginning of a request, after the complete request has been=
 received
sub vcl_recv {
=20
    # Set the backend
    set req.backend =3D exponential;
=20
    # Advertise Symfony for ESI support
    set req.http.Surrogate-Capability =3D "abc=3DESI/1.0";
=20
    # Add a unique header containing the client address (only for master re=
quest)
    # Please note that /_fragment URI can change in Symfony configuration
    if (!req.url ~ "^/_fragment") {
        if (req.http.x-forwarded-for) {
            set req.http.X-Forwarded-For =3D req.http.X-Forwarded-For + ", =
" + client.ip;
        } else {
            set req.http.X-Forwarded-For =3D client.ip;
        }
    }
=20
    # Handle purge
    # Only works with "multiple_http" purge method
    if (req.request =3D=3D "PURGE") {
        if (!client.ip ~ purgers) {
            error 405 "Method not allowed";
        }
&nbsp;
        if ( req.http.X-Location-Id =3D=3D "*" ) {
            # Purge all locations
            ban( "obj.http.X-Location-Id ~ ^[0-9]+$" );
            error 200 "Purge all locations done.";
        } elseif ( req.http.X-Location-Id ) {
            # Purge location by its locationId
            ban( "obj.http.X-Location-Id =3D=3D " + req.http.X-Location-Id =
);
            error 200 "Purge of content connected to the location id(" + re=
q.http.X-Location-Id + ") done.";
        }
    }
=20
    # Normalize the Accept-Encoding headers
    if (req.http.Accept-Encoding) {
        if (req.http.Accept-Encoding ~ "gzip") {
            set req.http.Accept-Encoding =3D "gzip";
        } elsif (req.http.Accept-Encoding ~ "deflate") {
            set req.http.Accept-Encoding =3D "deflate";
        } else {
            unset req.http.Accept-Encoding;
        }
    }
=20
    # Don't cache Authenticate &amp; Authorization
    if (req.http.Authenticate || req.http.Authorization) {
        return(pass);
    }
&nbsp;
    # Don't cache requests other than GET and HEAD.
    if (req.request !=3D "GET" &amp;&amp; req.request !=3D "HEAD") {
        return (pass);
    }
=20
    # Don't cache authenticated sessions
    if (req.http.Cookie &amp;&amp; req.http.Cookie ~ "is_logged_in=3D" ) {
        return(pass);
    }
=20
    # If it passes all these tests, do a lookup anyway;
    return (lookup);
}
=20
# Called when the requested object has been retrieved from the backend
sub vcl_fetch {
=20
    # Optimize to only parse the Response contents from Symfony
    if (beresp.http.Surrogate-Control ~ "ESI/1.0") {
        unset beresp.http.Surrogate-Control;
        set beresp.do_esi =3D true;
    }
=20
    # Don't cache response with Set-Cookie
    if ( beresp.http.Set-Cookie ) {
        set beresp.ttl =3D 0s;
        return (hit_for_pass);
    }
=20
    # Respect the Cache-Control=3Dprivate header from the backend
    if (beresp.http.Cache-Control ~ "private") {
        set beresp.ttl =3D 0s;
        return (hit_for_pass);
    }
=20
    return (deliver);
}

</pre>=20
</div>
</div>
<p>You can of course add additional rules if you need.</p>
<h2 id=3D"UsingVarnish-ConfigureExponential">Configure Exponential</h2>
<h3 id=3D"UsingVarnish-Updateyourfrontcontroller">Update your front control=
ler</h3>
<p>By default your front controller (<code>index.php</code>) uses the built=
-in reverse proxy, <code>EzPublishCache</code>. In order to use Varnish, yo=
u need to deactivate it by commenting the line where <code>EzPublishCache</=
code> is instantiated:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">&lt;?php
// ...
require_once __DIR__ . '/../exponential/EzPublishKernel.php';
require_once __DIR__ . '/../exponential/EzPublishCache.php';
$kernel =3D new EzPublishKernel( 'prod', false );
$kernel-&gt;loadClassCache();
// Comment the following line if you use an external reverse proxy (e.g. Va=
rnish)
// $kernel =3D new EzPublishCache( $kernel );
$request =3D Request::createFromGlobals();
// Uncomment the following if your application is behind a reverse proxy yo=
u manage and trust.
// (see http://fabien.potencier.org/article/51/create-your-own-framework-on=
-top-of-the-symfony2-components-part-2)
//Request::trustProxyData();
$response =3D $kernel-&gt;handle( $request );
$response-&gt;send();
$kernel-&gt;terminate( $request, $response );</pre>=20
</div>
</div>
<p>&nbsp;</p>
<h3 id=3D"UsingVarnish-UpdateYMLconfiguration">Update YML configuration</h3=
>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>exponential.yml</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">exponential:
    http_cache:
        # Use multiple_http method for purging content
        purge_type: multiple_http
&nbsp;
    system:
        # Assuming that my_siteaccess_group your frontend AND backend sitea=
ccesses
        my_siteaccess_group:
            http_cache:
                # Fill in your Varnish server(s) address(es).
                purge_servers: [http://my.varnish.server:6081]</pre>=20
</div>
</div>
<p>Et voil=C3=A0&nbsp;!</p>
    </div>
</body>
</html>
------=_Part_4281_1804979655.1485862245592--
