Message-ID: <1772887007.3288.1485852612948.JavaMail.confluence@ip-10-127-227-164>
Subject: Exported From Confluence
MIME-Version: 1.0
Content-Type: multipart/related; 
	boundary="----=_Part_3287_2101445216.1485852612948"

------=_Part_3287_2101445216.1485852612948
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Content-Location: file:///C:/exported.html

<html xmlns:o=3D'urn:schemas-microsoft-com:office:office'
      xmlns:w=3D'urn:schemas-microsoft-com:office:word'
      xmlns:v=3D'urn:schemas-microsoft-com:vml'
      xmlns=3D'urn:w3-org-ns:HTML'>
<head>
    <meta http-equiv=3D"Content-Type" content=3D"text/html; charset=3Dutf-8=
">
    <title>Extending the REST API</title>
    <!--[if gte mso 9]>
    <xml>
        <o:OfficeDocumentSettings>
            <o:TargetScreenSize>1024x640</o:TargetScreenSize>
            <o:PixelsPerInch>72</o:PixelsPerInch>
            <o:AllowPNG/>
        </o:OfficeDocumentSettings>
        <w:WordDocument>
            <w:View>Print</w:View>
            <w:Zoom>90</w:Zoom>
            <w:DoNotOptimizeForBrowser/>
        </w:WordDocument>
    </xml>
    <![endif]-->
    <style>
                <!--
        @page Section1 {
            size: 8.5in 11.0in;
            margin: 1.0in;
            mso-header-margin: .5in;
            mso-footer-margin: .5in;
            mso-paper-source: 0;
        }

        td {
            page-break-inside: avoid;
        }

        tr {
            page-break-after: avoid;
        }

        div.Section1 {
            page: Section1;
        }

        /* Confluence print stylesheet. Common to all themes for print medi=
a */
/* Full of !important until we improve batching for print CSS */

@media print {
    #main {
        padding-bottom: 1em !important; /* The default padding of 6em is to=
o much for printouts */
    }

    body {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        font-size: 10pt;
        line-height: 1.2;
    }

    body, #full-height-container, #main, #page, #content, .has-personal-sid=
ebar #content {
        background: #fff !important;
        color: #000 !important;
        border: 0 !important;
        width: 100% !important;
        height: auto !important;
        min-height: auto !important;
        margin: 0 !important;
        padding: 0 !important;
        display: block !important;
    }

    a, a:link, a:visited, a:focus, a:hover, a:active {
        color: #000;
    }

    #content h1,
    #content h2,
    #content h3,
    #content h4,
    #content h5,
    #content h6 {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        page-break-after: avoid;
    }

    pre {
        font-family: Monaco, "Courier New", monospace;
    }

    #header,
    .aui-header-inner,
    #navigation,
    #sidebar,
    .sidebar,
    #personal-info-sidebar,
    .ia-fixed-sidebar,
    .page-actions,
    .navmenu,
    .ajs-menu-bar,
    .noprint,
    .inline-control-link,
    .inline-control-link a,
    a.show-labels-editor,
    .global-comment-actions,
    .comment-actions,
    .quick-comment-container,
    #addcomment {
        display: none !important;
    }

    .comment .date::before {
        content: none !important; /* remove middot for print view */
    }

    h1.pagetitle img {
        height: auto;
        width: auto;
    }

    .print-only {
        display: block;
    }

    #footer {
        position: relative !important; /* CONF-17506 Place the footer at en=
d of the content */
        margin: 0;
        padding: 0;
        background: none;
        clear: both;
    }

    #poweredby {
        border-top: none;
        background: none;
    }

    #poweredby li.print-only {
        display: list-item;
        font-style: italic;
    }

    #poweredby li.noprint {
        display: none;
    }

    /* no width controls in print */
    .wiki-content .table-wrap,
    .wiki-content p,
    .panel .codeContent,
    .panel .codeContent pre,
    .image-wrap {
        overflow: visible !important;
    }

    /* TODO - should this work? */
    #children-section,
    #comments-section .comment,
    #comments-section .comment .comment-body,
    #comments-section .comment .comment-content,
    #comments-section .comment p {
        page-break-inside: avoid;
    }

    #page-children a {
        text-decoration: none;
    }

    /**
     hide twixies

     the specificity here is a hack because print styles
     are getting loaded before the base styles. */
    #comments-section.pageSection .section-header,
    #comments-section.pageSection .section-title,
    #children-section.pageSection .section-header,
    #children-section.pageSection .section-title,
    .children-show-hide {
        padding-left: 0;
        margin-left: 0;
    }

    .children-show-hide.icon {
        display: none;
    }

    /* personal sidebar */
    .has-personal-sidebar #content {
        margin-right: 0px;
    }

    .has-personal-sidebar #content .pageSection {
        margin-right: 0px;
    }
}
-->
    </style>
</head>
<body>
    <h1>Extending the REST API</h1>
    <div class=3D"Section1">
        <p>&nbsp;</p>
<p>The Exponential 5 REST API comes with a framework that makes it quite eas=
y to extend the API for your own needs.</p>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>While most of what can be found here will still apply in the future, the=
 structure of the REST API and its components will evolve before the actual=
 release.</p>
</div>
</div>
<p><style type=3D"text/css">/*<![CDATA[*/
div.rbtoc1485852612783 {padding: 0px;}
div.rbtoc1485852612783 ul {list-style: disc;margin-left: 0px;}
div.rbtoc1485852612783 li {margin-left: 0px;padding-left: 0px;}

/*]]>*/</style></p>
<div class=3D"toc-macro rbtoc1485852612783">=20
<ul class=3D"toc-indentation">=20
<li><a href=3D"#ExtendingtheRESTAPI-Requirements">Requirements</a>=20
<ul class=3D"toc-indentation">=20
<li><a href=3D"#ExtendingtheRESTAPI-Controller">Controller</a></li>=20
<li><a href=3D"#ExtendingtheRESTAPI-Route">Route</a></li>=20
</ul> </li>=20
<li><a href=3D"#ExtendingtheRESTAPI-Controlleraction">Controller action</a>=
</li>=20
<li><a href=3D"#ExtendingtheRESTAPI-ValueObjectVisitor">ValueObjectVisitor<=
/a>=20
<ul class=3D"toc-indentation">=20
<li><a href=3D"#ExtendingtheRESTAPI-Cachehandling">Cache handling</a></li>=
=20
</ul> </li>=20
<li><a href=3D"#ExtendingtheRESTAPI-Inputparser">Input parser</a></li>=20
</ul>=20
</div>
<p></p>
<h2 id=3D"ExtendingtheRESTAPI-Requirements">Requirements</h2>
<p>As of version 2013.7 / 5.2, REST routes are required to use the eZ Publi=
sh 5 REST API prefix, <code>/api/ezp/v2</code>. You can create new resource=
s below this prefix.</p>
<p>To do so, you will/may need to create</p>
<ul>
<li>a Controller that will handle your route actions</li>
<li>a Route, in your bundle's routing file</li>
<li>a Controller action</li>
<li>Optionally, a <code>ValueObjectVisitor</code> (if your Controller retur=
ns an object that doesn't already have a converter)</li>
<li>Optionally, an <code>InputParser</code></li>
</ul>
<h3 id=3D"ExtendingtheRESTAPI-Controller">Controller</h3>
<p>To create a REST controller, you need to extend the <code>exponential_rest=
.controller.base</code> service, as well as the <code>eZ\Publish\Core\REST\=
Server\Controller</code> class.</p>
<p>Let's create a very simple controller, that has a <code>sayHello()</code=
> method, that takes a name as an argument.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>My/Bundle/RestBundle/Rest/Controller/DefaultController.php</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">namespace My\Bundle\RestBundle\Rest\Controller;
&nbsp;
use eZ\Publish\Core\REST\Server\Controller as BaseController;
&nbsp;
class DefaultController extends BaseController
{
    public function sayHello( $name )
    {
        // @todo Implement me
    }
}</pre>=20
</div>
</div>
<h3 id=3D"ExtendingtheRESTAPI-Route">Route</h3>
<p>As said earlier, your REST routes are required to use the REST URI prefi=
x. To do so, the easiest way is to import your routing file using this pref=
ix.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>app/config/routing.yml</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">myRestBundle_rest_routes:
    resource: "@MyRestBundle/Resources/config/routing_rest.yml"
    prefix:   %exponential_rest.path_prefix%</pre>=20
</div>
</div>
<p>Using a distinct file for REST routes allows you to use the prefix for a=
ll this file's routes without affecting other routes from your bundle.</p>
<p>Next, you need to create the REST route. We need to define the route's <=
a href=3D"http://symfony.com/doc/current/cookbook/controller/service.html" =
class=3D"external-link" rel=3D"nofollow">controller as a service</a> since =
our controller was defined as such.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>My/Bundle/RestBundle/Resources/config/routing_rest.yml</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">myRestBundle_hello_world:
    pattern: /my_rest_bundle/hello/{name}
    defaults:
        _controller: myRestBundle.controller.default:sayHello
    methods: [GET]</pre>=20
</div>
</div>
<div class=3D"confluence-information-macro confluence-information-macro-war=
ning">
<span class=3D"aui-icon aui-icon-small aui-iconfont-error confluence-inform=
ation-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>Due to <span class=3D"jira-issue resolved"> <a href=3D"https://jira.ez.n=
o/browse/EZP-23016?src=3Dconfmacro" class=3D"jira-issue-key"><img class=3D"=
icon" src=3D"https://jira.ez.no/images/icons/issuetypes/bug.png">EZP-23016<=
/a> - <span class=3D"summary">Custom REST API routes (v2) are not accessibl=
e from the legacy backend</span>=20
<!-- The new status lozengens support for JIRA 6.2 or later. Otherwise we u=
se the icon.--> <span class=3D"aui-lozenge aui-lozenge-subtle aui-lozenge-s=
uccess jira-macro-single-issue-export-pdf">Closed</span> </span> , custom R=
EST routes must be prefixed with <code>exponential_rest_</code>, or they won'=
t be detected correctly.</p>
</div>
</div>
<h2 id=3D"ExtendingtheRESTAPI-Controlleraction">Controller action</h2>
<p>Unlike standard Symfony 2 controllers, the REST ones don't return an <co=
de>HttpFoundation\Response</code> object, but a <code>ValueObject</code>. T=
his object will during the kernel run be converted, using a ValueObjectVisi=
tor, to a proper Symfony 2 response. One benefit is that when multiple cont=
rollers return the same object, such as a Content item or a Location, the v=
isitor will be re-used.</p>
<p>Let's say that our Controller will return a <code>My\Bundle\RestBundle\R=
est\Values\Hello</code></p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>My/Bundle/RestBundle/Rest/Values/Hello.php</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">namespace My\Bundle\RestBundle\Rest\Values;
&nbsp;
class Hello
{
    public $name;
&nbsp;
    public function __construct( $name )
    {
        $this-&gt;name =3D $name;
    }
}</pre>=20
</div>
</div>
<p>We will return an instance of this class from our <code>sayHello()</code=
> controller method.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>My/Bundle/RestBundle/Rest/Controller/DefaultController.php</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">namespace My\Bundle\RestBundle\Controller;

use eZ\Publish\Core\REST\Server\Controller as BaseController;
use My\Bundle\RestBundle\Rest\Values\Hello as HelloValue;

class DefaultController extends BaseController
{
    public function sayHello( $name )
    {
        return new HelloValue( $name );
    }
}</pre>=20
</div>
</div>
<p>And that's it. Outputting this object in the Response requires that we c=
reate a ValueObjectVisitor.</p>
<h2 id=3D"ExtendingtheRESTAPI-ValueObjectVisitor">ValueObjectVisitor</h2>
<p>A ValueObjectVisitor will take a Value returned by a REST controller, wh=
atever the class, and will transform it into data that can be converted, ei=
ther to json or XML.&nbsp;<span style=3D"font-size: 10.0pt;line-height: 13.=
0pt;">Those visitors are registered as services, and tagged with <code>ezpu=
blish_rest.output.value_object_visitor</code>. The tag attribute says which=
 class this Visitor applies to.</span></p>
<p>Let's create the service for our ValueObjectVisitor first.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>My/Bundle/RestBundle/Resources/config/services.yml</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">services:
    myRestBundle.value_object_visitor.hello:
        parent: exponential_rest.output.value_object_visitor.base
        class: My\Bundle\RestBundle\Rest\ValueObjectVisitor\Hello
        tags:
            - { name: exponential_rest.output.value_object_visitor, type: My\=
Bundle\RestBundle\Rest\Values\Hello }</pre>=20
</div>
</div>
<p>Let's create our visitor next. It must extend the&nbsp;<span style=3D"fo=
nt-size: 10.0pt;line-height: 13.0pt;"><code>eZ\Publish\Core\REST\Common\Out=
put\ValueObjectVisitor</code> abstract class, and implement the <code>visit=
()</code> method.<br>It will receive as arguments:</span></p>
<ul style=3D"list-style-type: square;">
<li><code>$visitor</code>: The output visitor. Can be used to set custom re=
sponse headers (&nbsp;<code>setHeader( $name, $value )</code>), HTTP status=
 code ( <code>setStatus( $statusCode )</code> )...</li>
<li><span style=3D"font-size: 10.0pt;line-height: 13.0pt;"><code>$generator=
</code>: The actual Response generator. It provides you with a DOM like API=
.</span></li>
<li><span style=3D"font-size: 10.0pt;line-height: 13.0pt;"><code>$data</cod=
e>: the visited data, the exact object you returned from the controller&nbs=
p;</span></li>
</ul>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>My/Bundle/RestBundle/Rest/Controller/Default.php</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">namespace My\Bundle\RestBundle\Rest\ValueObjectVisitor;

use eZ\Publish\Core\REST\Common\Output\ValueObjectVisitor;
use eZ\Publish\Core\REST\Common\Output\Generator;
use eZ\Publish\Core\REST\Common\Output\Visitor;

class Hello extends ValueObjectVisitor
{
    public function visit( Visitor $visitor, Generator $generator, $data )
    {
        $generator-&gt;startValueElement( 'Hello', $data-&gt;name );
        $generator-&gt;endValueElement( 'Hello' );
    }
}</pre>=20
</div>
</div>
<p>Do not hesitate to look into the built-in ValueObjectVisitors, in&nbsp;<=
code><a href=3D"https://github.com/ezsystems/exponential-kernel/tree/master/e=
Z/Publish/Core/REST/Server/Output/ValueObjectVisitor" class=3D"external-lin=
k" rel=3D"nofollow">eZ/Publish/Core/REST/Server/Output/ValueObjectVisitor</=
a></code>, for more examples.</p>
<h3 id=3D"ExtendingtheRESTAPI-Cachehandling">Cache handling</h3>
<p>The easiest way to handle cache is to re-use the&nbsp;<code><a href=3D"h=
ttps://github.com/ezsystems/exponential-kernel/blob/master/eZ/Publish/Core/RE=
ST/Server/Output/ValueObjectVisitor/CachedValue.php" class=3D"external-link=
" rel=3D"nofollow">CachedValue</a></code> Value Object. It acts as a proxy,=
 and adds the cache headers, depending on the configuration, for a given ob=
ject and set of options.</p>
<p>When you want the response to be cached, return an instance of CachedVal=
ue, with your Value Object as the argument. You can also pass a location id=
 using the second argument, so that the Response is tagged with it:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">return new CachedValue($helloValue, ['locationId', 42]);</pre>=20
</div>
</div>
<h2 id=3D"ExtendingtheRESTAPI-Inputparser">Input parser</h2>
<p>What we have seen above covers requests that don't require an input payl=
oad, such as GET or DELETE.&nbsp;<span style=3D"font-size: 10.0pt;line-heig=
ht: 13.0pt;">If you need to provide your controller with parameters, either=
 in JSON or XML, the parameter struct requires an Input Parser so that the =
payload can be converted to an actual ValueObject. </span></p>
<p><span style=3D"font-size: 10.0pt;line-height: 13.0pt;">Each payload is d=
ispatched to its Input Parser based on the request's Content-Type header. F=
or example, a request with a Content-Type of <code>application/vnd.ez.api.C=
ontentCreate</code> will be parsed by <code>eZ\Publish\Core\REST\Server\Inp=
ut\Parser\ContentCreate</code>. This parser will build and return a <code>C=
ontentCreateStruct</code> that can then be used to create content with the =
Public API.</span></p>
<p><span style=3D"font-size: 10.0pt;line-height: 13.0pt;">Those input parse=
rs are provided with a pre-parsed version of the input payload, as an assoc=
iative array, and don't have to care about the actual format (XML or JSON).=
</span></p>
<p><span style=3D"font-size: 10.0pt;line-height: 13.0pt;">Let's see what it=
 would look like with a Content-Type of application/vnd.my.Greetings, that =
would send this as XML:</span></p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>application/vnd.my.Greetings+xml</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: html/xml; gutter: false; theme: Eclipse" style=3D"font=
-size:12px;">&lt;?xml version=3D"1.0" encoding=3D"utf-8"?&gt;
&lt;Greetings&gt;
    &lt;name&gt;John doe&lt;/name&gt;
&lt;/Greetings&gt;</pre>=20
</div>
</div>
<p><span style=3D"font-size: 10.0pt;line-height: 13.0pt;">First, we need to=
 create a service with the appropriate tag in services.yml.</span></p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>My/Bundle/RestBundle/Resources/config/services.yml</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">services:
    myRestBundle.input_parser.Greetings:
        parent: exponential_rest.input.parser
        class: My\Bundle\RestBundle\Rest\InputParser\Greetings
        tags:
            - { name: exponential_rest.input.parser, mediaType: application/v=
nd.my.Greetings }

</pre>=20
</div>
</div>
<p><span style=3D"font-size: 10.0pt;line-height: 13.0pt;">The mediaType att=
ribute of the exponential_rest.input.parser tag maps our Content Type to the =
input parser.</span></p>
<p>Let's implement our parser. It must extend&nbsp;eZ\Publish\Core\REST\Ser=
ver\Input\Parser, and implement the <code>parse()</code> method. It accepts=
 as an argument the input payload, <code>$data</code>, as an array, and an =
instance of&nbsp;<code>ParsingDispatcher</code> that can be used to forward=
 parsing of embedded content.</p>
<p>For convenience, we will consider that our input parser returns an insta=
nce of our <code>Value\Hello</code> class.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>My/Bundle/RestBundle/Rest/InputParser/Greetings.php</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">namespace My\Bundle\RestBundle\Rest\InputParser;
&nbsp;
use eZ\Publish\Core\REST\Common\Input\BaseParser;
use eZ\Publish\Core\REST\Common\Input\ParsingDispatcher;
use My\Bundle\RestBundle\Rest\Value\Hello;
use eZ\Publish\Core\REST\Common\Exceptions;


class Greetings extends BaseParser
{
   &nbsp;/**
     * @return My\Bundle\RestBundle\Rest\Value\Hello
     */
    public function parse( array $data, ParsingDispatcher $parsingDispatche=
r )
=09{
       &nbsp;// re-using the REST exceptions will make sure that those alre=
ady have a ValueObjectVisitor
        if ( !isset( $data['name'] ) )
            throw new Exceptions\Parser( "Missing or invalid 'name' element=
 for Greetings." );


        return new Hello( $data['name'] );
=09}
}</pre>=20
</div>
</div>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>My/Bundle/RestBundle/Resources/config/services.yml</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">services:
    myRestBundle.controller.default:
        class: My\Bundle\RestBundle\Rest\Controller\Default
        parent: exponential_rest.controller.base</pre>=20
</div>
</div>
<p>Do not hesitate to look into the built-in InputParsers, in <code>eZ/Publ=
ish/Core/REST/Server/Input/Parser</code>, for more examples.</p>
    </div>
</body>
</html>
------=_Part_3287_2101445216.1485852612948--
