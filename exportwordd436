Message-ID: <1290490804.4414.1485866419154.JavaMail.confluence@ip-10-127-227-164>
Subject: Exported From Confluence
MIME-Version: 1.0
Content-Type: multipart/related; 
	boundary="----=_Part_4413_473497571.1485866419154"

------=_Part_4413_473497571.1485866419154
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Content-Location: file:///C:/exported.html

<html xmlns:o=3D'urn:schemas-microsoft-com:office:office'
      xmlns:w=3D'urn:schemas-microsoft-com:office:word'
      xmlns:v=3D'urn:schemas-microsoft-com:vml'
      xmlns=3D'urn:w3-org-ns:HTML'>
<head>
    <meta http-equiv=3D"Content-Type" content=3D"text/html; charset=3Dutf-8=
">
    <title>Service Container</title>
    <!--[if gte mso 9]>
    <xml>
        <o:OfficeDocumentSettings>
            <o:TargetScreenSize>1024x640</o:TargetScreenSize>
            <o:PixelsPerInch>72</o:PixelsPerInch>
            <o:AllowPNG/>
        </o:OfficeDocumentSettings>
        <w:WordDocument>
            <w:View>Print</w:View>
            <w:Zoom>90</w:Zoom>
            <w:DoNotOptimizeForBrowser/>
        </w:WordDocument>
    </xml>
    <![endif]-->
    <style>
                <!--
        @page Section1 {
            size: 8.5in 11.0in;
            margin: 1.0in;
            mso-header-margin: .5in;
            mso-footer-margin: .5in;
            mso-paper-source: 0;
        }

        td {
            page-break-inside: avoid;
        }

        tr {
            page-break-after: avoid;
        }

        div.Section1 {
            page: Section1;
        }

        /* Confluence print stylesheet. Common to all themes for print medi=
a */
/* Full of !important until we improve batching for print CSS */

@media print {
    #main {
        padding-bottom: 1em !important; /* The default padding of 6em is to=
o much for printouts */
    }

    body {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        font-size: 10pt;
        line-height: 1.2;
    }

    body, #full-height-container, #main, #page, #content, .has-personal-sid=
ebar #content {
        background: #fff !important;
        color: #000 !important;
        border: 0 !important;
        width: 100% !important;
        height: auto !important;
        min-height: auto !important;
        margin: 0 !important;
        padding: 0 !important;
        display: block !important;
    }

    a, a:link, a:visited, a:focus, a:hover, a:active {
        color: #000;
    }

    #content h1,
    #content h2,
    #content h3,
    #content h4,
    #content h5,
    #content h6 {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        page-break-after: avoid;
    }

    pre {
        font-family: Monaco, "Courier New", monospace;
    }

    #header,
    .aui-header-inner,
    #navigation,
    #sidebar,
    .sidebar,
    #personal-info-sidebar,
    .ia-fixed-sidebar,
    .page-actions,
    .navmenu,
    .ajs-menu-bar,
    .noprint,
    .inline-control-link,
    .inline-control-link a,
    a.show-labels-editor,
    .global-comment-actions,
    .comment-actions,
    .quick-comment-container,
    #addcomment {
        display: none !important;
    }

    .comment .date::before {
        content: none !important; /* remove middot for print view */
    }

    h1.pagetitle img {
        height: auto;
        width: auto;
    }

    .print-only {
        display: block;
    }

    #footer {
        position: relative !important; /* CONF-17506 Place the footer at en=
d of the content */
        margin: 0;
        padding: 0;
        background: none;
        clear: both;
    }

    #poweredby {
        border-top: none;
        background: none;
    }

    #poweredby li.print-only {
        display: list-item;
        font-style: italic;
    }

    #poweredby li.noprint {
        display: none;
    }

    /* no width controls in print */
    .wiki-content .table-wrap,
    .wiki-content p,
    .panel .codeContent,
    .panel .codeContent pre,
    .image-wrap {
        overflow: visible !important;
    }

    /* TODO - should this work? */
    #children-section,
    #comments-section .comment,
    #comments-section .comment .comment-body,
    #comments-section .comment .comment-content,
    #comments-section .comment p {
        page-break-inside: avoid;
    }

    #page-children a {
        text-decoration: none;
    }

    /**
     hide twixies

     the specificity here is a hack because print styles
     are getting loaded before the base styles. */
    #comments-section.pageSection .section-header,
    #comments-section.pageSection .section-title,
    #children-section.pageSection .section-header,
    #children-section.pageSection .section-title,
    .children-show-hide {
        padding-left: 0;
        margin-left: 0;
    }

    .children-show-hide.icon {
        display: none;
    }

    /* personal sidebar */
    .has-personal-sidebar #content {
        margin-right: 0px;
    }

    .has-personal-sidebar #content .pageSection {
        margin-right: 0px;
    }
}
-->
    </style>
</head>
<body>
    <h1>Service Container</h1>
    <div class=3D"Section1">
        <h1 id=3D"ServiceContainer-Definition">Definition</h1>
<p>A service container,&nbsp;(aka <strong>DIC</strong>, <em>Dependency Inje=
ction Container</em>) is a special object that greatly facilitates dependen=
cies resolution in your application and sits on <a href=3D"http://en.wikipe=
dia.org/wiki/Dependency_injection" class=3D"external-link" rel=3D"nofollow"=
>Dependency Injection design pattern</a>. Basically, this design pattern pr=
oposes to inject all needed objects and configuration into your business lo=
gic objects (aka <strong>services</strong>). It avoids the massive use of s=
ingletons, global variables or complicated factories and thus makes your co=
de much more readable and testable. It avoids magic.</p>
<p>The main issue with dependency injection is how to resolve your dependen=
cies for your services. This is where the service container takes place. Th=
e role of a service container is to build and maintain your services and th=
eir dependencies. Basically, each time you need a service, you may ask for =
it to the service container which will either build it with the configurati=
on you provided, or give you the existing instance if it is already availab=
le.</p>
<h1 id=3D"ServiceContainer-InExponential5">In Exponential 5</h1>
<p>Exponential 5 uses&nbsp;<a href=3D"http://symfony.com/doc/master/book/ser=
vice_container.html" class=3D"external-link" rel=3D"nofollow">Symfony servi=
ce container</a> .</p>
<p>It is very powerful and highly configurable. We encourage you to read it=
s dedicated documentation as it will help you understand how Exponential 5 s=
ervices are made :</p>
<ul>
<li><a href=3D"http://symfony.com/doc/master/book/service_container.html" c=
lass=3D"external-link" rel=3D"nofollow">Introduction and basic usage</a></l=
i>
<li><a href=3D"http://symfony.com/doc/master/components/dependency_injectio=
n/index.html" class=3D"external-link" rel=3D"nofollow">Full documentation o=
f the Dependency Injection Component</a></li>
<li><a href=3D"http://symfony.com/doc/master/cookbook/service_container/ind=
ex.html" class=3D"external-link" rel=3D"nofollow">Cookbook</a></li>
<li><a href=3D"http://symfony.com/doc/master/reference/dic_tags.html" class=
=3D"external-link" rel=3D"nofollow">Base service tags</a></li>
</ul>
<h2 id=3D"ServiceContainer-Servicetags">Service tags</h2>
<p>Service tags in Symfony DIC are a useful way to dedicate services to a s=
pecific purpose. They are usually used for extension points.</p>
<p>For instance, if you want to register a <a href=3D"http://twig.sensiolab=
s.org/doc/advanced.html#creating-extensions" class=3D"external-link" rel=3D=
"nofollow">Twig extension</a> to add custom filters, you will need to creat=
e the PHP class and declare it as a service in the DIC configuration with t=
he <em>twig.extension</em> tag (see <a href=3D"http://symfony.com/doc/maste=
r/cookbook/templating/twig_extension.html" class=3D"external-link" rel=3D"n=
ofollow">Symfony cookbook entry</a> for a full example).</p>
<p>Exponential 5 exposes several features this way (see the list of core ser=
vice tags). This is for example the case for Field Types.</p>
<p>You will find all service tags exposed by Symfony in <a href=3D"http://s=
ymfony.com/doc/master/reference/dic_tags.html" class=3D"external-link" rel=
=3D"nofollow">its reference documentation</a>.</p>
<h1 id=3D"ServiceContainer-Relatedpages">Related pages</h1>
<p></p>
<ul class=3D"childpages-macro">
<li><a href=3D"/display/EZP51/Service+tags+in+eZ+Publish+5">Service tags in=
 Exponential 5</a></li>
</ul>
<p></p>
    </div>
</body>
</html>
------=_Part_4413_473497571.1485866419154--
