Message-ID: <640070308.3332.1485852745554.JavaMail.confluence@ip-10-127-227-164>
Subject: Exported From Confluence
MIME-Version: 1.0
Content-Type: multipart/related; 
	boundary="----=_Part_3331_2088143813.1485852745554"

------=_Part_3331_2088143813.1485852745554
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Content-Location: file:///C:/exported.html

<html xmlns:o=3D'urn:schemas-microsoft-com:office:office'
      xmlns:w=3D'urn:schemas-microsoft-com:office:word'
      xmlns:v=3D'urn:schemas-microsoft-com:vml'
      xmlns=3D'urn:w3-org-ns:HTML'>
<head>
    <meta http-equiv=3D"Content-Type" content=3D"text/html; charset=3Dutf-8=
">
    <title>Dynamic settings injection</title>
    <!--[if gte mso 9]>
    <xml>
        <o:OfficeDocumentSettings>
            <o:TargetScreenSize>1024x640</o:TargetScreenSize>
            <o:PixelsPerInch>72</o:PixelsPerInch>
            <o:AllowPNG/>
        </o:OfficeDocumentSettings>
        <w:WordDocument>
            <w:View>Print</w:View>
            <w:Zoom>90</w:Zoom>
            <w:DoNotOptimizeForBrowser/>
        </w:WordDocument>
    </xml>
    <![endif]-->
    <style>
                <!--
        @page Section1 {
            size: 8.5in 11.0in;
            margin: 1.0in;
            mso-header-margin: .5in;
            mso-footer-margin: .5in;
            mso-paper-source: 0;
        }

        td {
            page-break-inside: avoid;
        }

        tr {
            page-break-after: avoid;
        }

        div.Section1 {
            page: Section1;
        }

        /* Confluence print stylesheet. Common to all themes for print medi=
a */
/* Full of !important until we improve batching for print CSS */

@media print {
    #main {
        padding-bottom: 1em !important; /* The default padding of 6em is to=
o much for printouts */
    }

    body {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        font-size: 10pt;
        line-height: 1.2;
    }

    body, #full-height-container, #main, #page, #content, .has-personal-sid=
ebar #content {
        background: #fff !important;
        color: #000 !important;
        border: 0 !important;
        width: 100% !important;
        height: auto !important;
        min-height: auto !important;
        margin: 0 !important;
        padding: 0 !important;
        display: block !important;
    }

    a, a:link, a:visited, a:focus, a:hover, a:active {
        color: #000;
    }

    #content h1,
    #content h2,
    #content h3,
    #content h4,
    #content h5,
    #content h6 {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        page-break-after: avoid;
    }

    pre {
        font-family: Monaco, "Courier New", monospace;
    }

    #header,
    .aui-header-inner,
    #navigation,
    #sidebar,
    .sidebar,
    #personal-info-sidebar,
    .ia-fixed-sidebar,
    .page-actions,
    .navmenu,
    .ajs-menu-bar,
    .noprint,
    .inline-control-link,
    .inline-control-link a,
    a.show-labels-editor,
    .global-comment-actions,
    .comment-actions,
    .quick-comment-container,
    #addcomment {
        display: none !important;
    }

    .comment .date::before {
        content: none !important; /* remove middot for print view */
    }

    h1.pagetitle img {
        height: auto;
        width: auto;
    }

    .print-only {
        display: block;
    }

    #footer {
        position: relative !important; /* CONF-17506 Place the footer at en=
d of the content */
        margin: 0;
        padding: 0;
        background: none;
        clear: both;
    }

    #poweredby {
        border-top: none;
        background: none;
    }

    #poweredby li.print-only {
        display: list-item;
        font-style: italic;
    }

    #poweredby li.noprint {
        display: none;
    }

    /* no width controls in print */
    .wiki-content .table-wrap,
    .wiki-content p,
    .panel .codeContent,
    .panel .codeContent pre,
    .image-wrap {
        overflow: visible !important;
    }

    /* TODO - should this work? */
    #children-section,
    #comments-section .comment,
    #comments-section .comment .comment-body,
    #comments-section .comment .comment-content,
    #comments-section .comment p {
        page-break-inside: avoid;
    }

    #page-children a {
        text-decoration: none;
    }

    /**
     hide twixies

     the specificity here is a hack because print styles
     are getting loaded before the base styles. */
    #comments-section.pageSection .section-header,
    #comments-section.pageSection .section-title,
    #children-section.pageSection .section-header,
    #children-section.pageSection .section-title,
    .children-show-hide {
        padding-left: 0;
        margin-left: 0;
    }

    .children-show-hide.icon {
        display: none;
    }

    /* personal sidebar */
    .has-personal-sidebar #content {
        margin-right: 0px;
    }

    .has-personal-sidebar #content .pageSection {
        margin-right: 0px;
    }
}
-->
    </style>
</head>
<body>
    <h1>Dynamic settings injection</h1>
    <div class=3D"Section1">
        <p><style type=3D"text/css">/*<![CDATA[*/
div.rbtoc1485852745522 {padding: 0px;}
div.rbtoc1485852745522 ul {list-style: disc;margin-left: 0px;}
div.rbtoc1485852745522 li {margin-left: 0px;padding-left: 0px;}

/*]]>*/</style></p>
<div class=3D"toc-macro rbtoc1485852745522">=20
<ul class=3D"toc-indentation">=20
<li><a href=3D"#Dynamicsettingsinjection-Description">Description</a></li>=
=20
<li><a href=3D"#Dynamicsettingsinjection-Usage">Usage</a>=20
<ul class=3D"toc-indentation">=20
<li><a href=3D"#Dynamicsettingsinjection-Syntax">Syntax</a></li>=20
<li><a href=3D"#Dynamicsettingsinjection-DynamicSettingParser">DynamicSetti=
ngParser</a></li>=20
</ul> </li>=20
<li><a href=3D"#Dynamicsettingsinjection-Limitations">Limitations</a></li>=
=20
<li><a href=3D"#Dynamicsettingsinjection-Examples">Examples</a>=20
<ul class=3D"toc-indentation">=20
<li><a href=3D"#Dynamicsettingsinjection-InjectinganeZparameter">Injecting =
an eZ parameter</a></li>=20
<li><a href=3D"#Dynamicsettingsinjection-Before5.4">Before 5.4</a></li>=20
<li><a href=3D"#Dynamicsettingsinjection-After,withsetterinjection(preferre=
d)">After, with setter injection (preferred)</a></li>=20
<li><a href=3D"#Dynamicsettingsinjection-After,withconstructorinjection">Af=
ter, with constructor injection</a></li>=20
<li><a href=3D"#Dynamicsettingsinjection-Injecting3rdpartyparameters">Injec=
ting 3rd party parameters</a></li>=20
</ul> </li>=20
</ul>=20
</div>
<p></p>
<h2 id=3D"Dynamicsettingsinjection-Description">Description</h2>
<p>Before 5.4, if you wanted to implement a service needing siteaccess-awar=
e settings (e.g. language settings), you needed to inject the whole <code>C=
onfigResolver</code> (<code>exponential.config.resolver</code>) and get the n=
eeded settings from it. This was neither very convenient nor explicit.</p>
<p>The goal of this feature is to allow developers to inject these dynamic =
settings explicitly from their service definition (yml, xml, annotation, et=
c.).</p>
<h2 id=3D"Dynamicsettingsinjection-Usage">Usage</h2>
<h3 id=3D"Dynamicsettingsinjection-Syntax">Syntax</h3>
<p>Static container parameters follow the <code>%&lt;parameter_name&gt;%</c=
ode> syntax in Symfony.</p>
<p>Dynamic parameters have the following: <code>$&lt;parameter_name&gt;[; &=
lt;namespace&gt;[; &lt;scope&gt;]]$</code>, default namespace being <code>e=
zsettings</code>, and default scope being the current siteaccess.</p>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
For more information, see=20
<a href=3D"https://confluence.ez.no/display/EZP/Configuration#Configuration=
-DynamicconfigurationwiththeConfigResolver" class=3D"external-link" rel=3D"=
nofollow">ConfigResolver documentation</a>.
</div>
</div>
<h3 id=3D"Dynamicsettingsinjection-DynamicSettingParser">DynamicSettingPars=
er</h3>
<p>This feature also introduces a <em>DynamicSettingParser</em> service tha=
t can be used for adding support of the dynamic settings syntax.<br> This s=
ervice has <code>exponential.config.dynamic_setting.parser</code> for ID and =
implements<code> eZ\Bundle\EzPublishCoreBundle\DependencyInjection\Configur=
ation\SiteAccessAware\DynamicSettingParserInterface</code>.</p>
<h2 id=3D"Dynamicsettingsinjection-Limitations">Limitations</h2>
<p>A few limitations still remain:</p>
<ul class=3D"task-list">
<li><span>It is not possible to use dynamic settings in your semantic confi=
guration (e.g. <code>config.yml</code> or <code>ezplatform.yml</code>)&nbsp=
;<span>as they are meant primarily for parameter injection in services.</sp=
an></span></li>
<li>It is not possible to define an array of options having dynamic setting=
s. They will not be parsed. Workaround is to use separate arguments/setters=
.</li>
<li>Injecting dynamic settings in request listeners is <strong>not recommen=
ded</strong>, as it won't be resolved with the correct scope (request liste=
ners are <strong>instantiated before SiteAccess match</strong>). Workaround=
 is to inject the ConfigResolver instead, and resolving the setting in your=
 <code>onKernelRequest</code> method (or equivalent).</li>
</ul>
<h2 id=3D"Dynamicsettingsinjection-Examples">Examples</h2>
<h3 id=3D"Dynamicsettingsinjection-InjectinganeZparameter">Injecting an eZ =
parameter</h3>
<p>Defining a simple service needing <code>languages</code> parameter (i.e.=
 prioritized languages).</p>
<div class=3D"confluence-information-macro confluence-information-macro-not=
e">
<p class=3D"title">Note</p>
<span class=3D"aui-icon aui-icon-small aui-iconfont-warning confluence-info=
rmation-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>Internally, <code>languages</code> parameter is defined as <code>ezsetti=
ngs.&lt;siteaccess_name&gt;.languages</code>, <code>ezsettings</code> being=
 eZ internal <em>namespace</em>.</p>
</div>
</div>
<h3 id=3D"Dynamicsettingsinjection-Before5.4"><strong style=3D"color: rgb(0=
,98,147);font-size: 16.0px;line-height: 1.5625;">Before 5.4<br></strong></h=
3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: RDark" style=3D"font-size:1=
2px;">parameters:
    acme_test.my_service.class: Acme\TestBundle\MyServiceClass

services:
    acme_test.my_service:
        class: %acme_test.my_service.class%
        arguments: [@exponential.config.resolver]

namespace Acme\TestBundle;</pre>=20
</div>
</div>
<p><strong><br></strong></p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">use eZ\Publish\Core\MVC\ConfigResolverInterface;

class MyServiceClass
{
    /**
 * Prioritized languages
 *
 * @var array
 */
    private $languages;

    public function __construct( ConfigResolverInterface $configResolver )
    {
        $this-&gt;languages =3D $configResolver-&gt;getParameter( 'language=
s' );
    }
}</pre>=20
</div>
</div>
<h3 id=3D"Dynamicsettingsinjection-After,withsetterinjection(preferred)"><s=
trong style=3D"color: rgb(0,98,147);font-size: 16.0px;line-height: 1.5625;"=
>After, with setter injection (preferred)</strong></h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">parameters:
    acme_test.my_service.class: Acme\TestBundle\MyServiceClass

services:
    acme_test.my_service:
        class: %acme_test.my_service.class%
        calls:
            - [setLanguages, ["$languages$"]]
</pre>=20
</div>
</div>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">namespace Acme\TestBundle;

class MyServiceClass
{
    /**
 * Prioritized languages
 *
 * @var array
 */
    private $languages;

    public function setLanguages( array $languages =3D null )
    {
        $this-&gt;languages =3D $languages;
    }
}</pre>=20
</div>
</div>
<p>&nbsp;</p>
<div class=3D"highlight highlight-php">
<p>&nbsp;</p>
<div class=3D"confluence-information-macro confluence-information-macro-war=
ning">
<span class=3D"aui-icon aui-icon-small aui-iconfont-error confluence-inform=
ation-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p><strong>Important</strong>: Ensure you always add <code>null</code> as a=
 default value, especially if the argument is type-hinted.</p>
</div>
</div>
<h3 id=3D"Dynamicsettingsinjection-After,withconstructorinjection"><strong =
style=3D"color: rgb(0,98,147);font-size: 16.0px;line-height: 1.5625;">After=
, with constructor injection</strong></h3>
</div>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: bash; gutter: false; theme: Eclipse" style=3D"font-siz=
e:12px;">parameters:
    acme_test.my_service.class: Acme\TestBundle\MyServiceClass

services:
    acme_test.my_service:
        class: %acme_test.my_service.class%
        arguments: ["$languages$"]</pre>=20
</div>
</div>
<p>&nbsp;</p>
<div class=3D"highlight highlight-yaml">
<p>&nbsp;</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">namespace Acme\TestBundle;

class MyServiceClass
{
    /**
 * Prioritized languages
 *
 * @var array
 */
    private $languages;

    public function __construct( array $languages )
    {
        $this-&gt;languages =3D $languages;
    }
}</pre>=20
</div>
</div>
<p>&nbsp;</p>
</div>
<div class=3D"highlight highlight-php">
<p>&nbsp;</p>
<div class=3D"confluence-information-macro confluence-information-macro-tip=
">
<p class=3D"title">Tip</p>
<span class=3D"aui-icon aui-icon-small aui-iconfont-approve confluence-info=
rmation-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>Setter injection for dynamic settings should always be preferred, as it =
makes it possible to update your services that depend on them when ConfigRe=
solver is updating its scope (e.g. when previewing content in a given SiteA=
ccess). <strong>However, only one dynamic setting should be injected by set=
ter</strong><span>.</span></p>
<p><strong>Constructor injection will make your service be reset in that ca=
se.</strong></p>
</div>
</div>
<h3 id=3D"Dynamicsettingsinjection-Injecting3rdpartyparameters"><span style=
=3D"color: rgb(0,98,147);">Injecting 3rd party parameters</span></h3>
</div>
<div class=3D"highlight highlight-yaml">
<p>&nbsp;</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: bash; gutter: false; theme: Eclipse" style=3D"font-siz=
e:12px;">parameters:
    acme_test.my_service.class: Acme\TestBundle\MyServiceClass
    # "acme" is our parameter namespace.
    # Null is the default value.
    acme.default.some_parameter: ~
    acme.ezdemo_site.some_parameter: foo
    acme.ezdemo_site_admin.some_parameter: bar
&nbsp;
services:
    acme_test.my_service:
        class: %acme_test.my_service.class%
        # The following argument will automatically resolve to the right va=
lue, depending on the current SiteAccess.
        # We specify "acme" as the namespace we want to use for parameter r=
esolving.
        calls:
            - [setSomeParameter, ["$some_parameter;acme$"]]</pre>=20
</div>
</div>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">namespace Acme\TestBundle;
class MyServiceClass
{
    private $myParameter;
    public function setSomeParameter( $myParameter =3D null )
    {
        // Will be "foo" for ezdemo_site, "bar" for ezdemo_site_admin, or n=
ull if another SiteAccess.
        $this-&gt;myParameter =3D $myParameter;
    }
}</pre>=20
</div>
</div>
<p>&nbsp;</p>
</div>
<div class=3D"highlight highlight-php">
<pre>&nbsp;</pre>
</div>
    </div>
</body>
</html>
------=_Part_3331_2088143813.1485852745554--
