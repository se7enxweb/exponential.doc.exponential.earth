Message-ID: <455861263.2474.1485837654779.JavaMail.confluence@ip-10-127-227-164>
Subject: Exported From Confluence
MIME-Version: 1.0
Content-Type: multipart/related; 
	boundary="----=_Part_2473_947635670.1485837654779"

------=_Part_2473_947635670.1485837654779
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Content-Location: file:///C:/exported.html

<html xmlns:o=3D'urn:schemas-microsoft-com:office:office'
      xmlns:w=3D'urn:schemas-microsoft-com:office:word'
      xmlns:v=3D'urn:schemas-microsoft-com:vml'
      xmlns=3D'urn:w3-org-ns:HTML'>
<head>
    <meta http-equiv=3D"Content-Type" content=3D"text/html; charset=3Dutf-8=
">
    <title>Public API basics</title>
    <!--[if gte mso 9]>
    <xml>
        <o:OfficeDocumentSettings>
            <o:TargetScreenSize>1024x640</o:TargetScreenSize>
            <o:PixelsPerInch>72</o:PixelsPerInch>
            <o:AllowPNG/>
        </o:OfficeDocumentSettings>
        <w:WordDocument>
            <w:View>Print</w:View>
            <w:Zoom>90</w:Zoom>
            <w:DoNotOptimizeForBrowser/>
        </w:WordDocument>
    </xml>
    <![endif]-->
    <style>
                <!--
        @page Section1 {
            size: 8.5in 11.0in;
            margin: 1.0in;
            mso-header-margin: .5in;
            mso-footer-margin: .5in;
            mso-paper-source: 0;
        }

        td {
            page-break-inside: avoid;
        }

        tr {
            page-break-after: avoid;
        }

        div.Section1 {
            page: Section1;
        }

        /* Confluence print stylesheet. Common to all themes for print medi=
a */
/* Full of !important until we improve batching for print CSS */

@media print {
    #main {
        padding-bottom: 1em !important; /* The default padding of 6em is to=
o much for printouts */
    }

    body {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        font-size: 10pt;
        line-height: 1.2;
    }

    body, #full-height-container, #main, #page, #content, .has-personal-sid=
ebar #content {
        background: #fff !important;
        color: #000 !important;
        border: 0 !important;
        width: 100% !important;
        height: auto !important;
        min-height: auto !important;
        margin: 0 !important;
        padding: 0 !important;
        display: block !important;
    }

    a, a:link, a:visited, a:focus, a:hover, a:active {
        color: #000;
    }

    #content h1,
    #content h2,
    #content h3,
    #content h4,
    #content h5,
    #content h6 {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        page-break-after: avoid;
    }

    pre {
        font-family: Monaco, "Courier New", monospace;
    }

    #header,
    .aui-header-inner,
    #navigation,
    #sidebar,
    .sidebar,
    #personal-info-sidebar,
    .ia-fixed-sidebar,
    .page-actions,
    .navmenu,
    .ajs-menu-bar,
    .noprint,
    .inline-control-link,
    .inline-control-link a,
    a.show-labels-editor,
    .global-comment-actions,
    .comment-actions,
    .quick-comment-container,
    #addcomment {
        display: none !important;
    }

    .comment .date::before {
        content: none !important; /* remove middot for print view */
    }

    h1.pagetitle img {
        height: auto;
        width: auto;
    }

    .print-only {
        display: block;
    }

    #footer {
        position: relative !important; /* CONF-17506 Place the footer at en=
d of the content */
        margin: 0;
        padding: 0;
        background: none;
        clear: both;
    }

    #poweredby {
        border-top: none;
        background: none;
    }

    #poweredby li.print-only {
        display: list-item;
        font-style: italic;
    }

    #poweredby li.noprint {
        display: none;
    }

    /* no width controls in print */
    .wiki-content .table-wrap,
    .wiki-content p,
    .panel .codeContent,
    .panel .codeContent pre,
    .image-wrap {
        overflow: visible !important;
    }

    /* TODO - should this work? */
    #children-section,
    #comments-section .comment,
    #comments-section .comment .comment-body,
    #comments-section .comment .comment-content,
    #comments-section .comment p {
        page-break-inside: avoid;
    }

    #page-children a {
        text-decoration: none;
    }

    /**
     hide twixies

     the specificity here is a hack because print styles
     are getting loaded before the base styles. */
    #comments-section.pageSection .section-header,
    #comments-section.pageSection .section-title,
    #children-section.pageSection .section-header,
    #children-section.pageSection .section-title,
    .children-show-hide {
        padding-left: 0;
        margin-left: 0;
    }

    .children-show-hide.icon {
        display: none;
    }

    /* personal sidebar */
    .has-personal-sidebar #content {
        margin-right: 0px;
    }

    .has-personal-sidebar #content .pageSection {
        margin-right: 0px;
    }
}
-->
    </style>
</head>
<body>
    <h1>Public API basics</h1>
    <div class=3D"Section1">
        <h3 id=3D"PublicAPIbasics-ExponentialAPIRepository">Exponential API Re=
pository</h3>
<p><span style=3D"color: rgb(0,0,0);">This entity is the entry point to eve=
rything you will do with the Public API.</span></p>
<p><span style=3D"color: rgb(0,0,0);">It will allow you to create, retrieve=
, update and delete all the Exponential objects, as well as content types, s=
ections, content states. It is always obtained through the service containe=
r.</span></p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>Obtaining the Exponential Repository via the service container</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">/** @var $repository \eZ\Publish\API\Repository\Repository
$repository =3D $container-&gt;get( 'exponential.api.repository' );</pre>=20
</div>
</div>
<p><span style=3D"color: rgb(0,0,0);">&nbsp;By itself, the repository doesn=
't do much. It allows three type of operations: user authentication (gettin=
g / changing the current user), issuing transactions, and obtaining service=
s.&nbsp;</span></p>
<div class=3D"confluence-information-macro confluence-information-macro-tip=
">
<p class=3D"title">Inline objects documentation</p>
<span class=3D"aui-icon aui-icon-small aui-iconfont-approve confluence-info=
rmation-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p><span style=3D"color: rgb(0,0,0);">Pay attention to the inline phpdoc bl=
ock in this code stub. It tells your IDE that&nbsp;<code>$repository</code>=
&nbsp;is an instance of&nbsp;</span><code><a href=3D"http://apidoc.ez.no/sa=
mi/trunk/NS/html/eZ/Publish/API/Repository/Repository.html" class=3D"extern=
al-link" rel=3D"nofollow">\eZ\Publish\API\Repository\Repository</a></code>.=
 If your IDE supports this feature, you will get code completion on the&nbs=
p;<code>$repository</code>&nbsp;object. This helper is a huge time saver wh=
en it comes to learning about the Exponential API.</p>
</div>
</div>
<h3 id=3D"PublicAPIbasics-Theservicecontainer">The service container</h3>
<p><span style=3D"color: rgb(0,0,0);">The above code snippet implies that t=
he <a href=3D"http://symfony.com/doc/2.0/book/service_container.html" class=
=3D"external-link" rel=3D"nofollow">service container</a> is available in t=
he context you are writing your code in.</span></p>
<p><span style=3D"color: rgb(0,0,0);">In controllers, this generally is don=
e by extending the Symfony&nbsp;<code><a href=3D"http://api.symfony.com/2.0=
/Symfony/Bundle/FrameworkBundle/Controller/Controller.html" class=3D"extern=
al-link" rel=3D"nofollow">Controller</a></code>&nbsp;class. It comes with a=
&nbsp;<code><a href=3D"http://api.symfony.com/2.1/Symfony/Bundle/FrameworkB=
undle/Controller/Controller.html#method_get" class=3D"external-link" rel=3D=
"nofollow">get()</a></code>&nbsp;method that calls the service container. I=
n command line scripts, it requires that you extend the&nbsp;<a href=3D"htt=
p://api.symfony.com/2.1/Symfony/Bundle/FrameworkBundle/Command/ContainerAwa=
reCommand.html" class=3D"external-link" rel=3D"nofollow"><code>ContainerAwa=
reCommand</code></a>&nbsp;base class instead of&nbsp;<code>Controller</code=
>. This class provides you with a&nbsp;<code>getContainer()</code>&nbsp;met=
hod that returns the service container.</span></p>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<p class=3D"title">Getting the repository from Exponential 5 controllers</p>
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p><span style=3D"color: rgb(0,0,0);">In order to make it even easier to ob=
tain the repository from controllers code, Exponential 5 controllers extend =
a custom&nbsp;</span><a href=3D"http://apidoc.ez.no/sami/trunk/NS/html/eZ/B=
undle/EzPublishCoreBundle/Controller.html" class=3D"external-link" rel=3D"n=
ofollow">Controller</a> <span style=3D"color: rgb(0,0,0);">class that provi=
des a <a href=3D"http://apidoc.ez.no/sami/trunk/NS/html/eZ/Bundle/EzPublish=
CoreBundle/Controller.html#method_getRepository" class=3D"external-link" re=
l=3D"nofollow"><code>getRepository()</code></a> method which directly retur=
ns the repository from the service container.</span></p>
<p><span style=3D"color: rgb(0,0,0);">You can and should of course do the s=
ame in your custom controllers.</span></p>
</div>
</div>
<h3 id=3D"PublicAPIbasics-Authentication">Authentication</h3>
<p>One of the responsibilities of the Repository is user authentication. Ev=
ery action will be executed&nbsp;<em>as</em>&nbsp;a user. In the context of=
 a normal Exponential execution, the logged in user will of course be the cu=
rrent one, identified via one of the available authentication methods. This=
 user's permissions will affect the behavior of the Repository. The user ma=
y f.e. not be allowed to create Content, or view a particular section.</p>
<p>Logging in to the Repository is covered in the recipes of the Cookbook.<=
/p>
<h3 id=3D"PublicAPIbasics-Services">Services</h3>
<p>The main entry point to the repository's features are services. The Publ=
ic API breaks down access to Content, User, Content Types, etc features int=
o various services. Those services are obtained via the&nbsp;<a href=3D"htt=
p://apidoc.ez.no/sami/trunk/NS/html/eZ/Publish/API/Repository/Repository.ht=
ml" class=3D"external-link" rel=3D"nofollow">Repository</a>, using getServi=
ceName() like methods:&nbsp;<code><a href=3D"http://apidoc.ez.no/sami/trunk=
/NS/html/eZ/Publish/API/Repository/Repository.html#method_getContentService=
" class=3D"external-link" rel=3D"nofollow">getContentService()</a></code>,&=
nbsp;<code><a href=3D"http://apidoc.ez.no/sami/trunk/NS/html/eZ/Publish/API=
/Repository/Repository.html#method_getUserService" class=3D"external-link" =
rel=3D"nofollow">getUserService()</a></code>...</p>
<p>Throughout the Cookbook, you will be guided through the various capabili=
ties those services have, and how you can use them to implement your projec=
ts.</p>
<h3 id=3D"PublicAPIbasics-Valueobjects">Value objects</h3>
<p>While Services provide interaction with the repository, the elements (Co=
ntent, Users) they provide interaction with are provided as read only&nbsp;=
<a href=3D"http://apidoc.ez.no/doxygen/trunk/NS/html/namespaceeZ_1_1Publish=
_1_1Core_1_1Repository_1_1Values.html" class=3D"external-link" rel=3D"nofol=
low">Value Objects</a>, in the&nbsp;<code>eZ\Publish\Core\Repository\Values=
</code>&nbsp;namespace. Those objects are broken down into sub-namespaces:&=
nbsp;<code>Content</code>,&nbsp;<code>ContentType</code>,&nbsp;<code>User</=
code>&nbsp;and&nbsp;<code>ObjectState</code>, each sub-namespace containing=
 a set of value objects, such as&nbsp;<a href=3D"https://github.com/ezsyste=
ms/ezp-next/blob/master/eZ/Publish/Core/Repository/Values/Content/Content.p=
hp" class=3D"external-link" rel=3D"nofollow"><code>Content\Content</code></=
a>&nbsp;or&nbsp;<a href=3D"https://github.com/ezsystems/ezp-next/blob/maste=
r/eZ/Publish/Core/Repository/Values/User/Role.php" class=3D"external-link" =
rel=3D"nofollow"><code>User\Role</code></a>.</p>
<p>These objects are read-only by design. They are only meant to be used in=
 order to fetch data from the repository. They come with their own properti=
es, such as <code>$content-&gt;id</code>, <code>$location-&gt;hidden</code>=
, but also with methods that provide access to more, related information, s=
uch as <code>Relation::getSourceContentInfo()</code> or <code>Role::getPoli=
cies()</code>. By design, a value object will only give you access to data =
that is very closely related to it. More complex retrieval operations will =
require you to use the appropriate Service, using information from your Val=
ue Object.</p>
<h4 id=3D"PublicAPIbasics-Valueinfoobjects">Value info objects</h4>
<p>Some complex Value Objects have an Info counterpart, like&nbsp;<code>Con=
tentInfo</code>, the counterpart for&nbsp;<code>Content</code>. These objec=
ts are specific, and provide you with lower level information. For instance=
,&nbsp;<code>ContentInfo</code>&nbsp;will provide you with currentVersionNo=
 or remoteId, while Content will let you retrieve Fields, the ContentType, =
or previous Versions.</p>
<p>They are provided by the API, but are&nbsp;<strong>read only</strong>, c=
an't be modified and sent back. Creation and modification of Repository val=
ues are done using Create structs and Update structs.</p>
<h3 id=3D"PublicAPIbasics-Createandupdatestructs">Create and update structs=
</h3>
<p>In order to update or create elements in the Repository, you will use st=
ructs. They are usually provided by the Service that manages the Value Obje=
cts you want to alter or create. For instance, the Content service has a&nb=
sp;<code>getContentCreateStruct()</code>&nbsp;method that returns a new&nbs=
p;<code>ContentCreateStruct</code>&nbsp;object. Equivalent methods exist fo=
r UpdateStruct objects as well, and for most Value Objects.</p>
<p>Using them is also covered in the Cookbook.</p>
    </div>
</body>
</html>
------=_Part_2473_947635670.1485837654779--
