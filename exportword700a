Message-ID: <1339851959.3752.1485855160805.JavaMail.confluence@ip-10-127-227-164>
Subject: Exported From Confluence
MIME-Version: 1.0
Content-Type: multipart/related; 
	boundary="----=_Part_3751_1559313065.1485855160804"

------=_Part_3751_1559313065.1485855160804
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Content-Location: file:///C:/exported.html

<html xmlns:o=3D'urn:schemas-microsoft-com:office:office'
      xmlns:w=3D'urn:schemas-microsoft-com:office:word'
      xmlns:v=3D'urn:schemas-microsoft-com:vml'
      xmlns=3D'urn:w3-org-ns:HTML'>
<head>
    <meta http-equiv=3D"Content-Type" content=3D"text/html; charset=3Dutf-8=
">
    <title>Using the JavaScript REST API Client</title>
    <!--[if gte mso 9]>
    <xml>
        <o:OfficeDocumentSettings>
            <o:TargetScreenSize>1024x640</o:TargetScreenSize>
            <o:PixelsPerInch>72</o:PixelsPerInch>
            <o:AllowPNG/>
        </o:OfficeDocumentSettings>
        <w:WordDocument>
            <w:View>Print</w:View>
            <w:Zoom>90</w:Zoom>
            <w:DoNotOptimizeForBrowser/>
        </w:WordDocument>
    </xml>
    <![endif]-->
    <style>
                <!--
        @page Section1 {
            size: 8.5in 11.0in;
            margin: 1.0in;
            mso-header-margin: .5in;
            mso-footer-margin: .5in;
            mso-paper-source: 0;
        }

        td {
            page-break-inside: avoid;
        }

        tr {
            page-break-after: avoid;
        }

        div.Section1 {
            page: Section1;
        }

        /* Confluence print stylesheet. Common to all themes for print medi=
a */
/* Full of !important until we improve batching for print CSS */

@media print {
    #main {
        padding-bottom: 1em !important; /* The default padding of 6em is to=
o much for printouts */
    }

    body {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        font-size: 10pt;
        line-height: 1.2;
    }

    body, #full-height-container, #main, #page, #content, .has-personal-sid=
ebar #content {
        background: #fff !important;
        color: #000 !important;
        border: 0 !important;
        width: 100% !important;
        height: auto !important;
        min-height: auto !important;
        margin: 0 !important;
        padding: 0 !important;
        display: block !important;
    }

    a, a:link, a:visited, a:focus, a:hover, a:active {
        color: #000;
    }

    #content h1,
    #content h2,
    #content h3,
    #content h4,
    #content h5,
    #content h6 {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        page-break-after: avoid;
    }

    pre {
        font-family: Monaco, "Courier New", monospace;
    }

    #header,
    .aui-header-inner,
    #navigation,
    #sidebar,
    .sidebar,
    #personal-info-sidebar,
    .ia-fixed-sidebar,
    .page-actions,
    .navmenu,
    .ajs-menu-bar,
    .noprint,
    .inline-control-link,
    .inline-control-link a,
    a.show-labels-editor,
    .global-comment-actions,
    .comment-actions,
    .quick-comment-container,
    #addcomment {
        display: none !important;
    }

    .comment .date::before {
        content: none !important; /* remove middot for print view */
    }

    h1.pagetitle img {
        height: auto;
        width: auto;
    }

    .print-only {
        display: block;
    }

    #footer {
        position: relative !important; /* CONF-17506 Place the footer at en=
d of the content */
        margin: 0;
        padding: 0;
        background: none;
        clear: both;
    }

    #poweredby {
        border-top: none;
        background: none;
    }

    #poweredby li.print-only {
        display: list-item;
        font-style: italic;
    }

    #poweredby li.noprint {
        display: none;
    }

    /* no width controls in print */
    .wiki-content .table-wrap,
    .wiki-content p,
    .panel .codeContent,
    .panel .codeContent pre,
    .image-wrap {
        overflow: visible !important;
    }

    /* TODO - should this work? */
    #children-section,
    #comments-section .comment,
    #comments-section .comment .comment-body,
    #comments-section .comment .comment-content,
    #comments-section .comment p {
        page-break-inside: avoid;
    }

    #page-children a {
        text-decoration: none;
    }

    /**
     hide twixies

     the specificity here is a hack because print styles
     are getting loaded before the base styles. */
    #comments-section.pageSection .section-header,
    #comments-section.pageSection .section-title,
    #children-section.pageSection .section-header,
    #children-section.pageSection .section-title,
    .children-show-hide {
        padding-left: 0;
        margin-left: 0;
    }

    .children-show-hide.icon {
        display: none;
    }

    /* personal sidebar */
    .has-personal-sidebar #content {
        margin-right: 0px;
    }

    .has-personal-sidebar #content .pageSection {
        margin-right: 0px;
    }
}
-->
    </style>
</head>
<body>
    <h1>Using the JavaScript REST API Client</h1>
    <div class=3D"Section1">
        <div class=3D"contentLayout2">=20
<div class=3D"columnLayout two-right-sidebar" data-layout=3D"two-right-side=
bar">=20
<div class=3D"cell normal" data-type=3D"normal">=20
<div class=3D"innerCell">=20
<p>The JavaScript REST API Client is a JavaScript library meant to ease the=
 use of the eZ Platform REST API. For now, it can only be used in a web bro=
wser.</p>
<h2 id=3D"UsingtheJavaScriptRESTAPIClient-Installation">Installation</h2>
<h3 id=3D"UsingtheJavaScriptRESTAPIClient-InthePlatformUIAssetsBundle">In t=
he PlatformUIAssetsBundle</h3>
<p>Since the JavaScript REST Client is one of the foundations of <a href=3D=
"/display/DEVELOPER/Extending+eZ+Platform">the Platform Backend Interface</=
a>, the client is provided by the <a href=3D"https://github.com/ezsystems/P=
latformUIAssetsBundle" class=3D"external-link" rel=3D"nofollow">PlatformUIA=
ssetsBundle</a> which is installed by default. As a result, the client is d=
irectly available and can be embedded in any Platform-generated page with t=
he following Twig code:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>Embedding the JavaScript REST Client</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: xml; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">&lt;script src=3D"{{ asset('bundles/ezplatformuiassets/vendors/ez-j=
s-rest-client/dist/CAPI.js') }}"&gt;&lt;/script&gt;
&lt;!-- or the minified version --&gt;
&lt;!-- &lt;script src=3D"{{ asset('bundles/ezplatformuiassets/vendors/ez-j=
s-rest-client/dist/CAPI-min.js') }}"&gt;&lt;/script&gt; --&gt;</pre>=20
</div>
</div>
<h3 id=3D"UsingtheJavaScriptRESTAPIClient-WithBower">With Bower</h3>
<p>Alternatively, the JavaScript REST Client can be installed directly in a=
ny project with <a href=3D"http://bower.io/" class=3D"external-link" rel=3D=
"nofollow">Bower</a>:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>Installing with bower</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: bash; gutter: false; theme: Eclipse" style=3D"font-siz=
e:12px;">$ bower install --save ezsystems/ez-js-rest-client</pre>=20
</div>
</div>
<p>After using this command, <code>dist/CAPI.js</code> or <code>dist/CAPI-m=
in.js</code> are available in <code>bower\_components/ez-js-rest-client/</c=
ode>.</p>
<h3 id=3D"UsingtheJavaScriptRESTAPIClient-Manualinstall">Manual install</h3=
>
<p>It is also possible to directly retrieve either <code>dist/CAPI.js</code=
> or <code>dist/CAPI-min.js</code> in <a href=3D"https://github.com/ezsyste=
ms/ez-js-rest-client/" class=3D"external-link" rel=3D"nofollow">the Github =
repository of the project</a>.</p>
<h2 id=3D"UsingtheJavaScriptRESTAPIClient-Usageexamples">Usage examples</h2=
>
<p>Once included, <code>CAPI.js</code> exports the <code>eZ</code> namespac=
e which contains <code>eZ.CAPI</code>, the constructor function of the clie=
nt. This constructor must receive the API end point and an authentication a=
gent responsible for handling the authentication (session or basic auth). T=
his is detailed in the <a href=3D"http://doc.ez.no#UsingtheJavaScriptRESTAP=
IClient-Instantiationandauthentication" class=3D"external-link" rel=3D"nofo=
llow">Instantiation and authentication</a> section below.</p>
<p><a href=3D"http://ezsystems.github.io/javascript-rest-client" class=3D"e=
xternal-link" rel=3D"nofollow">The auto-generated API documentation of the =
JavaScript REST API client is available online.</a> Like in the Public API,=
 the code is organized around 3 main services:</p>
<ul>
<li><a href=3D"http://ezsystems.github.io/javascript-rest-client/classes/Co=
ntentService.html" class=3D"external-link" rel=3D"nofollow">the Content Ser=
vice</a></li>
<li><a href=3D"http://ezsystems.github.io/javascript-rest-client/classes/Co=
ntentTypeService.html" class=3D"external-link" rel=3D"nofollow">the Content=
 Type Service</a></li>
<li><a href=3D"http://ezsystems.github.io/javascript-rest-client/classes/Us=
erService.html" class=3D"external-link" rel=3D"nofollow">the User Service</=
a></li>
</ul>
<p>In essence, the operations available through those services are asynchro=
nous, so all the corresponding methods accept a callback function as its la=
st argument. This callback function will be called when the operation has b=
een done and it will receive two arguments:</p>
<ol>
<li><code>error</code>: depending on the success of the operation, this par=
ameter is either <code>false</code> or a <a href=3D"http://ezsystems.github=
.io/javascript-rest-client/classes/CAPIError.html" class=3D"external-link" =
rel=3D"nofollow"><code>CAPIError</code></a> instance representing the error=
</li>
<li><code>response</code>: it's always of a <a href=3D"http://ezsystems.git=
hub.io/javascript-rest-client/classes/Response.html" class=3D"external-link=
" rel=3D"nofollow"><code>Response</code></a> instance allowing you to retri=
eve any information from the REST API response</li>
</ol>
<h3 id=3D"UsingtheJavaScriptRESTAPIClient-Instantiationandauthentication">I=
nstantiation and authentication</h3>
<p><a href=3D"http://ezsystems.github.io/javascript-rest-client/classes/CAP=
I.html" class=3D"external-link" rel=3D"nofollow">The <code>eZ.CAPI</code> c=
onstructor function</a> expects two parameters:</p>
<ol>
<li>the API end point URI</li>
<li>an authentication agent instance to configure the client for <a href=3D=
"/display/DEVELOPER/REST+API+Authentication">the authentication mechanism c=
onfiguration in eZ Platform</a>.</li>
</ol>
<p>The JavaScript REST Client comes with two authentication agents for the =
Session and Basic Auth authentication mechanism.</p>
<h4 id=3D"UsingtheJavaScriptRESTAPIClient-Sessionauth">Session auth</h4>
<p>The Session Auth Agent expects an object describing the existing Session=
 or containing the credentials for the user to create the corresponding ses=
sion. So if the user is not yet authenticated, the client can be instantiat=
ed with:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>Session Authentication (new session)</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: js; gutter: false; theme: Eclipse" style=3D"font-size:=
12px;">var capi,
    credentials =3D {
        login: 'admin',
        password: 'publish',
    };

capi =3D new eZ.CAPI(
    'http://example.com',
    new eZ.SessionAuthAgent(credentials)
);
capi.logIn(function (error, response) {
    if ( error ) {
        console.log('Error!');
        return;
    }
    console.log("I'm logged in");
});</pre>=20
</div>
</div>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>Instead of passing the <code>credentials</code> to the <code>eZ.SessionA=
uthAgent</code> constructor, it is also possible to pass this object as <a =
href=3D"http://ezsystems.github.io/javascript-rest-client/classes/CAPI.html=
#method_logIn" class=3D"external-link" rel=3D"nofollow">the first parameter=
 of the <code>logIn</code> method</a>.</p>
</div>
</div>
<p>If the user already has a session, the agent expects an object describin=
g the session, something like:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>Session Authentication (existing session)</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: js; gutter: false; theme: Eclipse" style=3D"font-size:=
12px;">var capi,
    sessionInfo =3D {
        name: 'eZSESSID', // name of the session, might also be something l=
ike eZSESSID98defd6ee70dfb1dea416cecdf391f58
        identifier: '6pp87ah63m44jdf53b35qlt2i7', // session id
        href: '/api/ezp/v2/user/sessions/6pp87ah63m44jdf53b35qlt2i7',
        csrfToken: 'memEneT7WvX9WmSlG2wDqUj0eeLRC7hXG--pLUx4dFE', // can be=
 retrieved with @security.csrf.token_manager Symfony service
    };

capi =3D new eZ.CAPI(
    'http://example.com',
    new eZ.SessionAuthAgent(sessionInfo)
);
capi.isLoggedIn(function (error, response) {
    if ( error ) {
        console.log('Error!');
        return;
    }
    console.log("I'm logged in");
});</pre>=20
</div>
</div>
<h4 id=3D"UsingtheJavaScriptRESTAPIClient-Basicauth">Basic auth</h4>
<p>When configured in the Basic Authentication, the basic auth agent just e=
xpects the user's credentials:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>Basic Authentication</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: js; gutter: false; theme: Eclipse" style=3D"font-size:=
12px;">var capi,
    credentials =3D {
        login: 'admin',
        password: 'publish',
    };

capi =3D new eZ.CAPI(
    'http://example.com',
    new eZ.HttpBasicAuthAgent(credentials)
);
capi.logIn(function (error, response) {
    if ( error ) {
        console.log('Error!');
        return;
    }
    console.log("The credentials are valid");
});</pre>=20
</div>
</div>
<h3 id=3D"UsingtheJavaScriptRESTAPIClient-LoadingaContentInfooraContent">Lo=
ading a ContentInfo or a Content</h3>
<p>To load a ContentInfo, you need <a href=3D"http://ezsystems.github.io/ja=
vascript-rest-client/classes/ContentService.html" class=3D"external-link" r=
el=3D"nofollow">the Content Service</a>, it is returned by the <code>getCon=
tentService</code> method on the client instance:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>Loading a ContentInfo</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: js; gutter: false; theme: Eclipse" style=3D"font-size:=
12px;">var capi, contentService,
    contentRestId =3D '/api/ezp/v2/content/objects/1',
    credentials =3D {
        login: 'admin',
        password: 'publish',
    };

capi =3D new eZ.CAPI(
    'http://example.com',
    new eZ.SessionAuthAgent(credentials)
);
contentService =3D capi.getContentService();
contentService.loadContentInfo(contentRestId, function (error, response) {
    if ( error ) {
        console.log('Error!');
        return;
    }
    // response.document contains the parsed JSON structure
    console.log('Content name: ' + response.document.Content.Name);
})</pre>=20
</div>
</div>
<p>If you run this example, you should see in the browser network panel a G=
ET HTTP request to <a href=3D"http://example.com/api/ezp/v2/content/objects=
/1" class=3D"external-link" rel=3D"nofollow">http://example.com/api/ezp/v2/=
content/objects/1</a> with the necessary headers to get a JSON representati=
on of the ContentInfo. If you want to load the Content instead, you can use=
 <a href=3D"http://ezsystems.github.io/javascript-rest-client/classes/Conte=
ntService.html#method_loadContent" class=3D"external-link" rel=3D"nofollow"=
>the <code>loadContent</code> method</a>.</p>
<h3 id=3D"UsingtheJavaScriptRESTAPIClient-MovingaLocation">Moving a Locatio=
n</h3>
<p>To move a Location, <a href=3D"http://ezsystems.github.io/javascript-res=
t-client/classes/ContentService.html" class=3D"external-link" rel=3D"nofoll=
ow">the Content Service</a> is also needed, this operation will generate a =
MOVE HTTP request. If configured for the session authentication mechanism, =
the client will automatically add the CSRF Token.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>Moving a Location</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: js; gutter: false; theme: Eclipse" style=3D"font-size:=
12px;">var capi, contentService,
    locationRestId =3D '/api/ezp/v2/content/locations/1/43/53', // Media/Mu=
ltimedia in a default install
    newParentLocationRestId =3D '/api/ezp/v2/content/locations/1/43/52', //=
 Media/Files in a default install
    credentials =3D {
        login: 'admin',
        password: 'publish',
    };

capi =3D new eZ.CAPI(
    'http://example.com',
    new eZ.SessionAuthAgent(credentials)
);
contentService =3D capi.getContentService();
contentService.moveSubtree(locationRestId, newParentLocationRestId, functio=
n (error, response) {
    if ( error ) {
        console.log('Error!');
        return;
    }
    console.log('Media/Multimedia is now Media/Files/Multimedia');
})</pre>=20
</div>
</div>
<h3 id=3D"UsingtheJavaScriptRESTAPIClient-SearchingforContentorLocation">Se=
arching for Content or Location</h3>
<p>Searching for Content or Location can be done with <a href=3D"https://gi=
thub.com/ezsystems/exponential-kernel/blob/master/doc/specifications/rest/RES=
T-API-V2.rst#views" class=3D"external-link" rel=3D"nofollow">REST views</a>=
. REST views can be configured with <span class=3D"confluence-link">the <a =
href=3D"/display/DEVELOPER/Search#Search-SearchCriteriaReference">search en=
gine criteria</a></span> to match some Content items or Locations:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>REST views</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: js; gutter: false; theme: Eclipse" style=3D"font-size:=
12px;">var capi, contentService, query,
   &nbsp;credentials =3D {
        login: 'admin',
        password: 'publish',
    };

capi =3D new eZ.CAPI(
    'http://example.com',
    new eZ.SessionAuthAgent(credentials)
);
contentService =3D capi.getContentService();
query =3D contentService.newViewCreateStruct('test-rest-view', 'LocationQue=
ry'); // use 'ContentQuery' to retrieve a list of Content items
query.body.ViewInput.LocationQuery.Criteria =3D { // use 'ContentQuery' her=
e as well
    FullTextCriterion: "ez",
};
query.body.ViewInput.LocationQuery.limit =3D 10;
// query.body.ViewInput.LocationQuery.offset =3D 0;
contentService.createView(query, function (error, response) {
    if ( error ) {
        console.log('Error!');
        return;
    }
    console.log("Search results", response.document.View.Result.searchHits.=
searchHit);
})</pre>=20
</div>
</div>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<p class=3D"title">REST views</p>
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>REST views are designed to be persisted but this feature is not yet impl=
emented. As a result, when calling <code>createView</code>, the POST reques=
t does not create the view but directly returns the results.</p>
</div>
</div>
</div>=20
</div>=20
<div class=3D"cell aside" data-type=3D"aside">=20
<div class=3D"innerCell">=20
<h4 id=3D"UsingtheJavaScriptRESTAPIClient-Inthistopic:">In this topic:</h4>
<p><style type=3D"text/css">/*<![CDATA[*/
div.rbtoc1485855160788 {padding: 0px;}
div.rbtoc1485855160788 ul {list-style: disc;margin-left: 0px;}
div.rbtoc1485855160788 li {margin-left: 0px;padding-left: 0px;}

/*]]>*/</style></p>
<div class=3D"toc-macro rbtoc1485855160788">=20
<ul class=3D"toc-indentation">=20
<li><a href=3D"#UsingtheJavaScriptRESTAPIClient-Installation">Installation<=
/a>=20
<ul class=3D"toc-indentation">=20
<li><a href=3D"#UsingtheJavaScriptRESTAPIClient-InthePlatformUIAssetsBundle=
">In the PlatformUIAssetsBundle</a></li>=20
<li><a href=3D"#UsingtheJavaScriptRESTAPIClient-WithBower">With Bower</a></=
li>=20
<li><a href=3D"#UsingtheJavaScriptRESTAPIClient-Manualinstall">Manual insta=
ll</a></li>=20
</ul> </li>=20
<li><a href=3D"#UsingtheJavaScriptRESTAPIClient-Usageexamples">Usage exampl=
es</a>=20
<ul class=3D"toc-indentation">=20
<li><a href=3D"#UsingtheJavaScriptRESTAPIClient-Instantiationandauthenticat=
ion">Instantiation and authentication</a></li>=20
<li><a href=3D"#UsingtheJavaScriptRESTAPIClient-LoadingaContentInfooraConte=
nt">Loading a ContentInfo or a Content</a></li>=20
<li><a href=3D"#UsingtheJavaScriptRESTAPIClient-MovingaLocation">Moving a L=
ocation</a></li>=20
<li><a href=3D"#UsingtheJavaScriptRESTAPIClient-SearchingforContentorLocati=
on">Searching for Content or Location</a></li>=20
</ul> </li>=20
</ul>=20
</div>
<p></p>
</div>=20
</div>=20
</div>=20
</div>
    </div>
</body>
</html>
------=_Part_3751_1559313065.1485855160804--
