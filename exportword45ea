Message-ID: <125428160.4012.1485856334317.JavaMail.confluence@ip-10-127-227-164>
Subject: Exported From Confluence
MIME-Version: 1.0
Content-Type: multipart/related; 
	boundary="----=_Part_4011_623413210.1485856334298"

------=_Part_4011_623413210.1485856334298
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Content-Location: file:///C:/exported.html

<html xmlns:o=3D'urn:schemas-microsoft-com:office:office'
      xmlns:w=3D'urn:schemas-microsoft-com:office:word'
      xmlns:v=3D'urn:schemas-microsoft-com:vml'
      xmlns=3D'urn:w3-org-ns:HTML'>
<head>
    <meta http-equiv=3D"Content-Type" content=3D"text/html; charset=3Dutf-8=
">
    <title>Smart HttpCache clearing</title>
    <!--[if gte mso 9]>
    <xml>
        <o:OfficeDocumentSettings>
            <o:TargetScreenSize>1024x640</o:TargetScreenSize>
            <o:PixelsPerInch>72</o:PixelsPerInch>
            <o:AllowPNG/>
        </o:OfficeDocumentSettings>
        <w:WordDocument>
            <w:View>Print</w:View>
            <w:Zoom>90</w:Zoom>
            <w:DoNotOptimizeForBrowser/>
        </w:WordDocument>
    </xml>
    <![endif]-->
    <style>
                <!--
        @page Section1 {
            size: 8.5in 11.0in;
            margin: 1.0in;
            mso-header-margin: .5in;
            mso-footer-margin: .5in;
            mso-paper-source: 0;
        }

        td {
            page-break-inside: avoid;
        }

        tr {
            page-break-after: avoid;
        }

        div.Section1 {
            page: Section1;
        }

        /* Confluence print stylesheet. Common to all themes for print medi=
a */
/* Full of !important until we improve batching for print CSS */

@media print {
    #main {
        padding-bottom: 1em !important; /* The default padding of 6em is to=
o much for printouts */
    }

    body {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        font-size: 10pt;
        line-height: 1.2;
    }

    body, #full-height-container, #main, #page, #content, .has-personal-sid=
ebar #content {
        background: #fff !important;
        color: #000 !important;
        border: 0 !important;
        width: 100% !important;
        height: auto !important;
        min-height: auto !important;
        margin: 0 !important;
        padding: 0 !important;
        display: block !important;
    }

    a, a:link, a:visited, a:focus, a:hover, a:active {
        color: #000;
    }

    #content h1,
    #content h2,
    #content h3,
    #content h4,
    #content h5,
    #content h6 {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        page-break-after: avoid;
    }

    pre {
        font-family: Monaco, "Courier New", monospace;
    }

    #header,
    .aui-header-inner,
    #navigation,
    #sidebar,
    .sidebar,
    #personal-info-sidebar,
    .ia-fixed-sidebar,
    .page-actions,
    .navmenu,
    .ajs-menu-bar,
    .noprint,
    .inline-control-link,
    .inline-control-link a,
    a.show-labels-editor,
    .global-comment-actions,
    .comment-actions,
    .quick-comment-container,
    #addcomment {
        display: none !important;
    }

    .comment .date::before {
        content: none !important; /* remove middot for print view */
    }

    h1.pagetitle img {
        height: auto;
        width: auto;
    }

    .print-only {
        display: block;
    }

    #footer {
        position: relative !important; /* CONF-17506 Place the footer at en=
d of the content */
        margin: 0;
        padding: 0;
        background: none;
        clear: both;
    }

    #poweredby {
        border-top: none;
        background: none;
    }

    #poweredby li.print-only {
        display: list-item;
        font-style: italic;
    }

    #poweredby li.noprint {
        display: none;
    }

    /* no width controls in print */
    .wiki-content .table-wrap,
    .wiki-content p,
    .panel .codeContent,
    .panel .codeContent pre,
    .image-wrap {
        overflow: visible !important;
    }

    /* TODO - should this work? */
    #children-section,
    #comments-section .comment,
    #comments-section .comment .comment-body,
    #comments-section .comment .comment-content,
    #comments-section .comment p {
        page-break-inside: avoid;
    }

    #page-children a {
        text-decoration: none;
    }

    /**
     hide twixies

     the specificity here is a hack because print styles
     are getting loaded before the base styles. */
    #comments-section.pageSection .section-header,
    #comments-section.pageSection .section-title,
    #children-section.pageSection .section-header,
    #children-section.pageSection .section-title,
    .children-show-hide {
        padding-left: 0;
        margin-left: 0;
    }

    .children-show-hide.icon {
        display: none;
    }

    /* personal sidebar */
    .has-personal-sidebar #content {
        margin-right: 0px;
    }

    .has-personal-sidebar #content .pageSection {
        margin-right: 0px;
    }
}
-->
    </style>
</head>
<body>
    <h1>Smart HttpCache clearing</h1>
    <div class=3D"Section1">
        <p><strong><span class=3D"status-macro aui-lozenge aui-lozenge-curr=
ent">EZP &gt;=3D 2015.01</span><br></strong></p>
<p><strong>Smart Http cache clearing</strong> refers to the ability to clea=
r cache for locations/content that can be in relation with the content bein=
g currently cleared.</p>
<p>When published, any content item usually has at least one location, figu=
red by its URL. Therefore Http cache being bound to URLs, if content <code>=
A</code> is updated (new version is published), we want Http cache for all =
its locations to be cleared, so the content itself can appear up-to-date ev=
erywhere it is supposed to be displayed. Sometimes, clearing cache for the =
content's locations is not sufficient. You can for instance have an excerpt=
 of it displayed in a list from the parent location, or from within a relat=
ion. In this case, cache for the parent location and/or the relation need t=
o be cleared as well (at least if an ESI is not used).</p>
<h2 id=3D"SmartHttpCacheclearing-Themechanism">The mechanism</h2>
<p><strong>Smart Http cache clearing</strong> is an event based mechanism. =
Whenever a content item needs its cache to be cleared, the cache purger ser=
vice sends an <code>exponential.cache_clear.content</code> event (also identi=
fied by <code>eZ\Publish\Core\MVC\Symfony\MVCEvents::CACHE_CLEAR_CONTENT</c=
ode> constant) and passes a <code>eZ\Publish\Core\MVC\Symfony\Event\Content=
CacheClearEvent</code> event object. This object contains the ContentInfo o=
bject we need to clear the cache for. Every listener for this event can add=
 location objects to the <em>cache clear list</em>.</p>
<p>Once the event dispatched, the purger passes collected location objects =
to the purge client, which will effectively send the cache <code>BAN</code>=
 request.</p>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<strong>Note</strong>: The event is dispatched with a dedicated event dispa=
tcher,=20
<code>exponential.http_cache.event_dispatcher</code>.
</div>
</div>
<h2 id=3D"SmartHttpCacheclearing-Defaultbehavior">Default behavior</h2>
<p>By default, following locations will be added to the cache clear list:</=
p>
<ul class=3D"task-list">
<li>All locations assigned to content (<code>AssignedLocationsListener</cod=
e>)</li>
<li>Parent location of all content's locations (<code>ParentLocationsListen=
er</code>)</li>
<li>Locations for content's relations, including reverse relations (<code>R=
elatedLocationsListener</code>)</li>
</ul>
<h2 id=3D"SmartHttpCacheclearing-Implementingacustomlistener">Implementing =
a custom listener</h2>
<p>By design, smart Http cache clearing is extensible. One can easily imple=
ment an event listener/subscriber to the <code>exponential.cache_clear.conten=
t</code> event and add locations to the cache clear list.</p>
<h3 id=3D"SmartHttpCacheclearing-Example">Example</h3>
<p>Here's a very simple custom listener example, adding an arbitrary locati=
on to the list.</p>
<div class=3D"confluence-information-macro confluence-information-macro-not=
e">
<span class=3D"aui-icon aui-icon-small aui-iconfont-warning confluence-info=
rmation-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<strong>Important</strong>: Cache clear listener services=20
<strong>must</strong> be tagged as=20
<code>exponential.http_cache.event_subscriber</code> or=20
<code>exponential.http_cache.event_listener</code>.
</div>
</div>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: RDark" style=3D"font-size:1=
2px;">namespace Acme\AcmeTestBundle\EventListener;

use eZ\Publish\API\Repository\LocationService;
use eZ\Publish\Core\MVC\Symfony\Event\ContentCacheClearEvent;
use eZ\Publish\Core\MVC\Symfony\MVCEvents;
use Symfony\Component\EventDispatcher\EventSubscriberInterface;

class ArbitraryLocationsListener implements EventSubscriberInterface
{
    /**
     * @var LocationService
     */
    private $locationService;

    public function __construct( LocationService $locationService )
    {
        $this-&gt;locationService =3D $locationService;
    }

    public static function getSubscribedEvents()
    {
        return [MVCEvents::CACHE_CLEAR_CONTENT =3D&gt; ['onContentCacheClea=
r', 100]];
    }

    public function onContentCacheClear( ContentCacheClearEvent $event )
    {
        // $contentInfo is the ContentInfo object for the content being cle=
ared.
        // You can extract information from it (e.g. ContentType from its c=
ontentTypeId), using appropriate Repository services.
        $contentInfo =3D $event-&gt;getContentInfo();

        // Adding arbitrary locations to the cache clear list.
        $event-&gt;addLocationToClear( $this-&gt;locationService-&gt;loadLo=
cation( 123 ) );
        $event-&gt;addLocationToClear( $this-&gt;locationService-&gt;loadLo=
cation( 456 ) );
    }
}</pre>=20
</div>
</div>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: perl; gutter: false; theme: RDark" style=3D"font-size:=
12px;">parameters:
    acme.cache_clear.arbitrary_locations_listener.class: Acme\AcmeTestBundl=
e\EventListener\ArbitraryLocationsListener

services:
    acme.cache_clear.arbitrary_locations_listener:
        class: %acme.cache_clear.arbitrary_locations_listener.class%
        arguments: [@exponential.api.service.location]
        tags:
            - { name: exponential.http_cache.event_subscriber }

</pre>=20
</div>
</div>
    </div>
</body>
</html>
------=_Part_4011_623413210.1485856334298--
