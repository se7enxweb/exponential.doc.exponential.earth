Message-ID: <2029433190.3592.1485853793869.JavaMail.confluence@ip-10-127-227-164>
Subject: Exported From Confluence
MIME-Version: 1.0
Content-Type: multipart/related; 
	boundary="----=_Part_3591_2124241465.1485853793868"

------=_Part_3591_2124241465.1485853793868
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Content-Location: file:///C:/exported.html

<html xmlns:o=3D'urn:schemas-microsoft-com:office:office'
      xmlns:w=3D'urn:schemas-microsoft-com:office:word'
      xmlns:v=3D'urn:schemas-microsoft-com:vml'
      xmlns=3D'urn:w3-org-ns:HTML'>
<head>
    <meta http-equiv=3D"Content-Type" content=3D"text/html; charset=3Dutf-8=
">
    <title>General REST usage</title>
    <!--[if gte mso 9]>
    <xml>
        <o:OfficeDocumentSettings>
            <o:TargetScreenSize>1024x640</o:TargetScreenSize>
            <o:PixelsPerInch>72</o:PixelsPerInch>
            <o:AllowPNG/>
        </o:OfficeDocumentSettings>
        <w:WordDocument>
            <w:View>Print</w:View>
            <w:Zoom>90</w:Zoom>
            <w:DoNotOptimizeForBrowser/>
        </w:WordDocument>
    </xml>
    <![endif]-->
    <style>
                <!--
        @page Section1 {
            size: 8.5in 11.0in;
            margin: 1.0in;
            mso-header-margin: .5in;
            mso-footer-margin: .5in;
            mso-paper-source: 0;
        }

        td {
            page-break-inside: avoid;
        }

        tr {
            page-break-after: avoid;
        }

        div.Section1 {
            page: Section1;
        }

        /* Confluence print stylesheet. Common to all themes for print medi=
a */
/* Full of !important until we improve batching for print CSS */

@media print {
    #main {
        padding-bottom: 1em !important; /* The default padding of 6em is to=
o much for printouts */
    }

    body {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        font-size: 10pt;
        line-height: 1.2;
    }

    body, #full-height-container, #main, #page, #content, .has-personal-sid=
ebar #content {
        background: #fff !important;
        color: #000 !important;
        border: 0 !important;
        width: 100% !important;
        height: auto !important;
        min-height: auto !important;
        margin: 0 !important;
        padding: 0 !important;
        display: block !important;
    }

    a, a:link, a:visited, a:focus, a:hover, a:active {
        color: #000;
    }

    #content h1,
    #content h2,
    #content h3,
    #content h4,
    #content h5,
    #content h6 {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        page-break-after: avoid;
    }

    pre {
        font-family: Monaco, "Courier New", monospace;
    }

    #header,
    .aui-header-inner,
    #navigation,
    #sidebar,
    .sidebar,
    #personal-info-sidebar,
    .ia-fixed-sidebar,
    .page-actions,
    .navmenu,
    .ajs-menu-bar,
    .noprint,
    .inline-control-link,
    .inline-control-link a,
    a.show-labels-editor,
    .global-comment-actions,
    .comment-actions,
    .quick-comment-container,
    #addcomment {
        display: none !important;
    }

    .comment .date::before {
        content: none !important; /* remove middot for print view */
    }

    h1.pagetitle img {
        height: auto;
        width: auto;
    }

    .print-only {
        display: block;
    }

    #footer {
        position: relative !important; /* CONF-17506 Place the footer at en=
d of the content */
        margin: 0;
        padding: 0;
        background: none;
        clear: both;
    }

    #poweredby {
        border-top: none;
        background: none;
    }

    #poweredby li.print-only {
        display: list-item;
        font-style: italic;
    }

    #poweredby li.noprint {
        display: none;
    }

    /* no width controls in print */
    .wiki-content .table-wrap,
    .wiki-content p,
    .panel .codeContent,
    .panel .codeContent pre,
    .image-wrap {
        overflow: visible !important;
    }

    /* TODO - should this work? */
    #children-section,
    #comments-section .comment,
    #comments-section .comment .comment-body,
    #comments-section .comment .comment-content,
    #comments-section .comment p {
        page-break-inside: avoid;
    }

    #page-children a {
        text-decoration: none;
    }

    /**
     hide twixies

     the specificity here is a hack because print styles
     are getting loaded before the base styles. */
    #comments-section.pageSection .section-header,
    #comments-section.pageSection .section-title,
    #children-section.pageSection .section-header,
    #children-section.pageSection .section-title,
    .children-show-hide {
        padding-left: 0;
        margin-left: 0;
    }

    .children-show-hide.icon {
        display: none;
    }

    /* personal sidebar */
    .has-personal-sidebar #content {
        margin-right: 0px;
    }

    .has-personal-sidebar #content .pageSection {
        margin-right: 0px;
    }
}
-->
    </style>
</head>
<body>
    <h1>General REST usage</h1>
    <div class=3D"Section1">
        <p>As explained in the <a href=3D"/display/EZP/eZ+Publish+REST+API"=
>introduction</a>, the REST API is based on a very limited list of general =
principles:</p>
<ul>
<li>each resource (uri) interacts with a part of the system (Content, URL a=
liases, user groups...),</li>
<li>for each resource, one or more verbs are available, each having a diffe=
rent effect (delete a Content, get a URL Alias, list user groups...),</li>
<li>media-type request headers indicate what type of data (Content / Conten=
tInfo), and data format (JSON or XML), are expected as a response, and what=
 can be requested.</li>
</ul>
<h2 id=3D"GeneralRESTusage-AnatomyofaRESTcall">Anatomy of a REST call</h2>
<h3 id=3D"GeneralRESTusage-WhatwecanlearnfromaGETrequest">What we can learn=
 from a GET request</h3>
<p>This verb is used to query the API for information. It is one of the two=
 operations web browsers implement, and the most commonly used.</p>
<h4 id=3D"GeneralRESTusage-Request">Request</h4>
<p>The only requirement for this verb is usually the resource URI, and the =
accept header. On top of that, cache request headers can be added, like <co=
de>If-None-Match</code>, but those aren't fully implemented yet in eZ Publi=
sh 5.0.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>Load ContentInfo request</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">GET /content/objects/23 HTTP/1.1
Accept: application/vnd.ez.api.ContentInfo+xml</pre>=20
</div>
</div>
<h4 id=3D"GeneralRESTusage-Responseheaders">Response headers</h4>
<p>The API will reply with:</p>
<ul>
<li>an&nbsp;<strong>HTTP response code</strong>,</li>
<li>a few <strong>headers</strong>,</li>
<li>the XML representation of the ContentInfo for content with ID 23 in XML=
 format, as specified in the Accept header.</li>
</ul>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>Load ContentInfo response</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">HTTP/1.1 200 OK
Accept-Patch: application/vnd.ez.api.ContentUpdate+xml;charset=3Dutf8
Content-Type: application/vnd.ez.api.ContentInfo+xml
Content-Length: xxx</pre>=20
</div>
</div>
<p>The length of our content, provided by the Content-Length header, isn't&=
nbsp;<em>that</em> useful.</p>
<h5 id=3D"GeneralRESTusage-HTTPCode">HTTP Code</h5>
<p>The API responded here with a standard 200 OK HTTP response code, which =
is the expected response code for a "normal" GET request. Some GET requests=
, like&nbsp;<a href=3D"https://github.com/ezsystems/exponential-kernel/blob/m=
aster/doc/specifications/rest/REST-API-V2.rst#13241%C2%A0%C2%A0%C2%A0get-cu=
rrent-version" class=3D"external-link" rel=3D"nofollow">getting a content's=
 current version</a>, may reply with a 301 Moved permanently, or 307 Tempor=
ary redirect code.</p>
<p>Errors will be indicated with HTTP error codes, like 404 for Not Found, =
or 500 for Internal server error. The <a href=3D"https://github.com/ezsyste=
ms/exponential-kernel/blob/master/doc/specifications/rest/REST-API-V2.rst" cl=
ass=3D"external-link" rel=3D"nofollow">REST specifications</a> provide the =
list of every HTTP response code you can expect from implemented resources.=
</p>
<h5 id=3D"GeneralRESTusage-Content-Typeheader">Content-Type header</h5>
<p>As long as a response contains an actual HTTP body, the Content-Type hea=
der will be used to specify which Content-Type is contained in the response=
. In that case, a&nbsp;ContentInfo (<code>Content-Type: application/vnd.ez.=
api.<strong>ContentInfo</strong></code>) in XML (<code>Content-Type:&nbsp;a=
pplication/vnd.ez.api.ContentInfo<strong>+xml</strong></code>)</p>
<h5 id=3D"GeneralRESTusage-Accept-Patchheader">Accept-Patch header</h5>
<p>This is a very interesting one.</p>
<p>It tells us we can modify the received content by patching (<code><stron=
g>Accept-Patch</strong>: application/vnd.ez.api.ContentUpdate+xml;charset=
=3Dutf8</code>) it with a <a href=3D"https://github.com/ezsystems/exponential=
-kernel/blob/master/eZ/Publish/API/Repository/Values/Content/ContentUpdateS=
truct.php" class=3D"external-link" rel=3D"nofollow">ContentUpdateStruct</a>=
 (<code>Accept-Patch: application/vnd.ez.api.<strong>ContentUpdate</strong>=
+xml;charset=3Dutf8</code>)&nbsp;in XML&nbsp;&nbsp;(<code>Accept-Patch: app=
lication/vnd.ez.api.ContentUpdate<strong>+xml</strong>;charset=3Dutf8</code=
>) format. Of course, JSON would also work, with the proper format.</p>
<p>This last part means that if we send a PATCH /content/objects/23 request=
 with a <a href=3D"https://github.com/ezsystems/exponential-kernel/blob/maste=
r/eZ/Publish/API/Repository/Values/Content/ContentUpdateStruct.php" class=
=3D"external-link" rel=3D"nofollow">ContentUpdateStruct</a>&nbsp;XML payloa=
d, we will update this Content.&nbsp;</p>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>REST will use the <code><strong>Accept-Patch</strong></code> header to i=
ndicate you how to <strong>modify </strong>the returned<strong> data</stron=
g>.</p>
</div>
</div>
<h5 id=3D"GeneralRESTusage-Otherheaders:Location">Other headers: Location</=
h5>
<p>Depending on the resource, request &amp; response headers will vary. For=
 instance,&nbsp;<a href=3D"https://github.com/ezsystems/exponential-kernel/bl=
ob/master/doc/specifications/rest/REST-API-V2.rst#13231%C2%A0%C2%A0%C2%A0cr=
eating-content" class=3D"external-link" rel=3D"nofollow">creating content</=
a>, or <a href=3D"https://github.com/ezsystems/exponential-kernel/blob/master=
/doc/specifications/rest/REST-API-V2.rst#13241%C2%A0%C2%A0%C2%A0get-current=
-version" class=3D"external-link" rel=3D"nofollow">getting a content's curr=
ent version</a>&nbsp;will both send a <code>Location</code> header to provi=
de you with the requested resource's ID.</p>
<p>Those particular headers generally match a specific list of HTTP respons=
e codes. Location is sent by <code>201 Created</code>, <code>301 Moved perm=
anently,</code> <code>307 Temporary redirect responses</code>. This list is=
n't finished, but you can expect those HTTP responses to provide you with a=
 Location header.</p>
<h5 id=3D"GeneralRESTusage-Otherheaders:Destination">Other headers: Destina=
tion</h5>
<p>This request header is the request counterpart of the Location response =
header. It is used in a COPY / MOVE operation, like <a href=3D"https://gith=
ub.com/ezsystems/exponential-kernel/blob/master/doc/specifications/rest/REST-=
API-V2.rst#13236%C2%A0%C2%A0%C2%A0copy-content" class=3D"external-link" rel=
=3D"nofollow">copying a Content</a>, on a resource to indicate where the re=
source should be moved to, using the ID of the destination.</p>
<h4 id=3D"GeneralRESTusage-Responsebody">Response body</h4>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">=20
<div class=3D"codeHeader panelHeader pdl hide-border-bottom" style=3D"borde=
r-bottom-width: 1px;">=20
<b class=3D" code-title">Load ContentInfo response body</b>=20
<span class=3D"collapse-source expand-control"><span class=3D"expand-contro=
l-icon icon">&nbsp;</span><span class=3D"expand-control-text">Expand source=
</span></span>=20
</div>=20
<div class=3D"codeContent panelContent pdl hide-toolbar">=20
<pre class=3D"brush: html/xml; gutter: true; theme: Eclipse; collapse: true=
" style=3D"font-size:12px;">&lt;?xml version=3D"1.0" encoding=3D"UTF-8"?&gt=
;
&lt;Content href=3D"/content/objects/23" id=3D"23"
  media-type=3D"application/vnd.ez.api.Content+xml" remoteId=3D"qwert123"&g=
t;
  &lt;ContentType href=3D"/content/types/10" media-type=3D"application/vnd.=
ez.api.ContentType+xml" /&gt;
  &lt;Name&gt;This is a title&lt;/Name&gt;
  &lt;Versions href=3D"/content/objects/23/versions" media-type=3D"applicat=
ion/vnd.ez.api.VersionList+xml" /&gt;
  &lt;CurrentVersion href=3D"/content/objects/23/currentversion"
    media-type=3D"application/vnd.ez.api.Version+xml"/&gt;
  &lt;Section href=3D"/content/sections/4" media-type=3D"application/vnd.ez=
.api.Section+xml" /&gt;
  &lt;MainLocation href=3D"/content/locations/1/4/65" media-type=3D"applica=
tion/vnd.ez.api.Location+xml" /&gt;
  &lt;Locations href=3D"/content/objects/23/locations" media-type=3D"applic=
ation/vnd.ez.api.LocationList+xml" /&gt;
  &lt;Owner href=3D"/user/users/14" media-type=3D"application/vnd.ez.api.Us=
er+xml" /&gt;
  &lt;lastModificationDate&gt;2012-02-12T12:30:00&lt;/lastModificationDate&=
gt;
  &lt;publishedDate&gt;2012-02-12T15:30:00&lt;/publishedDate&gt;
  &lt;mainLanguageCode&gt;eng-US&lt;/mainLanguageCode&gt;
  &lt;alwaysAvailable&gt;true&lt;/alwaysAvailable&gt;
&lt;/Content&gt;</pre>=20
</div>=20
</div>
<p>The XML body is a serialized version of a <a href=3D"https://github.com/=
ezsystems/exponential-kernel/blob/master/eZ/Publish/API/Repository/Values/Con=
tent/ContentInfo.php" class=3D"external-link" rel=3D"nofollow">ContentInfo<=
/a> struct. Most REST API calls will actually involve exchanging XML / JSON=
 representations of the public API. This consistency, which we took very se=
riously, was a hard requirement for us, as it makes documentation much bett=
er by requiring&nbsp;<em>less</em> of it.</p>
<p>As explained above, the API has told us that we could modify content obj=
ect 23 by sending a <code>vendor/application/vnd.ez.<strong>ContentUpdate</=
strong>+xml</code>. This media type again matches a Value in the API, <a hr=
ef=3D"https://github.com/ezsystems/exponential-kernel/blob/master/eZ/Publish/=
API/Repository/Values/Content/ContentUpdateStruct.php" class=3D"external-li=
nk" rel=3D"nofollow">ContentUpdateStruct</a>.</p>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>The REST API data structs mostly match a PHP Public API value object</p>
</div>
</div>
<h4 id=3D"GeneralRESTusage-Valueobjectsrepresentation">Value objects repres=
entation</h4>
<p>Value objects like <a href=3D"https://github.com/ezsystems/ezp-next/blob=
/master/eZ/Publish/API/Repository/Values/Content/ContentInfo.php" class=3D"=
external-link" rel=3D"nofollow">ContentInfo</a>&nbsp;basically feature two =
types of fields: basic, local fields (modified, name...) and foreign field(=
s) references (sectionId, mainLocationId).</p>
<p>Local fields will be represented in XML / JSON with a primitive type (in=
teger, string), while foreign key references will be represented as a link =
to another resource. This resource will be identified with its URI (<code>/=
content/objects/23/locations</code>), and the media-type that should be req=
uested when calling that resource (<code>media-type=3D"application/vnd.ez.a=
pi.LocationList+xml"</code>). Depending on how much data you need, you may =
choose to crawl those relations, or to ignore them.</p>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<p class=3D"title">XSD files</p>
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>For each XML structure known to the REST API, you can find XSD files in =
the XSD folder of the specifications. Those will allow you to validate your=
 XML, and learn about every option those XML structures feature.</p>
<a href=3D"https://github.com/ezsystems/exponential-kernel/tree/master/doc/sp=
ecifications/rest/xsd" class=3D"external-link" rel=3D"nofollow">https://git=
hub.com/ezsystems/exponential-kernel/tree/master/doc/specifications/rest/xsd<=
/a>&nbsp;
</div>
</div>
<h2 id=3D"GeneralRESTusage-Requestparameters">Request parameters</h2>
<p>So far, we have seen that responses will depend on:</p>
<ul>
<li>The URI,</li>
<li>Request headers, like the Accept one</li>
</ul>
<p>URI parameters are of course also used. They usually serve as filters / =
options for the requested resource. For instance, they can be used to custo=
mize a list's offset/limit, to filter a list, specify which fields you want=
 from a content...&nbsp;For almost all resources, those parameters must be =
provided as GET ones. This request would return the 5 first relations for V=
ersion 2 of Content 59:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>GET request with limit parameter</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">GET /content/objects/59/versions/2/relations&amp;limit=3D5 HTTP/1.1
Accept: application/vnd.ez.api.RelationList+xml</pre>=20
</div>
</div>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<p class=3D"title">Working with value objects IDs</p>
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>Resources that accept a reference to another resource expect this refere=
nce to be given as a REST ID, not a Public API ID. As such, the URI to requ=
est users that are assigned the role with ID 1 would be <code>GET /api/ezp/=
v2/user/users?roleId=3D/api/ezp/v2/user/roles/1</code>.</p>
</div>
</div>
<h2 id=3D"GeneralRESTusage-CustomHTTPverbs">Custom HTTP verbs</h2>
<p>In addition to the usual GET, POST, PUT and DELETE HTTP verbs, the API s=
upports a few custom ones: COPY, MOVE (<a href=3D"http://tools.ietf.org/htm=
l/rfc2518" class=3D"external-link" rel=3D"nofollow">http://tools.ietf.org/h=
tml/rfc2518</a>), PATCH (<a href=3D"http://tools.ietf.org/html/rfc5789" cla=
ss=3D"external-link" rel=3D"nofollow">http://tools.ietf.org/html/rfc5789</a=
>)&nbsp;and PUBLISH. While it should generally not be a problem, some HTTP =
servers may fail to recognize those. If you face this situation, you can cu=
stomize a standard verb (POST, PUT) with the&nbsp;<span><code>X-HTTP-Method=
-Override</code> header.</span></p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>PATCH HTTP request</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">POST /content/objects/59 HTTP/1.1
X-HTTP-Method-Override: PATCH</pre>=20
</div>
</div>
<p><span>Both methods are always mentioned, when applicable, in the specifi=
cations.</span></p>
<h2 id=3D"GeneralRESTusage-Specifyingasiteaccess">Specifying a siteaccess</=
h2>
<p>One of the principles of REST is that the same resource (Content, Locati=
on, ContentType, ...) should be unique. The purpose is mostly to make it si=
mple to cache your REST API using a reverse proxy like Varnish. If the same=
 resource is available at multiple locations, cache purging becomes much mo=
re complex.</p>
<p>Due to this, we decided not to enable siteaccess matching with REST. In =
order to specify a siteaccess when talking to the REST API, a custom header=
,&nbsp;<code>X-Siteaccess</code>, needs to be provided. If it isn't, the de=
fault one will be used:</p>
<div>
<p>&nbsp;</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>X-Siteaccess header example</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: plain; gutter: false; theme: Eclipse" style=3D"font-si=
ze:12px;">GET / HTTP/1.1
Host: api.example.com
Accept: application/vnd.ez.api.Root+json
X-Siteaccess: ezdemo_site_admin</pre>=20
</div>
</div>
<p>&nbsp;</p>
</div>
<p>&nbsp;</p>
<p><span><br></span></p>
    </div>
</body>
</html>
------=_Part_3591_2124241465.1485853793868--
