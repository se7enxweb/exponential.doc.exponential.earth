Message-ID: <912067430.3020.1485851657071.JavaMail.confluence@ip-10-127-227-164>
Subject: Exported From Confluence
MIME-Version: 1.0
Content-Type: multipart/related; 
	boundary="----=_Part_3019_1855719574.1485851657071"

------=_Part_3019_1855719574.1485851657071
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Content-Location: file:///C:/exported.html

<html xmlns:o=3D'urn:schemas-microsoft-com:office:office'
      xmlns:w=3D'urn:schemas-microsoft-com:office:word'
      xmlns:v=3D'urn:schemas-microsoft-com:vml'
      xmlns=3D'urn:w3-org-ns:HTML'>
<head>
    <meta http-equiv=3D"Content-Type" content=3D"text/html; charset=3Dutf-8=
">
    <title>1. Getting started</title>
    <!--[if gte mso 9]>
    <xml>
        <o:OfficeDocumentSettings>
            <o:TargetScreenSize>1024x640</o:TargetScreenSize>
            <o:PixelsPerInch>72</o:PixelsPerInch>
            <o:AllowPNG/>
        </o:OfficeDocumentSettings>
        <w:WordDocument>
            <w:View>Print</w:View>
            <w:Zoom>90</w:Zoom>
            <w:DoNotOptimizeForBrowser/>
        </w:WordDocument>
    </xml>
    <![endif]-->
    <style>
                <!--
        @page Section1 {
            size: 8.5in 11.0in;
            margin: 1.0in;
            mso-header-margin: .5in;
            mso-footer-margin: .5in;
            mso-paper-source: 0;
        }

        td {
            page-break-inside: avoid;
        }

        tr {
            page-break-after: avoid;
        }

        div.Section1 {
            page: Section1;
        }

        /* Confluence print stylesheet. Common to all themes for print medi=
a */
/* Full of !important until we improve batching for print CSS */

@media print {
    #main {
        padding-bottom: 1em !important; /* The default padding of 6em is to=
o much for printouts */
    }

    body {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        font-size: 10pt;
        line-height: 1.2;
    }

    body, #full-height-container, #main, #page, #content, .has-personal-sid=
ebar #content {
        background: #fff !important;
        color: #000 !important;
        border: 0 !important;
        width: 100% !important;
        height: auto !important;
        min-height: auto !important;
        margin: 0 !important;
        padding: 0 !important;
        display: block !important;
    }

    a, a:link, a:visited, a:focus, a:hover, a:active {
        color: #000;
    }

    #content h1,
    #content h2,
    #content h3,
    #content h4,
    #content h5,
    #content h6 {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        page-break-after: avoid;
    }

    pre {
        font-family: Monaco, "Courier New", monospace;
    }

    #header,
    .aui-header-inner,
    #navigation,
    #sidebar,
    .sidebar,
    #personal-info-sidebar,
    .ia-fixed-sidebar,
    .page-actions,
    .navmenu,
    .ajs-menu-bar,
    .noprint,
    .inline-control-link,
    .inline-control-link a,
    a.show-labels-editor,
    .global-comment-actions,
    .comment-actions,
    .quick-comment-container,
    #addcomment {
        display: none !important;
    }

    .comment .date::before {
        content: none !important; /* remove middot for print view */
    }

    h1.pagetitle img {
        height: auto;
        width: auto;
    }

    .print-only {
        display: block;
    }

    #footer {
        position: relative !important; /* CONF-17506 Place the footer at en=
d of the content */
        margin: 0;
        padding: 0;
        background: none;
        clear: both;
    }

    #poweredby {
        border-top: none;
        background: none;
    }

    #poweredby li.print-only {
        display: list-item;
        font-style: italic;
    }

    #poweredby li.noprint {
        display: none;
    }

    /* no width controls in print */
    .wiki-content .table-wrap,
    .wiki-content p,
    .panel .codeContent,
    .panel .codeContent pre,
    .image-wrap {
        overflow: visible !important;
    }

    /* TODO - should this work? */
    #children-section,
    #comments-section .comment,
    #comments-section .comment .comment-body,
    #comments-section .comment .comment-content,
    #comments-section .comment p {
        page-break-inside: avoid;
    }

    #page-children a {
        text-decoration: none;
    }

    /**
     hide twixies

     the specificity here is a hack because print styles
     are getting loaded before the base styles. */
    #comments-section.pageSection .section-header,
    #comments-section.pageSection .section-title,
    #children-section.pageSection .section-header,
    #children-section.pageSection .section-title,
    .children-show-hide {
        padding-left: 0;
        margin-left: 0;
    }

    .children-show-hide.icon {
        display: none;
    }

    /* personal sidebar */
    .has-personal-sidebar #content {
        margin-right: 0px;
    }

    .has-personal-sidebar #content .pageSection {
        margin-right: 0px;
    }
}
-->
    </style>
</head>
<body>
    <h1>1. Getting started</h1>
    <div class=3D"Section1">
        <p>In this chapter, we will see two ways of customizing eZ Platform=
: command line scripts (for import scripts, for instance), and custom contr=
ollers, the eZ Platform equivalent of Exponential 4.x custom modules.</p>
<p><style type=3D"text/css">/*<![CDATA[*/
div.rbtoc1485851656975 {padding: 0px;}
div.rbtoc1485851656975 ul {list-style: disc;margin-left: 0px;}
div.rbtoc1485851656975 li {margin-left: 0px;padding-left: 0px;}

/*]]>*/</style></p>
<div class=3D"toc-macro rbtoc1485851656975">=20
<ul class=3D"toc-indentation">=20
<li><a href=3D"#id-1.Gettingstarted-Symfonybundle">Symfony bundle</a>=20
<ul class=3D"toc-indentation">=20
<li><a href=3D"#id-1.Gettingstarted-Generatinganewbundle">Generating a new =
bundle</a></li>=20
<li><a href=3D"#id-1.Gettingstarted-Creatingacommandlinescriptinyourbundle"=
>Creating a command line script in your bundle</a></li>=20
<li><a href=3D"#id-1.Gettingstarted-Creatingacustomroutewithacontrolleracti=
on">Creating a custom route with a controller action</a>=20
<ul class=3D"toc-indentation">=20
<li><a href=3D"#id-1.Gettingstarted-routing.yml">routing.yml</a></li>=20
<li><a href=3D"#id-1.Gettingstarted-DefaultController.php">DefaultControlle=
r.php</a></li>=20
</ul> </li>=20
</ul> </li>=20
</ul>=20
</div>
<p></p>
<h2 id=3D"id-1.Gettingstarted-Symfonybundle">Symfony bundle</h2>
<p>In order to test and use Public API code, you will need to build a custo=
m bundle. Bundles are Symfony's extensions, and are therefore also used to =
extend eZ Platform. Symfony 2 provides code generation tools that will let =
you create your own bundle and get started in a few minutes.</p>
<p>In this chapter, we will show how to create a custom bundle, and impleme=
nt both a command line script and a custom route with its own controller ac=
tion and view. All shell commands assume that you use some Linux shell, but=
 those commands would of course also work on Windows systems.</p>
<h3 id=3D"id-1.Gettingstarted-Generatinganewbundle">Generating a new bundle=
</h3>
<p>First, change the directory to your eZ Platform root.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: bash; gutter: false; theme: Eclipse" style=3D"font-siz=
e:12px;">$ cd /path/to/ezplatform</pre>=20
</div>
</div>
<p>Then use the app/console application with the <code>generate:bundle</cod=
e> command to start the bundle generation wizard.</p>
<p>Let's follow the instructions provided by the wizard. Our objective is t=
o create a bundle named <code> <a href=3D"https://github.com/docb22/ez-publ=
ish-cookbook/tree/master/EzSystems/CookBookBundle/Command" class=3D"externa=
l-link" rel=3D"nofollow">EzSystems/Bundles/CookBookBundle</a> </code>, loca=
ted in the&nbsp;<code>src</code>&nbsp;directory.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: bash; gutter: false; theme: Eclipse" style=3D"font-siz=
e:12px;">$ php app/console generate:bundle</pre>=20
</div>
</div>
<p>The wizard will first ask about our bundle's namespace. Each bundle's na=
mespace should feature a vendor name (in our own case:&nbsp;<code>EzSystems=
</code>), optionally followed by a sub-namespace (we could have chosen to u=
se&nbsp;<code>Bundle</code>), and end with the actual bundle's name, suffix=
ed with Bundle:&nbsp;<code>CookbookBundle</code>.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>Bundle namespace</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: bash; gutter: false; theme: Eclipse" style=3D"font-siz=
e:12px;">Your application code must be written in bundles. This command hel=
ps you generate them easily.

Each bundle is hosted under a namespace (like Acme/Bundle/BlogBundle).

The namespace should begin with a "vendor" name like your company name, you=
r project name, or your client name, followed by one or more optional categ=
ory sub-namespaces, and it should end with the bundle name itself (which mu=
st have Bundle as a suffix).

See http://symfony.com/doc/current/cookbook/bundles/best_practices.html#ind=
ex-1 for more details on bundle naming conventions.=20

Use / instead of \ for the namespace delimiter to avoid any problem.

Bundle namespace: EzSystems/CookbookBundle
</pre>=20
</div>
</div>
<p>You will then be asked about the Bundle's name, used to reference your b=
undle in your code. We can go with the default,&nbsp;<code>EzSystemsCookboo=
kBundle</code>. Just hit Enter to accept the default.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>Bundle name</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: bash; gutter: false; theme: Eclipse" style=3D"font-siz=
e:12px;">In your code, a bundle is often referenced by its name. It can be =
the concatenation of all namespace parts but it's really up to you to come =
up with a unique name (a good practice is to start with the vendor name).

Based on the namespace, we suggest EzSystemsCookbookBundle.

Bundle name [EzSystemsCookbookBundle]:</pre>=20
</div>
</div>
<p>The next question is your bundle's location. By default, the script offe=
rs to place it in the&nbsp;<code>src</code>&nbsp;folder. This is perfectly =
acceptable unless you have a good reason to place it somewhere else. Just h=
it Enter to accept the default.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>Bundle directory</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: plain; gutter: false; theme: Eclipse" style=3D"font-si=
ze:12px;">The bundle can be generated anywhere. The suggested default direc=
tory uses the standard conventions.


Target directory [/path/to/exponential5/src]:</pre>=20
</div>
</div>
<p>Next, you need to choose the generated configuration's format, out of YA=
ML, XML, PHP or annotations. We mostly use yaml in eZ Platform, and we will=
 use it in this cookbook. Enter 'yml', and hit Enter.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>Configuration format</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: plain; gutter: false; theme: Eclipse" style=3D"font-si=
ze:12px;">Determine the format to use for the generated configuration.     =
                                                                           =
                                       =20

Configuration format (yml, xml, php, or annotation) [annotation]: yml</pre>=
=20
</div>
</div>
<p>The last choice is to generate code snippets demonstrating the Symfony d=
irectory structure. If you're learning Symfony, it is a good idea to accept=
, as it will create a controller, yaml files, etc.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>Generate snippets &amp; directory structure</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: plain; gutter: false; theme: Eclipse" style=3D"font-si=
ze:12px;">To help you get started faster, the command can generate some cod=
e snippets for you.

Do you want to generate the whole directory structure [no]? yes</pre>=20
</div>
</div>
<p>The generator will then summarize the previous choices, and ask for conf=
irmation. Hit Enter to confirm.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>Summary and confirmation</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: plain; gutter: false; theme: Eclipse" style=3D"font-si=
ze:12px;">You are going to generate a "EzSystems\Bundle\CookbookBundle\EzSy=
stemsCookbookBundle" bundle in "/path/to/exponential5/src/" using the "yml" f=
ormat.

Do you confirm generation [yes]? yes</pre>=20
</div>
</div>
<p>The wizard will generate the bundle, check autoloading, and ask about th=
e activation of your bundle. Hit Enter in the answer to both questions to h=
ave your bundle automatically added to your Kernel (<code>app/AppKernel.php=
</code>) and routes from your bundle added to the existing routes (<code>ap=
p/config/routing.yml</code>).</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>Activation and generation</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">  Bundle generation

Generating the bundle code: OK
Checking that the bundle is autoloaded: OK
Confirm automatic update of your Kernel [yes]?
Enabling the bundle inside the Kernel: OK
Confirm automatic update of the Routing [yes]?
Importing the bundle routing resource: OK

  You can now start using the generated code!
&nbsp;</pre>=20
</div>
</div>
<p>Your bundle should be generated and activated. Let's now see how you can=
 interact with the Public API by creating a command line script, and a cust=
om controller route and action.</p>
<h3 id=3D"id-1.Gettingstarted-Creatingacommandlinescriptinyourbundle">Creat=
ing a command line script in your bundle</h3>
<p>Writing a command line script with Symfony 2 is&nbsp;<em>very</em>&nbsp;=
easy. The framework and its bundles ship with a few scripts. They are all s=
tarted using&nbsp;<code>php app/console &lt;command&gt;</code>. You can get=
 the complete list of existing command line scripts by executing&nbsp;<code=
>php app/console list</code>&nbsp;from the eZ Platform root.</p>
<p>In this chapter, we will create a new command, identified as&nbsp;<code>=
exponential:cookbook:hello</code>, that takes an optional name argument, and =
greets that name. To do so, we need one thing: a class with a name ending w=
ith "Command" that extends&nbsp;<code>Symfony\Component\Console\Command\Com=
mand</code>. Note that in our case, we use&nbsp;<code>ContainerAwareCommand=
</code>&nbsp;instead of&nbsp;<code>Command</code>, since we need the depend=
ency injection container to interact with the Public API.&nbsp;In your bund=
le's directory (<code>src/EzSystems/CookbookBundle</code>), create a new di=
rectory named&nbsp;<code>Command</code>, and in this directory, a new file =
named&nbsp;<code>HelloCommand.php</code>.</p>
<p>Add this code to the file:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>HelloCommand.php</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">&lt;?php
namespace EzSystems\CookBookBundle\Command;

use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Input\InputArgument;

class HelloCommand extends \Symfony\Bundle\FrameworkBundle\Command\Containe=
rAwareCommand
{
    /**
     * Configures the command
     */
    protected function configure()
    {
    }

    /**
     * Executes the command
     * @param InputInterface $input
     * @param OutputInterface $output
     */
    protected function execute( InputInterface $input, OutputInterface $out=
put )
    {
    }
}
</pre>=20
</div>
</div>
<p>This is the skeleton for a command line script.</p>
<p>One class with a name ending with "Command" (<code>HelloCommand</code>),=
 extends&nbsp;<code>Symfony\Bundle\FrameworkBundle\Command\Command</code>, =
and is part of our bundle's Command namespace. It has two methods:&nbsp;<co=
de>configure()</code>, and&nbsp;<code>execute()</code>. We also import seve=
ral classes &amp; interfaces with the use keyword. The first two,&nbsp;<cod=
e>InputInterface</code>&nbsp;and&nbsp;<code>OutputInterface</code>&nbsp;are=
 used to 'typehint' the objects that will allow us to provide input &amp; o=
utput management in our script.</p>
<p><code>Configure</code> will be used to set your command's name, as well =
as its options and arguments. <code>Execute</code> will contain the actual =
implementation of your command. Let's start by creating the&nbsp;<code>conf=
igure()</code>&nbsp;method.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>TestCommand::configure()</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">protected function configure()
{
    $this-&gt;setName( 'exponential:cookbook:hello' );
    $this-&gt;setDefinition(
        array(
            new InputArgument( 'name', InputArgument::OPTIONAL, 'An argumen=
t' )
        )
    );
}
</pre>=20
</div>
</div>
<p>First, we use <code>setName()</code> to set our command's name to "<code=
>exponential:cookbook:hello</code>". We then use&nbsp;<code>setDefinition()</=
code>&nbsp;to add an argument, named&nbsp;<code>name</code>, to our command=
.</p>
<p>You can read more about argument definitions and further options in the&=
nbsp;<a href=3D"http://symfony.com/doc/2.0/components/console/introduction.=
html" class=3D"external-link" rel=3D"nofollow">Symfony 2 Console documentat=
ion</a>.&nbsp;Once this is done, if you run&nbsp;<code>php app/console list=
</code>, you should see&nbsp;<code>exponential:cookbook:hello</code>&nbsp;lis=
ted in the available commands. If you run it, it will however still do noth=
ing.</p>
<p>Let's just add something very simple to our <code>execute()</code> metho=
d so that our command actually does something.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>TestCommand::execute()</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">protected function execute( InputInterface $input, OutputInterface =
$output )
{
    // fetch the input argument
    if ( !$name =3D $input-&gt;getArgument( 'name' ) )
    {
        $name =3D "World";
    }
    $output-&gt;writeln( "Hello $name" );
}
</pre>=20
</div>
</div>
<p>You can now run the command from the eZ Platform root.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>Hello world</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: bash; gutter: false; theme: Eclipse" style=3D"font-siz=
e:12px;">$ php app/console exponential:cookbook:hello world
Hello world</pre>=20
</div>
</div>
<h3 id=3D"id-1.Gettingstarted-Creatingacustomroutewithacontrolleraction">Cr=
eating a custom route with a controller action</h3>
<p>In this short chapter, we will see how to create a new route that will c=
atch a custom URL and execute a controller action. We want to create a new =
route, <code>/cookbook/test</code>, that displays a simple 'Hello world' me=
ssage. This tutorial is a simplified version of the official one that can b=
e found on&nbsp;<a href=3D"http://symfony.com/doc/current/book/controller.h=
tml" class=3D"external-link" rel=3D"nofollow">http://symfony.com/doc/curren=
t/book/controller.html</a>.</p>
<p>During our bundle's generation, we have chosen to generate the bundle wi=
th default code snippets. Fortunately, almost everything we need is part of=
 those snippets. We just need to do some editing, in particular in two loca=
tions:&nbsp;<code>src/EzSystems/Resources/config/routing.yml</code>&nbsp;an=
d&nbsp;<code>src/EzSystems/CookbookBundle/Controllers/DefaultController.php=
</code>. The first one will be used to configure our route (<code>/cookbook=
/test</code>) as well as the controller action the route should execute, wh=
ile the latter will contain the actual action's code.</p>
<h4 id=3D"id-1.Gettingstarted-routing.yml">routing.yml</h4>
<p>This is the file where we define our action's URL matching. The generate=
d file contains this YAML block:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>Generated routing.yml</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">ez_systems_cookbook_homepage:
    path:     /hello/{name}
    defaults: { _controller: EzSystemsCookbookBundle:Default:index }</pre>=
=20
</div>
</div>
<p>We can safely remove this default code, and replace it with this:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>Edited routing.yml</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">ezsystems_cookbook_hello:
    path:     /cookbook/{name}
    defaults: { _controller: EzSystemsCookbookBundle:Default:hello }</pre>=
=20
</div>
</div>
<p>We define a route that matches the URI /cookbook/* and executes the acti=
on <code>hello</code> in the Default controller of our bundle. The next ste=
p is to create this method in the controller.</p>
<h4 id=3D"id-1.Gettingstarted-DefaultController.php">DefaultController.php<=
/h4>
<p>This controller was generated by the bundle generator. It contains one m=
ethod,&nbsp;<code>helloAction()</code>, that matched the YAML configuration=
 we have changed in the previous part. Let's just rename the&nbsp;<code>ind=
exAction()</code>&nbsp;method so that we end up with this code.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>DefaultController::helloAction()</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">public function helloAction( $name )
{
    $response =3D new \Symfony\Component\HttpFoundation\Response;
    $response-&gt;setContent( "Hello $name" );
    return $response;
}</pre>=20
</div>
</div>
<p>We won't go into details about controllers in this cookbook, but let's w=
alk through the code a bit.&nbsp;This method receives the parameter defined=
 in&nbsp;<code>routing.yml</code>. It is called "name" in the route definit=
ion, and must be called $name in the matching action. Since the action is n=
amed "hello" in&nbsp;<code>routing.yml</code>, the expected method name is&=
nbsp;<code>helloAction</code>.</p>
<p>Controller actions&nbsp;<strong>must</strong>&nbsp;return a Response obj=
ect that will contain the response's content, the headers, and various opti=
onal properties that affect the action's behavior. In our case, we simply s=
et the content, using&nbsp;<code>setContent()</code>, to "Hello $name". Go =
to&nbsp;http://ezplatform/cookbook/hello/YourName, and you should get "Hell=
o YourName".</p>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<p class=3D"title">The custom EzPublishCoreBundle Controller</p>
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>For convenience, a custom controller is available at <a href=3D"http://a=
pidoc.ez.no/sami/trunk/NS/html/eZ/Bundle/EzPublishCoreBundle/Controller.htm=
l" class=3D"external-link" rel=3D"nofollow">eZ\Bundle\EzPublishCoreBundle\C=
ontroller</a>. It gives you with a few commodity methods:</p>
<ul>
<li><code>getRepository()</code> <br>Returns the Public API repository that=
 gives you access to the various services through <code>getContentService()=
</code>, <code>getLocationService()</code> and so on;&nbsp;</li>
<li><code>getLegacyKernel()</code> <br>Returns&nbsp;an instance of the <a h=
ref=3D"http://apidoc.ez.no/doxygen/trunk/NS/html/classeZ_1_1Publish_1_1Core=
_1_1MVC_1_1Legacy_1_1Kernel.html" class=3D"external-link" rel=3D"nofollow">=
eZ\Publish\Core\MVC\Legacy\Kernel</a> that you can use to interact with the=
 Legacy eZ Platform kernel</li>
<li><code>getConfigResolver()</code> <br>Returns the <a href=3D"http://apid=
oc.ez.no/doxygen/trunk/NS/html/classeZ_1_1Bundle_1_1EzPublishCoreBundle_1_1=
DependencyInjection_1_1Configuration_1_1ConfigResolver.html" class=3D"exter=
nal-link" rel=3D"nofollow">ConfigResolver</a> that gives you access to conf=
iguration data.</li>
</ul>
<p>You are encouraged to use it for your custom controllers that interact w=
ith eZ Platform.</p>
</div>
</div>
<p>&nbsp;</p>
<p>With both command line scripts and HTTP routes, you have the basics you =
need to start writing Public API code.</p>
    </div>
</body>
</html>
------=_Part_3019_1855719574.1485851657071--
