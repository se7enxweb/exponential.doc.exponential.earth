Message-ID: <190981748.3024.1485851671111.JavaMail.confluence@ip-10-127-227-164>
Subject: Exported From Confluence
MIME-Version: 1.0
Content-Type: multipart/related; 
	boundary="----=_Part_3023_1919815624.1485851671111"

------=_Part_3023_1919815624.1485851671111
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Content-Location: file:///C:/exported.html

<html xmlns:o=3D'urn:schemas-microsoft-com:office:office'
      xmlns:w=3D'urn:schemas-microsoft-com:office:word'
      xmlns:v=3D'urn:schemas-microsoft-com:vml'
      xmlns=3D'urn:w3-org-ns:HTML'>
<head>
    <meta http-equiv=3D"Content-Type" content=3D"text/html; charset=3Dutf-8=
">
    <title>3. Managing Content</title>
    <!--[if gte mso 9]>
    <xml>
        <o:OfficeDocumentSettings>
            <o:TargetScreenSize>1024x640</o:TargetScreenSize>
            <o:PixelsPerInch>72</o:PixelsPerInch>
            <o:AllowPNG/>
        </o:OfficeDocumentSettings>
        <w:WordDocument>
            <w:View>Print</w:View>
            <w:Zoom>90</w:Zoom>
            <w:DoNotOptimizeForBrowser/>
        </w:WordDocument>
    </xml>
    <![endif]-->
    <style>
                <!--
        @page Section1 {
            size: 8.5in 11.0in;
            margin: 1.0in;
            mso-header-margin: .5in;
            mso-footer-margin: .5in;
            mso-paper-source: 0;
        }

        td {
            page-break-inside: avoid;
        }

        tr {
            page-break-after: avoid;
        }

        div.Section1 {
            page: Section1;
        }

        /* Confluence print stylesheet. Common to all themes for print medi=
a */
/* Full of !important until we improve batching for print CSS */

@media print {
    #main {
        padding-bottom: 1em !important; /* The default padding of 6em is to=
o much for printouts */
    }

    body {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        font-size: 10pt;
        line-height: 1.2;
    }

    body, #full-height-container, #main, #page, #content, .has-personal-sid=
ebar #content {
        background: #fff !important;
        color: #000 !important;
        border: 0 !important;
        width: 100% !important;
        height: auto !important;
        min-height: auto !important;
        margin: 0 !important;
        padding: 0 !important;
        display: block !important;
    }

    a, a:link, a:visited, a:focus, a:hover, a:active {
        color: #000;
    }

    #content h1,
    #content h2,
    #content h3,
    #content h4,
    #content h5,
    #content h6 {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        page-break-after: avoid;
    }

    pre {
        font-family: Monaco, "Courier New", monospace;
    }

    #header,
    .aui-header-inner,
    #navigation,
    #sidebar,
    .sidebar,
    #personal-info-sidebar,
    .ia-fixed-sidebar,
    .page-actions,
    .navmenu,
    .ajs-menu-bar,
    .noprint,
    .inline-control-link,
    .inline-control-link a,
    a.show-labels-editor,
    .global-comment-actions,
    .comment-actions,
    .quick-comment-container,
    #addcomment {
        display: none !important;
    }

    .comment .date::before {
        content: none !important; /* remove middot for print view */
    }

    h1.pagetitle img {
        height: auto;
        width: auto;
    }

    .print-only {
        display: block;
    }

    #footer {
        position: relative !important; /* CONF-17506 Place the footer at en=
d of the content */
        margin: 0;
        padding: 0;
        background: none;
        clear: both;
    }

    #poweredby {
        border-top: none;
        background: none;
    }

    #poweredby li.print-only {
        display: list-item;
        font-style: italic;
    }

    #poweredby li.noprint {
        display: none;
    }

    /* no width controls in print */
    .wiki-content .table-wrap,
    .wiki-content p,
    .panel .codeContent,
    .panel .codeContent pre,
    .image-wrap {
        overflow: visible !important;
    }

    /* TODO - should this work? */
    #children-section,
    #comments-section .comment,
    #comments-section .comment .comment-body,
    #comments-section .comment .comment-content,
    #comments-section .comment p {
        page-break-inside: avoid;
    }

    #page-children a {
        text-decoration: none;
    }

    /**
     hide twixies

     the specificity here is a hack because print styles
     are getting loaded before the base styles. */
    #comments-section.pageSection .section-header,
    #comments-section.pageSection .section-title,
    #children-section.pageSection .section-header,
    #children-section.pageSection .section-title,
    .children-show-hide {
        padding-left: 0;
        margin-left: 0;
    }

    .children-show-hide.icon {
        display: none;
    }

    /* personal sidebar */
    .has-personal-sidebar #content {
        margin-right: 0px;
    }

    .has-personal-sidebar #content .pageSection {
        margin-right: 0px;
    }
}
-->
    </style>
</head>
<body>
    <h1>3. Managing Content</h1>
    <div class=3D"Section1">
        <p><style type=3D"text/css">/*<![CDATA[*/
div.rbtoc1485851671042 {padding: 0px;}
div.rbtoc1485851671042 ul {list-style: disc;margin-left: 0px;}
div.rbtoc1485851671042 li {margin-left: 0px;padding-left: 0px;}

/*]]>*/</style></p>
<div class=3D"toc-macro rbtoc1485851671042">=20
<ul class=3D"toc-indentation">=20
<li><a href=3D"#id-3.ManagingContent-Identifyingtotherepositorywithaloginan=
dapassword">Identifying to the repository with a login and a password</a></=
li>=20
<li><a href=3D"#id-3.ManagingContent-Creatingcontent">Creating content</a>=
=20
<ul class=3D"toc-indentation">=20
<li><a href=3D"#id-3.ManagingContent-TheContentCreateStruct">The ContentCre=
ateStruct</a></li>=20
<li><a href=3D"#id-3.ManagingContent-Settingthefieldsvalues">Setting the fi=
elds values</a></li>=20
<li><a href=3D"#id-3.ManagingContent-SettingtheLocation">Setting the Locati=
on</a></li>=20
<li><a href=3D"#id-3.ManagingContent-Creatingandpublishing">Creating and pu=
blishing</a></li>=20
</ul> </li>=20
<li><a href=3D"#id-3.ManagingContent-UpdatingContent">Updating Content</a><=
/li>=20
<li><a href=3D"#id-3.ManagingContent-Handlingtranslations">Handling transla=
tions</a></li>=20
<li><a href=3D"#id-3.ManagingContent-CreatingContentcontaininganimage">Crea=
ting Content containing an image</a></li>=20
<li><a href=3D"#id-3.ManagingContent-CreateContentwithXMLText">Create Conte=
nt with XML Text</a></li>=20
<li><a href=3D"#id-3.ManagingContent-DeletingContent">Deleting Content</a><=
/li>=20
</ul>=20
</div>
<p></p>
<p>In the following recipes, you will see how to create Content, including =
complex fields like XmlText or Image.</p>
<h2 id=3D"id-3.ManagingContent-Identifyingtotherepositorywithaloginandapass=
word">Identifying to the repository with a login and a password</h2>
<p>As seen earlier, the Repository executes operations with a user's creden=
tials. In a web context, the currently logged-in user is automatically iden=
tified. In a command line context, you need to manually log a user in. We h=
ave already seen how to manually load and set a user using its ID. If you w=
ould like to identify a user using their username and password instead, thi=
s can be achieved in the following way:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>authentication </b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">$user =3D $userService-&gt;loadUserByCredentials( $user, $password =
);
$repository-&gt;setCurrentUser( $user );</pre>=20
</div>
</div>
<h2 id=3D"id-3.ManagingContent-Creatingcontent">Creating content</h2>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<p class=3D"title">Full code</p>
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p><a href=3D"https://github.com/ezsystems/CookbookBundle/blob/master/Comma=
nd/CreateContentCommand.php" class=3D"external-link" rel=3D"nofollow">https=
://github.com/ezsystems/CookbookBundle/blob/master/Command/CreateContentCom=
mand.php</a></p>
</div>
</div>
<p>We will now see how to create Content using the Public API. This example=
 will work with the default Folder (ID 1) Content Type from eZ Platform.</p=
>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">/** @var $repository \eZ\Publish\API\Repository\Repository */
$repository =3D $this-&gt;getContainer()-&gt;get( 'exponential.api.repository=
' );
$contentService =3D $repository-&gt;getContentService();
$locationService =3D $repository-&gt;getLocationService();
$contentTypeService =3D $repository-&gt;getContentTypeService();</pre>=20
</div>
</div>
<p>We first need the required services. In this case: <code>ContentService<=
/code>, <code>LocationService</code> and <code>ContentTypeService</code>.</=
p>
<h3 id=3D"id-3.ManagingContent-TheContentCreateStruct">The ContentCreateStr=
uct</h3>
<p>As explained in the <a href=3D"/display/TECHDOC/Public+API+basics">Publi=
c API Basics</a>, Value Objects are read only. Dedicated objects are provid=
ed for Update and Create operations: structs, like <code>ContentCreateStruc=
t</code> or <code>UpdateCreateStruct</code>. In this case, we need to use a=
 <code>ContentCreateStruct</code>.&nbsp;</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">$contentType =3D $contentTypeService-&gt;loadContentTypeByIdentifie=
r( 'article' );
$contentCreateStruct =3D $contentService-&gt;newContentCreateStruct( $conte=
ntType, 'eng-GB' );</pre>=20
</div>
</div>
<p>We first need to get the <a href=3D"http://apidoc.ez.no/sami/trunk/NS/ht=
ml/eZ/Publish/API/Repository/Values/ContentType/ContentType.html" class=3D"=
external-link" rel=3D"nofollow"> <code>ContentType</code> </a> we want to c=
reate a <code>Content</code> with. To do so, we use <a href=3D"http://apido=
c.ez.no/sami/trunk/NS/html/eZ/Publish/API/Repository/ContentTypeService.htm=
l#method_loadContentTypeByIdentifier" class=3D"external-link" rel=3D"nofoll=
ow"> <code>ContentTypeService::loadContentTypeByIdentifier()</code> </a>, w=
ith the wanted <code>ContentType</code> identifier, like 'article'. We fina=
lly get a ContentTypeCreateStruct using <a href=3D"http://apidoc.ez.no/sami=
/trunk/NS/html/eZ/Publish/API/Repository/ContentService.html#method_newCont=
entCreateStruct" class=3D"external-link" rel=3D"nofollow"> <code>ContentSer=
vice::newContentCreateStruct()</code> </a>, providing the Content Type and =
a Locale Code (eng-GB).</p>
<h3 id=3D"id-3.ManagingContent-Settingthefieldsvalues">Setting the fields v=
alues</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">$contentCreateStruct-&gt;setField( 'title', 'My title' );
$contentCreateStruct-&gt;setField( 'intro', $intro );
$contentCreateStruct-&gt;setField( 'body', $body );</pre>=20
</div>
</div>
<p>Using our create struct, we can now set the values for our Content item'=
s Fields, using the <a href=3D"http://apidoc.ez.no/sami/trunk/NS/html/eZ/Pu=
blish/API/Repository/Values/Content/ContentCreateStruct.html#method_setFiel=
d" class=3D"external-link" rel=3D"nofollow"> <code>setField()</code> </a> m=
ethod. For now, we will just set the title. <code>setField()</code> for a T=
extLine Field simply expects a string as input argument. More complex Field=
 Types, like Author or Image, expect different input values.</p>
<div class=3D"confluence-information-macro confluence-information-macro-not=
e">
<span class=3D"aui-icon aui-icon-small aui-iconfont-warning confluence-info=
rmation-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>The <code> <a href=3D"http://apidoc.ez.no/sami/trunk/NS/html/eZ/Publish/=
API/Repository/Values/Content/ContentCreateStruct.html#method_setField" cla=
ss=3D"external-link" rel=3D"nofollow">ContentCreateStruct::setField()</a> <=
/code> method can take several type of arguments.</p>
<p>In any case, whatever the Field Type is, a Value of this type can be pro=
vided. For instance, a TextLine\Value can be provided for a TextLine\Type. =
Depending on the Field Type implementation itself, more specifically on the=
 <code>fromHash()</code> method every Field Type implements, various arrays=
 can be accepted, as well as primitive types, depending on the Type.</p>
</div>
</div>
<h3 id=3D"id-3.ManagingContent-SettingtheLocation">Setting the Location</h3=
>
<p>In order to set a Location for our object, we must instantiate a <a href=
=3D"http://apidoc.ez.no/sami/trunk/NS/html/eZ/Publish/API/Repository/Values=
/Content/LocationCreateStruct.html" class=3D"external-link" rel=3D"nofollow=
"> <code>LocationCreateStruct</code> </a>. This is done with <code>Location=
Service::newLocationCreateStruct()</code>, with the new Location's parent I=
D as an argument.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">$locationCreateStruct =3D $locationService-&gt;newLocationCreateStr=
uct( 2 );</pre>=20
</div>
</div>
<h3 id=3D"id-3.ManagingContent-Creatingandpublishing">Creating and publishi=
ng</h3>
<p>To actually create our Content in the Repository, we need to use <code>C=
ontentService::createContent()</code>. This method expects a <code>ContentC=
reateStruct</code>, as well as a <code>LocationCreateStruct</code>. We have=
 created both in the previous steps.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">$draft =3D $contentService-&gt;createContent( $contentCreateStruct,=
 array( $locationCreateStruct ) );
$content =3D $contentService-&gt;publishVersion( $draft-&gt;versionInfo );<=
/pre>=20
</div>
</div>
<p>The LocationCreateStruct is provided as an array, since a Content item c=
an have multiple locations.</p>
<p><code>createContent()</code>returns a new Content Value Object, with one=
 version that has the DRAFT status. To make this Content visible, we need t=
o publish it. This is done using&nbsp;<code>ContentService::publishVersion(=
)</code>. This method expects a <code>VersionInfo</code> object as its para=
meter. In our case, we simply use the current version from <code>$draft</co=
de>, with the <code>versionInfo</code> property.</p>
<h2 id=3D"id-3.ManagingContent-UpdatingContent">Updating Content</h2>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<p class=3D"title">Full code</p>
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p><a href=3D"https://github.com/ezsystems/CookbookBundle/blob/master/Comma=
nd/UpdateContentCommand.php" class=3D"external-link" rel=3D"nofollow">https=
://github.com/ezsystems/CookbookBundle/blob/master/Command/UpdateContentCom=
mand.php</a></p>
</div>
</div>
<p>We will now see how the previously created Content can be updated.&nbsp;=
To do so, we will create a new draft for our Content, update it using a <a =
href=3D"http://apidoc.ez.no/sami/trunk/NS/html/eZ/Publish/API/Repository/Va=
lues/Content/ContentUpdateStruct.html" class=3D"external-link" rel=3D"nofol=
low"> <code>ContentUpdateStruct</code> </a>, and publish the updated Versio=
n.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">$contentInfo =3D $contentService-&gt;loadContentInfo( $contentId );
$contentDraft =3D $contentService-&gt;createContentDraft( $contentInfo );</=
pre>=20
</div>
</div>
<p>To create our draft, we need to load the Content item's ContentInfo usin=
g <code>ContentService::loadContentInfo()</code>. We can then use <code>Con=
tentService::createContentDraft()</code> to add a new Draft to our Content.=
</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">// instantiate a content update struct and set the new fields
$contentUpdateStruct =3D $contentService-&gt;newContentUpdateStruct();
$contentUpdateStruct-&gt;initialLanguageCode =3D 'eng-GB'; // set language =
for new version
$contentUpdateStruct-&gt;setField( 'title', $newTitle );
$contentUpdateStruct-&gt;setField( 'body', $newBody );</pre>=20
</div>
</div>
<p>To set the new values for this version, we request a <code>ContentUpdate=
Struct</code> from the <code>ContentService</code> using the <code>newConte=
ntUpdateStruct()</code> method. Updating the values hasn't changed: we use =
the <code>setField()</code> method.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">$contentDraft =3D $contentService-&gt;updateContent( $contentDraft-=
&gt;versionInfo, $contentUpdateStruct );
$content =3D $contentService-&gt;publishVersion( $contentDraft-&gt;versionI=
nfo );</pre>=20
</div>
</div>
<p>We can now use <code>ContentService::updateContent()</code> to apply our=
 <code>ContentUpdateStruct</code> to our draft's <code>VersionInfo</code>.&=
nbsp;Publishing is done exactly the same way as for a new content, using <c=
ode>ContentService::publishVersion()</code>.</p>
<h2 id=3D"id-3.ManagingContent-Handlingtranslations">Handling translations<=
/h2>
<p>In the two previous examples, you have seen that we set the ContentUpdat=
eStruct's <code>initialLanguageCode</code> property. To translate an object=
 to a new language, set the locale to a new one.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>translating</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">$contentUpdateStruct-&gt;initialLanguageCode =3D 'ger-DE';
$contentUpdateStruct-&gt;setField( 'title', $newtitle );
$contentUpdateStruct-&gt;setField( 'body', $newbody );</pre>=20
</div>
</div>
<p>It is possible to create or update content in multiple languages at once=
. There is one restriction: only one language can be set a version's langua=
ge. This language is the one that will get a flag in the back office. Howev=
er, you can set values in other languages for your attributes, using the <c=
ode>setField</code> method's third argument.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>update multiple languages</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">// set one language for new version
$contentUpdateStruct-&gt;initialLanguageCode =3D 'fre-FR';

$contentUpdateStruct-&gt;setField( 'title', $newgermantitle, 'ger-DE' );
$contentUpdateStruct-&gt;setField( 'body', $newgermanbody, 'ger-DE' );

$contentUpdateStruct-&gt;setField( 'title', $newfrenchtitle );
$contentUpdateStruct-&gt;setField( 'body', $newfrenchbody );
</pre>=20
</div>
</div>
<p>Since we don't specify a locale for the last two fields, they are set fo=
r the <code>UpdateStruct</code>'s <code>initialLanguageCode</code>, fre-FR.=
</p>
<h2 id=3D"id-3.ManagingContent-CreatingContentcontaininganimage">Creating C=
ontent containing an image</h2>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<p class=3D"title">Full code</p>
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p><a href=3D"https://github.com/ezsystems/CookbookBundle/blob/master/Comma=
nd/CreateImageCommand.php" class=3D"external-link" rel=3D"nofollow">https:/=
/github.com/ezsystems/CookbookBundle/blob/master/Command/CreateImageCommand=
.php</a></p>
</div>
</div>
<p>As explained above, the <code>setField()</code> method can accept variou=
s values: an instance of the Field Type's Value class, a primitive type, or=
 a hash. The last two depend on what the <code>Type::acceptValue()</code> m=
ethod is build up to handle. TextLine can, for instance, accept a simple st=
ring as an input value. In this example, you will see how to set an Image v=
alue.</p>
<p>We assume that we use the default image class. Creating our Content, usi=
ng the Content Type and a ContentCreateStruct, has been covered above, and =
can be found in the full code. Let's focus on how the image is provided.</p=
>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">$file =3D '/path/to/image.png';

$value =3D new \eZ\Publish\Core\FieldType\Image\Value(
    array(
        'path' =3D&gt; '/path/to/image.png',
        'fileSize' =3D&gt; filesize( '/path/to/image.png' ),
        'fileName' =3D&gt; basename( 'image.png' ),
        'alternativeText' =3D&gt; 'My image'
    )
);
$contentCreateStruct-&gt;setField( 'image', $value );</pre>=20
</div>
</div>
<p>This time, we create our image by directly providing an <a href=3D"http:=
//apidoc.ez.no/sami/trunk/NS/html/eZ/Publish/Core/FieldType/Image/Value.htm=
l" class=3D"external-link" rel=3D"nofollow"> <code>Image\Value</code> </a> =
object. The values are directly provided to the constructor using a hash wi=
th predetermined keys that depend on each Type. In this case: the path wher=
e the image can be found, its size, the file name, and an alternative text.=
</p>
<p>Images also implement a static <a href=3D"http://apidoc.ez.no/sami/trunk=
/NS/html/eZ/Publish/Core/FieldType/Image/Value.html#method_fromString" clas=
s=3D"external-link" rel=3D"nofollow"> <code>fromString()</code> </a> method=
 that will, given a path to an image, return an <code>Image\Value</code> ob=
ject.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">$value =3D \eZ\Publish\Core\FieldType\Image\Value::fromString( '/pa=
th/to/image.png' );</pre>=20
</div>
</div>
<p>But as said before, whatever you provide <code>setField()</code> with is=
 sent to the <code>acceptValue()</code> method. This method really is the e=
ntry point to the input formats a Field Type accepts. In this case, you cou=
ld have provided setField with either a hash, similar to the one we provide=
d the Image\Value constructor with, or the path to your image, as a string.=
</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">$contentCreateStruct-&gt;setField( 'image', '/path/to/image.png' );
&nbsp;
// or
&nbsp;
$contentCreateStruct-&gt;setField( 'image', array(
    'path' =3D&gt; '/path/to/image.png',
    'fileSize' =3D&gt; filesize( '/path/to/image.png' ),
    'fileName' =3D&gt; basename( 'image.png' ),
    'alternativeText' =3D&gt; 'My image'
);</pre>=20
</div>
</div>
<h2 id=3D"id-3.ManagingContent-CreateContentwithXMLText">Create Content wit=
h XML Text</h2>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<p class=3D"title">Full code</p>
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p><a href=3D"https://github.com/ezsystems/CookbookBundle/blob/master/Comma=
nd/CreateXMLContentCommand.php" class=3D"external-link" rel=3D"nofollow">ht=
tps://github.com/ezsystems/CookbookBundle/blob/master/Command/CreateXMLCont=
entCommand.php</a></p>
</div>
</div>
<p>Another very commonly used Field Type is the rich text one, <code>XmlTex=
t</code>.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>working with xml text</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">$xmlText =3D &lt;&lt;&lt; EOX
&lt;?xml version=3D'1.0' encoding=3D'utf-8'?&gt;
&lt;section&gt;
&lt;paragraph&gt;This is a &lt;strong&gt;image test&lt;/strong&gt;&lt;/para=
graph&gt;
&lt;paragraph&gt;&lt;embed view=3D'embed' size=3D'medium' object_id=3D'$ima=
geId'/&gt;&lt;/paragraph&gt;
&lt;/section&gt;
EOX;
$contentCreateStruct-&gt;setField( 'body', $xmlText );</pre>=20
</div>
</div>
<p>As for the last example above, we use the multiple formats accepted by <=
code>setField()</code>, and provide our XML string as is. The only accepted=
 format as of 5.0 is internal XML, the one stored in the Legacy database.</=
p>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>The XSD for the internal XML representation can be found in the kernel: =
<a href=3D"https://github.com/ezsystems/exponential-kernel/blob/master/eZ/Pub=
lish/Core/FieldType/XmlText/Input/Resources/schemas/ezxml.xsd" class=3D"ext=
ernal-link" rel=3D"nofollow">https://github.com/ezsystems/exponential-kernel/=
blob/master/eZ/Publish/Core/FieldType/XmlText/Input/Resources/schemas/ezxml=
.xsd</a>.</p>
</div>
</div>
<p>We embed an image in our XML, using the <code>&lt;embed&gt;</code> tag, =
providing an image Content ID as the <code>object_id</code> attribute.</p>
<div class=3D"confluence-information-macro confluence-information-macro-not=
e">
<p class=3D"title">Using a custom format as input</p>
<span class=3D"aui-icon aui-icon-small aui-iconfont-warning confluence-info=
rmation-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>More input formats will be added later. The API for that is actually alr=
eady available: you simply need to implement the <a href=3D"http://apidoc.e=
z.no/sami/trunk/NS/html/eZ/Publish/Core/FieldType/XmlText/Input.html" class=
=3D"external-link" rel=3D"nofollow"> <code>XmlText\Input</code> </a> interf=
ace. It contains one method, <a href=3D"http://apidoc.ez.no/sami/trunk/NS/h=
tml/eZ/Publish/Core/FieldType/XmlText/Input.html#method_getInternalRepresen=
tation" class=3D"external-link" rel=3D"nofollow"> <code>getInternalRepresen=
tation()</code> </a>, that must return an internal XML string. Create your =
own bundle, add your implementation to it, and use it in your code!</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">$input =3D new \My\XmlText\CustomInput( 'My custom format string' )=
;
$contentCreateStruct-&gt;setField( 'body', $input );</pre>=20
</div>
</div>
</div>
</div>
<h2 id=3D"id-3.ManagingContent-DeletingContent">Deleting Content</h2>
<p>&nbsp;</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">$contentService-&gt;deleteContent( $contentInfo );</pre>=20
</div>
</div>
<p><a href=3D"http://apidoc.ez.no/sami/trunk/NS/html/eZ/Publish/API/Reposit=
ory/ContentService.html#method_deleteContent" class=3D"external-link" rel=
=3D"nofollow"> <code>ContentService::deleteContent()</code> </a> method exp=
ects a <code>ContentInfo</code> as an argument. It will delete the given Co=
ntent item, all of its Locations, as well as all of the Content item's Loca=
tions' descendants and their associated Content. <strong>Use with caution!<=
/strong></p>
<p><strong><br></strong></p>
    </div>
</body>
</html>
------=_Part_3023_1919815624.1485851671111--
