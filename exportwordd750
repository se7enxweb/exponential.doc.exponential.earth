Message-ID: <1881953504.4010.1485856327905.JavaMail.confluence@ip-10-127-227-164>
Subject: Exported From Confluence
MIME-Version: 1.0
Content-Type: multipart/related; 
	boundary="----=_Part_4009_887223766.1485856327905"

------=_Part_4009_887223766.1485856327905
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Content-Location: file:///C:/exported.html

<html xmlns:o=3D'urn:schemas-microsoft-com:office:office'
      xmlns:w=3D'urn:schemas-microsoft-com:office:word'
      xmlns:v=3D'urn:schemas-microsoft-com:vml'
      xmlns=3D'urn:w3-org-ns:HTML'>
<head>
    <meta http-equiv=3D"Content-Type" content=3D"text/html; charset=3Dutf-8=
">
    <title>Context aware HTTP cache</title>
    <!--[if gte mso 9]>
    <xml>
        <o:OfficeDocumentSettings>
            <o:TargetScreenSize>1024x640</o:TargetScreenSize>
            <o:PixelsPerInch>72</o:PixelsPerInch>
            <o:AllowPNG/>
        </o:OfficeDocumentSettings>
        <w:WordDocument>
            <w:View>Print</w:View>
            <w:Zoom>90</w:Zoom>
            <w:DoNotOptimizeForBrowser/>
        </w:WordDocument>
    </xml>
    <![endif]-->
    <style>
                <!--
        @page Section1 {
            size: 8.5in 11.0in;
            margin: 1.0in;
            mso-header-margin: .5in;
            mso-footer-margin: .5in;
            mso-paper-source: 0;
        }

        td {
            page-break-inside: avoid;
        }

        tr {
            page-break-after: avoid;
        }

        div.Section1 {
            page: Section1;
        }

        /* Confluence print stylesheet. Common to all themes for print medi=
a */
/* Full of !important until we improve batching for print CSS */

@media print {
    #main {
        padding-bottom: 1em !important; /* The default padding of 6em is to=
o much for printouts */
    }

    body {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        font-size: 10pt;
        line-height: 1.2;
    }

    body, #full-height-container, #main, #page, #content, .has-personal-sid=
ebar #content {
        background: #fff !important;
        color: #000 !important;
        border: 0 !important;
        width: 100% !important;
        height: auto !important;
        min-height: auto !important;
        margin: 0 !important;
        padding: 0 !important;
        display: block !important;
    }

    a, a:link, a:visited, a:focus, a:hover, a:active {
        color: #000;
    }

    #content h1,
    #content h2,
    #content h3,
    #content h4,
    #content h5,
    #content h6 {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        page-break-after: avoid;
    }

    pre {
        font-family: Monaco, "Courier New", monospace;
    }

    #header,
    .aui-header-inner,
    #navigation,
    #sidebar,
    .sidebar,
    #personal-info-sidebar,
    .ia-fixed-sidebar,
    .page-actions,
    .navmenu,
    .ajs-menu-bar,
    .noprint,
    .inline-control-link,
    .inline-control-link a,
    a.show-labels-editor,
    .global-comment-actions,
    .comment-actions,
    .quick-comment-container,
    #addcomment {
        display: none !important;
    }

    .comment .date::before {
        content: none !important; /* remove middot for print view */
    }

    h1.pagetitle img {
        height: auto;
        width: auto;
    }

    .print-only {
        display: block;
    }

    #footer {
        position: relative !important; /* CONF-17506 Place the footer at en=
d of the content */
        margin: 0;
        padding: 0;
        background: none;
        clear: both;
    }

    #poweredby {
        border-top: none;
        background: none;
    }

    #poweredby li.print-only {
        display: list-item;
        font-style: italic;
    }

    #poweredby li.noprint {
        display: none;
    }

    /* no width controls in print */
    .wiki-content .table-wrap,
    .wiki-content p,
    .panel .codeContent,
    .panel .codeContent pre,
    .image-wrap {
        overflow: visible !important;
    }

    /* TODO - should this work? */
    #children-section,
    #comments-section .comment,
    #comments-section .comment .comment-body,
    #comments-section .comment .comment-content,
    #comments-section .comment p {
        page-break-inside: avoid;
    }

    #page-children a {
        text-decoration: none;
    }

    /**
     hide twixies

     the specificity here is a hack because print styles
     are getting loaded before the base styles. */
    #comments-section.pageSection .section-header,
    #comments-section.pageSection .section-title,
    #children-section.pageSection .section-header,
    #children-section.pageSection .section-title,
    .children-show-hide {
        padding-left: 0;
        margin-left: 0;
    }

    .children-show-hide.icon {
        display: none;
    }

    /* personal sidebar */
    .has-personal-sidebar #content {
        margin-right: 0px;
    }

    .has-personal-sidebar #content .pageSection {
        margin-right: 0px;
    }
}
-->
    </style>
</head>
<body>
    <h1>Context aware HTTP cache</h1>
    <div class=3D"Section1">
        <div class=3D"confluence-information-macro confluence-information-m=
acro-information">
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>If you are looking for 5.2/5.3 Context aware HTTP cache, see the page <a=
 href=3D"/display/EZP/Context+aware+HTTP+cache+in+eZ+Publish+5.2-5.3">Conte=
xt aware HTTP cache in Exponential 5.2-5.3</a></p>
</div>
</div>
<p><style type=3D"text/css">/*<![CDATA[*/
div.rbtoc1485856327792 {padding: 0px;}
div.rbtoc1485856327792 ul {list-style: disc;margin-left: 0px;}
div.rbtoc1485856327792 li {margin-left: 0px;padding-left: 0px;}

/*]]>*/</style></p>
<div class=3D"toc-macro rbtoc1485856327792">=20
<ul class=3D"toc-indentation">=20
<li><a href=3D"#ContextawareHTTPcache-Usecase">Use case</a></li>=20
<li><a href=3D"#ContextawareHTTPcache-Feature">Feature</a></li>=20
<li><a href=3D"#ContextawareHTTPcache-Httpcacheclear">Http cache clear</a><=
/li>=20
<li><a href=3D"#ContextawareHTTPcache-Symfonyreverseproxy">Symfony reverse =
proxy</a></li>=20
<li><a href=3D"#ContextawareHTTPcache-Varnish">Varnish</a></li>=20
<li><a href=3D"#ContextawareHTTPcache-Usercontexthash">User context hash</a=
></li>=20
<li><a href=3D"#ContextawareHTTPcache-Workflow">Workflow</a></li>=20
<li><a href=3D"#ContextawareHTTPcache-Userhashgeneration">User hash generat=
ion</a>=20
<ul class=3D"toc-indentation">=20
<li><a href=3D"#ContextawareHTTPcache-UserhashgenerationwithVarnish3">User =
hash generation with Varnish 3</a></li>=20
<li><a href=3D"#ContextawareHTTPcache-UserhashgenerationwithVarnish4">User =
hash generation with Varnish 4</a>=20
<ul class=3D"toc-indentation">=20
<li><a href=3D"#ContextawareHTTPcache-NewanonymousX-User-Hash">New anonymou=
s X-User-Hash</a></li>=20
</ul> </li>=20
<li><a href=3D"#ContextawareHTTPcache-DefaultoptionsforFOSHttpCacheBundlede=
finedineZ">Default options for FOSHttpCacheBundle defined in eZ</a></li>=20
</ul> </li>=20
<li><a href=3D"#ContextawareHTTPcache-Credits">Credits</a></li>=20
</ul>=20
</div>
<p></p>
<p>This feature is available as of&nbsp;<strong>Exponential 5.2</strong></p>
<h2 id=3D"ContextawareHTTPcache-Usecase">Use case</h2>
<p>Being based on Symfony 2, Exponential 5 uses HTTP cache from version 5.0 =
<a href=3D"/display/EZP/Context+aware+HTTP+cache">extended with content awa=
reness</a>. However this cache management is only available for anonymous u=
sers due to HTTP restrictions.</p>
<p>It is of course possible to make HTTP cache vary thanks to the&nbsp;<cod=
e>Vary</code>&nbsp;response header, but this header can only be based on on=
e of the request headers (e.g.&nbsp;<code>Accept-Encoding</code>). Thus, to=
 make the cache vary on a specific context (e.g. a hash based on a user rol=
es and limitations), this context must be present in the original request</=
p>
<h2 id=3D"ContextawareHTTPcache-Feature">Feature</h2>
<p>As the response can vary on a request header, the base solution is to ma=
ke the kernel do a sub-request in order to retrieve the user context hash (=
aka&nbsp;<strong>user hash</strong>). Once the&nbsp;<em>user hash</em>&nbsp=
;has been retrieved, it's injected in the original request in the&nbsp;<cod=
e>X-User-Hash</code>&nbsp;custom header, making it possible to&nbsp;<em>var=
y</em>&nbsp;the HTTP response on this header:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">&lt;?php
use Symfony\Component\HttpFoundation\Response;

// ...

// Inside a controller action
$response =3D new Response();
$response-&gt;setVary('X-User-Hash');</pre>=20
</div>
</div>
<p>This solution is implemented in Symfony reverse proxy (aka&nbsp;<em>Http=
Cache</em>) and is also accessible to dedicated reverse proxies like Varnis=
h.</p>
<div class=3D"confluence-information-macro confluence-information-macro-not=
e">
<span class=3D"aui-icon aui-icon-small aui-iconfont-warning confluence-info=
rmation-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>Note that sharing ESIs across SiteAccesses is not possible by design (se=
e <span class=3D"jira-issue resolved"> <a href=3D"https://jira.ez.no/browse=
/EZP-22535?src=3Dconfmacro" class=3D"jira-issue-key"><img class=3D"icon" sr=
c=3D"https://jira.ez.no/images/icons/issuetypes/bug.png">EZP-22535</a> - <s=
pan class=3D"summary">Cached ESI can not be shared across pages/siteaccesse=
s due to "pathinfo" property</span>=20
<!-- The new status lozengens support for JIRA 6.2 or later. Otherwise we u=
se the icon.--> <span class=3D"aui-lozenge aui-lozenge-subtle aui-lozenge-s=
uccess jira-macro-single-issue-export-pdf">Closed</span> </span> for techni=
cal details)</p>
</div>
</div>
<div class=3D"confluence-information-macro confluence-information-macro-tip=
">
<p class=3D"title">Vary by User</p>
<span class=3D"aui-icon aui-icon-small aui-iconfont-approve confluence-info=
rmation-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>In cases where you need to deliver content uniquely to a given user, and=
 tricks like using javascript and cookie values, hinclude, or disabling cac=
he is not an option. Then remaining option is to vary response by cookie:</=
p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">$response-&gt;setVary('Cookie');</pre>=20
</div>
</div>
<p>Unfortunately this is not optimal as it will by default vary by all cook=
ies, including those set by add trackers, analytics tools, recommendation s=
ervices, ... However as long as <em>your</em> application backend does not =
need these cookies, you can solve this by stripping everything but session =
cookie. Example for Varnish can be found in the default VCL examples in par=
t dealing with User Hash, for single server setup this can easily be accomp=
lished in Apache / Nginx as well.</p>
</div>
</div>
<p>&nbsp;</p>
<h2 id=3D"ContextawareHTTPcache-Httpcacheclear">Http cache clear</h2>
<p><span class=3D"status-macro aui-lozenge aui-lozenge-current">5.4</span>&=
nbsp;/&nbsp;<span class=3D"status-macro aui-lozenge aui-lozenge-current">20=
14.11</span></p>
<p>As of v5.4 / v2014.11, usage of <a href=3D"http://foshttpcachebundle.rea=
dthedocs.org/" class=3D"external-link" rel=3D"nofollow">FOSHttpCacheBundle<=
/a> has been introduced, impacting the following features:</p>
<ul class=3D"task-list">
<li>Http cache purge</li>
<li>User context hash</li>
</ul>
<p>Varnish proxy client from FOSHttpCache lib is now used for clearing eZ H=
ttp cache, even when using Symfony HttpCache. A single <code>BAN</code> req=
uest is sent to registered purge servers, containing a <code>X-Location-Id<=
/code> header. This header contains all Location IDs for which objects in c=
ache need to be cleared.</p>
<h2 id=3D"ContextawareHTTPcache-Symfonyreverseproxy">Symfony reverse proxy<=
/h2>
<p>Symfony reverse proxy (aka HttpCache) is supported out of the box, all y=
ou have to do is to activate it.</p>
<h2 id=3D"ContextawareHTTPcache-Varnish">Varnish</h2>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
Please refer to&nbsp;
<a href=3D"/pages/viewpage.action?pageId=3D25985773">Using Varnish with eZ =
Publish Platform 5.4</a>
</div>
</div>
<h2 id=3D"ContextawareHTTPcache-Usercontexthash">User context hash</h2>
<p><a href=3D"http://foshttpcachebundle.readthedocs.org/en/latest/features/=
user-context.html" class=3D"external-link" rel=3D"nofollow">FOSHttpCacheBun=
dle <em>User Context feature</em> is used</a> is activated by default.</p>
<p>As the response can vary on a request header, the base solution is to ma=
ke the kernel do a sub-request in order to retrieve the context (aka <stron=
g>user context hash</strong>). Once the <em>user hash</em> has been retriev=
ed, it's injected in the original request in the <code>X-User-Hash</code> h=
eader, making it possible to <em>vary</em> the HTTP response on this header=
:</p>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
Name of the=20
<a href=3D"http://foshttpcachebundle.readthedocs.org/en/latest/reference/co=
nfiguration/user-context.html" class=3D"external-link" rel=3D"nofollow">use=
r hash header is configurable in FOSHttpCacheBundle</a>. By default eZ Publ=
ish sets it to=20
<code>**X-User-Hash**</code>.
</div>
</div>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">&lt;?php=20
use Symfony\Component\HttpFoundation\Response;
=20
// ...
=20
// Inside a controller action
$response =3D new Response();
$response-&gt;setVary( 'X-User-Hash' );

</pre>=20
</div>
</div>
<p>&nbsp;</p>
<p>This solution is <a href=3D"http://foshttpcachebundle.readthedocs.org/en=
/latest/features/symfony-http-cache.html" class=3D"external-link" rel=3D"no=
follow">implemented in Symfony reverse proxy (aka <em>HttpCache</em>)</a> a=
nd is also accessible to <a href=3D"http://foshttpcache.readthedocs.org/en/=
latest/varnish-configuration.html" class=3D"external-link" rel=3D"nofollow"=
>dedicated reverse proxies like Varnish</a>.</p>
<h2 id=3D"ContextawareHTTPcache-Workflow">Workflow</h2>
<div class=3D"confluence-information-macro confluence-information-macro-tip=
">
<span class=3D"aui-icon aui-icon-small aui-iconfont-approve confluence-info=
rmation-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
Please refer to=20
<a href=3D"http://foshttpcachebundle.readthedocs.org/en/latest/features/use=
r-context.html#how-it-works" class=3D"external-link" rel=3D"nofollow">FOSHt=
tpCacheBundle documentation on how user context feature works</a>.
</div>
</div>
<h2 id=3D"ContextawareHTTPcache-Userhashgeneration">User hash generation</h=
2>
<div class=3D"confluence-information-macro confluence-information-macro-tip=
">
<span class=3D"aui-icon aui-icon-small aui-iconfont-approve confluence-info=
rmation-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
Please refer to=20
<a href=3D"http://foshttpcachebundle.readthedocs.org/en/latest/features/use=
r-context.html#generating-hashes" class=3D"external-link" rel=3D"nofollow">=
FOSHttpCacheBundle documentation on how user hashes are being generated</a>=
.
</div>
</div>
<p>Exponential already interferes in the hash generation process, by adding =
current user permissions and limitations. One can also interfere in this pr=
ocess by <a href=3D"http://foshttpcachebundle.readthedocs.org/en/latest/ref=
erence/configuration/user-context.html#custom-context-providers" class=3D"e=
xternal-link" rel=3D"nofollow">implementing custom context provider(s)</a>.=
</p>
<h3 id=3D"ContextawareHTTPcache-UserhashgenerationwithVarnish3">User hash g=
eneration with Varnish 3</h3>
<p>Described behavior comes out of the box with Symfony reverse proxy, but =
it's of course possible ot use Varnish to achieve the same.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: bash; gutter: false; theme: Eclipse" style=3D"font-siz=
e:12px;"># Varnish 3 style for Exponential 5.4 / 2014.11
# Our Backend - We assume that Exponential Web server listen on port 80 on t=
he same machine.
backend exponential {
    .host =3D "127.0.0.1";
    .port =3D "80";
}

# Called at the beginning of a request, after the complete request has been=
 received
sub vcl_recv {

    # Set the backend
    set req.backend =3D exponential;

    # ...

    # Retrieve client user hash and add it to the forwarded request.
    call ez_user_hash;

    # If it passes all these tests, do a lookup anyway;
    return (lookup);
}

# Sub-routine to get client user hash, for context-aware HTTP cache.
# Don't forget to correctly set the backend host for the Curl sub-request.
sub ez_user_hash {

    # Prevent tampering attacks on the hash mechanism
    if (req.restarts =3D=3D 0
        &amp;&amp; (req.http.accept ~ "application/vnd.fos.user-context-has=
h"
            || req.http.x-user-context-hash
        )
    ) {
        error 400;
    }

    if (req.restarts =3D=3D 0 &amp;&amp; (req.request =3D=3D "GET" || req.r=
equest =3D=3D "HEAD")) {
        # Get User (Context) hash, for varying cache by what user has acces=
s to.
        # https://doc.ez.no/display/EZP/Context+aware+HTTP+cach

        # Anonymous user w/o session =3D&gt; Use hardcoded anonymous hash t=
o avoid backend lookup for hash
        if (req.http.Cookie !~ "eZSESSID" &amp;&amp; !req.http.authorizatio=
n) {
            # You may update this hash with the actual one for anonymous us=
er
            # to get a better cache hit ratio across anonymous users.
            # Note: Then needs update every time anonymous user role assign=
ments change.
            set req.http.X-User-Hash =3D "38015b703d82206ebc01d17a39c727e5"=
;
        }
        # Pre-authenticate request to get shared cache, even when authentic=
ated
        else {
            set req.http.x-fos-original-url    =3D req.url;
            set req.http.x-fos-original-accept =3D req.http.accept;
            set req.http.x-fos-original-cookie =3D req.http.cookie;
            # Clean up cookie for the hash request to only keep session coo=
kie, as hash cache will vary on cookie.
            set req.http.cookie =3D ";" + req.http.cookie;
            set req.http.cookie =3D regsuball(req.http.cookie, "; +", ";");
            set req.http.cookie =3D regsuball(req.http.cookie, ";(eZSESSID[=
^=3D]*)=3D", "; \1=3D");
            set req.http.cookie =3D regsuball(req.http.cookie, ";[^ ][^;]*"=
, "");
            set req.http.cookie =3D regsuball(req.http.cookie, "^[; ]+|[; ]=
+$", "");

            set req.http.accept =3D "application/vnd.fos.user-context-hash"=
;
            set req.url =3D "/_fos_user_context_hash";

            # Force the lookup, the backend must tell not to cache or vary =
on all
            # headers that are used to build the hash.

            return (lookup);
        }
    }

    # Rebuild the original request which now has the hash.
    if (req.restarts &gt; 0
        &amp;&amp; req.http.accept =3D=3D "application/vnd.fos.user-context=
-hash"
    ) {
        set req.url         =3D req.http.x-fos-original-url;
        set req.http.accept =3D req.http.x-fos-original-accept;
        set req.http.cookie =3D req.http.x-fos-original-cookie;

        unset req.http.x-fos-original-url;
        unset req.http.x-fos-original-accept;
        unset req.http.x-fos-original-cookie;

        # Force the lookup, the backend must tell not to cache or vary on t=
he
        # user hash to properly separate cached data.

        return (lookup);
    }
}

sub vcl_fetch {

    # ...

    if (req.restarts =3D=3D 0
        &amp;&amp; req.http.accept ~ "application/vnd.fos.user-context-hash=
"
        &amp;&amp; beresp.status &gt;=3D 500
    ) {
        error 503 "Hash error";
    }
}

sub vcl_deliver {
    # On receiving the hash response, copy the hash header to the original
    # request and restart.
    if (req.restarts =3D=3D 0
        &amp;&amp; resp.http.content-type ~ "application/vnd.fos.user-conte=
xt-hash"
        &amp;&amp; resp.status =3D=3D 200
    ) {
        set req.http.x-user-hash =3D resp.http.x-user-hash;

        return (restart);
    }

    # If we get here, this is a real response that gets sent to the client.

    # Remove the vary on context user hash, this is nothing public. Keep al=
l
    # other vary headers.
    set resp.http.Vary =3D regsub(resp.http.Vary, "(?i),? *x-user-hash *", =
"");
    set resp.http.Vary =3D regsub(resp.http.Vary, "^, *", "");
    if (resp.http.Vary =3D=3D "") {
        remove resp.http.Vary;
    }

    # Sanity check to prevent ever exposing the hash to a client.
    remove resp.http.x-user-hash;
}
</pre>=20
</div>
</div>
<h3 id=3D"ContextawareHTTPcache-UserhashgenerationwithVarnish4">User hash g=
eneration with Varnish 4</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">// Varnish 4 style - eZ 5.4+ / 2014.09+
// Complete VCL example

vcl 4.0;

// Our Backend - Assuming that web server is listening on port 80
// Replace the host to fit your setup
backend exponential {
    .host =3D "127.0.0.1";
    .port =3D "80";
}

// Called at the beginning of a request, after the complete request has bee=
n received
sub vcl_recv {

    // Set the backend
    set req.backend_hint =3D exponential;

    // ...

    // Retrieve client user hash and add it to the forwarded request.
    call ez_user_hash;

    // If it passes all these tests, do a lookup anyway.
    return (hash);
}
&nbsp;
// Called when the requested object has been retrieved from the backend
sub vcl_backend_response {
    if (bereq.http.accept ~ "application/vnd.fos.user-context-hash"
        &amp;&amp; beresp.status &gt;=3D 500
    ) {
        return (abandon);
    }
   &nbsp;
    // ...
}

// Sub-routine to get client user hash, for context-aware HTTP cache.
sub ez_user_hash {

    // Prevent tampering attacks on the hash mechanism
    if (req.restarts =3D=3D 0
        &amp;&amp; (req.http.accept ~ "application/vnd.fos.user-context-has=
h"
            || req.http.x-user-hash
        )
    ) {
        return (synth(400));
    }

    if (req.restarts =3D=3D 0 &amp;&amp; (req.method =3D=3D "GET" || req.me=
thod =3D=3D "HEAD")) {
        // Get User (Context) hash, for varying cache by what user has acce=
ss to.
        // https://doc.ez.no/display/EZP/Context+aware+HTTP+cache

        // Anonymous user w/o session =3D&gt; Use hardcoded anonymous hash =
to avoid backend lookup for hash
        if (req.http.Cookie !~ "eZSESSID" &amp;&amp; !req.http.authorizatio=
n) {
            // You may update this hash with the actual one for anonymous u=
ser
            // to get a better cache hit ratio across anonymous users.
            // Note: You should then update it every time anonymous user ri=
ghts change.
            set req.http.X-User-Hash =3D "38015b703d82206ebc01d17a39c727e5"=
;
        }
        // Pre-authenticate request to get shared cache, even when authenti=
cated
        else {
            set req.http.x-fos-original-url    =3D req.url;
            set req.http.x-fos-original-accept =3D req.http.accept;
            set req.http.x-fos-original-cookie =3D req.http.cookie;
            // Clean up cookie for the hash request to only keep session co=
okie, as hash cache will vary on cookie.
            set req.http.cookie =3D ";" + req.http.cookie;
            set req.http.cookie =3D regsuball(req.http.cookie, "; +", ";");
            set req.http.cookie =3D regsuball(req.http.cookie, ";(eZSESSID[=
^=3D]*)=3D", "; \1=3D");
            set req.http.cookie =3D regsuball(req.http.cookie, ";[^ ][^;]*"=
, "");
            set req.http.cookie =3D regsuball(req.http.cookie, "^[; ]+|[; ]=
+$", "");
            set req.http.accept =3D "application/vnd.fos.user-context-hash"=
;
            set req.url =3D "/_fos_user_context_hash";

            // Force the lookup, the backend must tell how to cache/vary re=
sponse containing the user hash
            return (hash);
        }
    }

    // Rebuild the original request which now has the hash.
    if (req.restarts &gt; 0
        &amp;&amp; req.http.accept =3D=3D "application/vnd.fos.user-context=
-hash"
    ) {
        set req.url         =3D req.http.x-fos-original-url;
        set req.http.accept =3D req.http.x-fos-original-accept;
        set req.http.cookie =3D req.http.x-fos-original-cookie;
        unset req.http.x-fos-original-url;
        unset req.http.x-fos-original-accept;
        unset req.http.x-fos-original-cookie;

        // Force the lookup, the backend must tell not to cache or vary on =
the
        // user hash to properly separate cached data.

        return (hash);
    }
}

sub vcl_deliver {
    // On receiving the hash response, copy the hash header to the original
    // request and restart.
    if (req.restarts =3D=3D 0
        &amp;&amp; resp.http.content-type ~ "application/vnd.fos.user-conte=
xt-hash"
    ) {
        set req.http.x-user-hash =3D resp.http.x-user-hash;
        return (restart);
    }

    // If we get here, this is a real response that gets sent to the client=
.
    // Remove the vary on context user hash, this is nothing public. Keep a=
ll
    // other vary headers.
    set resp.http.Vary =3D regsub(resp.http.Vary, "(?i),? *x-user-hash *", =
"");
    set resp.http.Vary =3D regsub(resp.http.Vary, "^, *", "");
    if (resp.http.Vary =3D=3D "") {
        unset resp.http.Vary;
    }

    // Sanity check to prevent ever exposing the hash to a client.
    unset resp.http.x-user-hash;
    if (client.ip ~ debuggers) {
        if (obj.hits &gt; 0) {
            set resp.http.X-Cache =3D "HIT";
            set resp.http.X-Cache-Hits =3D obj.hits;
        } else {
            set resp.http.X-Cache =3D "MISS";
        }
    }
}</pre>=20
</div>
</div>
<h4 id=3D"ContextawareHTTPcache-NewanonymousX-User-Hash">New anonymous X-Us=
er-Hash</h4>
<p>The anonymous X-User-Hash is generated based on the <em>anonymous user</=
em>, <em>group</em> and <em>role</em>. The <code>38015b703d82206ebc01d17a39=
c727e5</code> hash that is provided in the code above will work only when t=
hese three variables are left unchanged. Once you change the default permis=
sions and settings, the X-User-Hash will change and Varnish won't be able t=
o effectively handle cache anymore.</p>
<p>In that case you need to find out the new anonymous X-User-Hash and chan=
ge the VCL accordingly, else Varnish will return a no-cache header.</p>
<p>The easiest way to find the new hash is:</p>
<p><strong>1.</strong> Connect to your server (<em>shh</em> should be enoug=
h)</p>
<p><strong>2.</strong> Add <code>&lt;your-domain.com&gt;</code> to your <co=
de>/etc/hosts</code> file</p>
<p><strong>3.</strong> Execute the following command:</p>
<p><code>curl -I -H "Accept: application/vnd.fos.user-context-hash" http://=
&lt;your-domain.com&gt;/_fos_user_context_hash</code></p>
<p>You should get a result like this:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">HTTP/1.1 200 OK
Date: Mon, 03 Oct 2016 15:34:08 GMT
Server: Apache/2.4.18 (Ubuntu)
X-Powered-By: PHP/7.0.8-0ubuntu0.16.04.2
X-User-Hash: b1731d46b0e7a375a5b024e950fdb8d49dd25af85a5c7dd5116ad2a18cda82=
cb
Cache-Control: max-age=3D600, public
Vary: Cookie,Authorization
Content-Type: application/vnd.fos.user-context-hash</pre>=20
</div>
</div>
<p><strong>4.</strong> Now, replace the existing X-User-Hash value with the=
 new one:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;"># Note: This needs update every time anonymous user role assignment=
s change.
set req.http.X-User-Hash =3D "b1731d46b0e7a375a5b024e950fdb8d49dd25af85a5c7=
dd5116ad2a18cda82cb";</pre>=20
</div>
</div>
<p><strong>5.</strong> Restart the Varnish server and everything should wor=
k fine.</p>
<h3 id=3D"ContextawareHTTPcache-DefaultoptionsforFOSHttpCacheBundledefinedi=
neZ">Default options for FOSHttpCacheBundle defined in eZ</h3>
<p>The following configuration is defined in eZ by default for FOSHttpCache=
Bundle. You may override these settings.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: bash; gutter: false; theme: Eclipse" style=3D"font-siz=
e:12px;">fos_http_cache:=20
    proxy_client:=20
        # "varnish" is used, even when using Symfony HttpCache.
        default: varnish
        varnish:=20
            # Means http_cache.purge_servers defined for current SiteAccess=
.
            servers: [$http_cache.purge_servers$]

    user_context:=20
        enabled: true
        # User context hash is cached during 10min
        hash_cache_ttl: 600
        user_hash_header: X-User-Hash</pre>=20
</div>
</div>
<p>&nbsp;</p>
<div class=3D"highlight highlight-yaml">
<pre><span class=3D"sh">&nbsp;</span></pre>
<h2 id=3D"ContextawareHTTPcache-Credits">Credits</h2>
<p>This feature is based on&nbsp;<a href=3D"http://asm89.github.io/2012/09/=
26/context-aware-http-caching.html" class=3D"external-link" rel=3D"nofollow=
">Context aware HTTP caching post</a>&nbsp;by&nbsp;<a href=3D"https://githu=
b.com/asm89" class=3D"external-link" rel=3D"nofollow">asm89</a>.</p>
</div>
    </div>
</body>
</html>
------=_Part_4009_887223766.1485856327905--
