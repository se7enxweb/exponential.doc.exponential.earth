Message-ID: <856596983.3522.1485853487463.JavaMail.confluence@ip-10-127-227-164>
Subject: Exported From Confluence
MIME-Version: 1.0
Content-Type: multipart/related; 
	boundary="----=_Part_3521_951484634.1485853487462"

------=_Part_3521_951484634.1485853487462
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Content-Location: file:///C:/exported.html

<html xmlns:o=3D'urn:schemas-microsoft-com:office:office'
      xmlns:w=3D'urn:schemas-microsoft-com:office:word'
      xmlns:v=3D'urn:schemas-microsoft-com:vml'
      xmlns=3D'urn:w3-org-ns:HTML'>
<head>
    <meta http-equiv=3D"Content-Type" content=3D"text/html; charset=3Dutf-8=
">
    <title>Registering the FieldType as a service</title>
    <!--[if gte mso 9]>
    <xml>
        <o:OfficeDocumentSettings>
            <o:TargetScreenSize>1024x640</o:TargetScreenSize>
            <o:PixelsPerInch>72</o:PixelsPerInch>
            <o:AllowPNG/>
        </o:OfficeDocumentSettings>
        <w:WordDocument>
            <w:View>Print</w:View>
            <w:Zoom>90</w:Zoom>
            <w:DoNotOptimizeForBrowser/>
        </w:WordDocument>
    </xml>
    <![endif]-->
    <style>
                <!--
        @page Section1 {
            size: 8.5in 11.0in;
            margin: 1.0in;
            mso-header-margin: .5in;
            mso-footer-margin: .5in;
            mso-paper-source: 0;
        }

        td {
            page-break-inside: avoid;
        }

        tr {
            page-break-after: avoid;
        }

        div.Section1 {
            page: Section1;
        }

        /* Confluence print stylesheet. Common to all themes for print medi=
a */
/* Full of !important until we improve batching for print CSS */

@media print {
    #main {
        padding-bottom: 1em !important; /* The default padding of 6em is to=
o much for printouts */
    }

    body {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        font-size: 10pt;
        line-height: 1.2;
    }

    body, #full-height-container, #main, #page, #content, .has-personal-sid=
ebar #content {
        background: #fff !important;
        color: #000 !important;
        border: 0 !important;
        width: 100% !important;
        height: auto !important;
        min-height: auto !important;
        margin: 0 !important;
        padding: 0 !important;
        display: block !important;
    }

    a, a:link, a:visited, a:focus, a:hover, a:active {
        color: #000;
    }

    #content h1,
    #content h2,
    #content h3,
    #content h4,
    #content h5,
    #content h6 {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        page-break-after: avoid;
    }

    pre {
        font-family: Monaco, "Courier New", monospace;
    }

    #header,
    .aui-header-inner,
    #navigation,
    #sidebar,
    .sidebar,
    #personal-info-sidebar,
    .ia-fixed-sidebar,
    .page-actions,
    .navmenu,
    .ajs-menu-bar,
    .noprint,
    .inline-control-link,
    .inline-control-link a,
    a.show-labels-editor,
    .global-comment-actions,
    .comment-actions,
    .quick-comment-container,
    #addcomment {
        display: none !important;
    }

    .comment .date::before {
        content: none !important; /* remove middot for print view */
    }

    h1.pagetitle img {
        height: auto;
        width: auto;
    }

    .print-only {
        display: block;
    }

    #footer {
        position: relative !important; /* CONF-17506 Place the footer at en=
d of the content */
        margin: 0;
        padding: 0;
        background: none;
        clear: both;
    }

    #poweredby {
        border-top: none;
        background: none;
    }

    #poweredby li.print-only {
        display: list-item;
        font-style: italic;
    }

    #poweredby li.noprint {
        display: none;
    }

    /* no width controls in print */
    .wiki-content .table-wrap,
    .wiki-content p,
    .panel .codeContent,
    .panel .codeContent pre,
    .image-wrap {
        overflow: visible !important;
    }

    /* TODO - should this work? */
    #children-section,
    #comments-section .comment,
    #comments-section .comment .comment-body,
    #comments-section .comment .comment-content,
    #comments-section .comment p {
        page-break-inside: avoid;
    }

    #page-children a {
        text-decoration: none;
    }

    /**
     hide twixies

     the specificity here is a hack because print styles
     are getting loaded before the base styles. */
    #comments-section.pageSection .section-header,
    #comments-section.pageSection .section-title,
    #children-section.pageSection .section-header,
    #children-section.pageSection .section-title,
    .children-show-hide {
        padding-left: 0;
        margin-left: 0;
    }

    .children-show-hide.icon {
        display: none;
    }

    /* personal sidebar */
    .has-personal-sidebar #content {
        margin-right: 0px;
    }

    .has-personal-sidebar #content .pageSection {
        margin-right: 0px;
    }
}
-->
    </style>
</head>
<body>
    <h1>Registering the FieldType as a service</h1>
    <div class=3D"Section1">
        <p>To complete the implementation, we must register our FieldType w=
ith Symfony, by creating a service for it.</p>
<p><span style=3D"color: rgb(0,0,0);">Services are by default declared by b=
undles in <code>Resources/config/services.yml</code>. </span></p>
<div class=3D"confluence-information-macro confluence-information-macro-not=
e">
<p class=3D"title">Using a dedicated file for the FieldType services</p>
<span class=3D"aui-icon aui-icon-small aui-iconfont-warning confluence-info=
rmation-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p><span style=3D"color: rgb(0,0,0);">In order to be closer with the kernel=
 best practices, we could declare our FieldType services in a custom <code>=
fieldtypes.yml</code> file.</span></p>
<p><span style=3D"color: rgb(0,0,0);">&nbsp;</span><span style=3D"line-heig=
ht: 1.4285715;color: rgb(0,0,0);">All we have to do is instruct the bundle =
to actually load this file in addition to <code>services.yml</code> (or ins=
tead of <code>services.yml</code> !). This is done in the extension definit=
ion file, </span><code><span style=3D"line-height: 1.4285715;color: rgb(0,0=
,0);">DependencyInjection/EzSystemsTweetFieldTypeExtension.php</span></code=
><span style=3D"line-height: 1.4285715;color: rgb(0,0,0);">, in the </span>=
<code><span style=3D"line-height: 1.4285715;color: rgb(0,0,0);">load()</spa=
n></code><span style=3D"line-height: 1.4285715;color: rgb(0,0,0);"> method.=
</span></p>
<p><span style=3D"color: rgb(0,0,0);">Inside this file, file, find this lin=
e:</span></p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">$loader-&gt;load('services.yml');</pre>=20
</div>
</div>
<p><span style=3D"color: rgb(0,0,0);">This is where our bundle tells Symfon=
y that when parameters are loaded, </span><code style=3D"color: rgb(0,0,0);=
line-height: 1.4285715;">services.yml</code><span style=3D"color: rgb(0,0,0=
);"> should be loaded from </span><code style=3D"color: rgb(0,0,0);line-hei=
ght: 1.4285715;">Resources/config/</code><span style=3D"color: rgb(0,0,0);"=
> (defined above). Either replace edit the line, or add a new one with:</sp=
an></p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">$loader-&gt;load('fieldtypes.yml');</pre>=20
</div>
</div>
</div>
</div>
<p><span style=3D"color: rgb(0,0,0);">&nbsp;</span></p>
<p><span style=3D"color: rgb(0,0,0);">Like most API components, FieldTypes =
use the <a href=3D"http://symfony.com/doc/current/components/dependency_inj=
ection/tags.html" class=3D"external-link" rel=3D"nofollow">Symfony 2 servic=
e tag mechanism</a>.</span></p>
<p><span style=3D"color: rgb(0,0,0);">The principle is quite simple: a serv=
ice can be assigned one or several tags, with specific parameters. When the=
 dependency injection container is compiled into a PHP file, tags are read =
by <code>CompilerPass</code> implementations that add extra handling for ta=
gged services. </span><span style=3D"color: rgb(0,0,0);">Each service tagge=
d as <code><span>exponential.fieldType</span></code>&nbsp;is added to a </spa=
n><a href=3D"http://martinfowler.com/eaaCatalog/registry.html" style=3D"lin=
e-height: 1.4285715;" class=3D"external-link" rel=3D"nofollow"><span style=
=3D"color: rgb(17,85,204);text-decoration: underline;">registry</span></a><=
span style=3D"color: rgb(0,0,0);"> using the alias argument as its unique i=
dentifier (<code>ezstring</code>, <code>ezxmltext</code>=E2=80=A6).&nbsp;</=
span><span style=3D"color: rgb(0,0,0);">Each FieldType must also inherit fr=
om the abstract exponential.fieldType service. This ensures that the initiali=
zation steps shared by all fieldtypes are executed.</span></p>
<p><span style=3D"color: rgb(0,0,0);">Here is the service definition for ou=
r Tweet type:</span></p>
<p>&nbsp;</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>Resources/config/services.yml</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">parameters:
    ezsystems.tweetfieldtypebundle.fieldType.eztweet.class: EzSystems\Tweet=
FieldTypeBundle\eZ\Publish\FieldType\Tweet\Type
&nbsp;
services:
&nbsp;&nbsp;&nbsp; ezsystems.tweetfieldtypebundle.fieldType.eztweet:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; parent: exponential.fieldType
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; class:&nbsp;%ezsystems.tweetfiel=
dtypebundle.fieldType.eztweet.class%
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tags:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - {name:=
 exponential.fieldType, alias: eztweet}
</pre>=20
</div>
</div>
<p><span><span><br></span></span><span style=3D"color: rgb(0,0,0);">We take=
 care of namespacing our fieldtype with our vendor and bundle name to limit=
 the risk of naming conflicts.</span></p>
<div>
<span style=3D"color: rgb(0,0,0);"><br></span>
</div>
    </div>
</body>
</html>
------=_Part_3521_951484634.1485853487462--
